@using WBBEntity.PanelModels;

@{
    string L_PERIOD = "";
    string L_ORDER_STATUS = "";
    string L_INTERNET_NO = "";
    string L_ACCOUNT_NAME = "";
    string L_APPOINT_DATE = "";
    string L_PROMOTION = "";
    string L_SUBCONTRACT_NAME = "";
    string L_LENGTH = "";
    string L_OUTDOOR = "";
    string L_INDOOR = "";
    string L_TOTAL_PAID = "";
    string L_ENTRY_FEE = "";
    string L_ORDER_NO = "";
    string L_PRODUCT_NAME = "";
    string L_PRODUCT_OWNER = "";// L_PRODUCT_OWNER
    string L_PRIORITY = "";
    string L_LOOKUP_ID = "";
    string L_TOPUP_LOOKUP_ID = "";



    string L_LENGHT_DISTANCE = "";
    string L_SUBCONTRACT_CODE = "";
    string L_EFFECTIVE_END_DT = "";
    string L_CREAETED_BY = "";
    string L_LAST_UPDATED_BY = "";

    string L_ACC_REMARK = "";
    string L_ACC_ORDER_STATUS = "";
    string L_ACC_INVOICE_NO = "";
    string L_ACC_INVOICE_DATE = "";


    string L_Request_Distance = "";
    string L_Approve_Distance = "";
    string L_Approve_STAFF = "";
    string L_Approve_STATUS = "";
    string L_Reuse_Flag = "";
    string L_Maping_Cost = "";
    string L_Over_Length = "";
    string L_Over_Cost = "";
    string L_Rule_ID = "";
    string L_APPROVE_FLAG = "APPROVE FLAG";
    string L_DIFF_DISTANCE = "DIFF DISTANCE";
    string L_RECAL_DIS = "RECAL DISTANCE";
    string L_RECAL_RATE = "RECAL RATE";
    string L_RECAL_OVER_LENGTH = "RECAL OVER LENGTH";
    string L_RECAL_OVER_COST = "RECAL OVER COST";
    string L_LENGTH_DISTANCE = "L_LENGTH_DISTANCE";
    string L_ORDER_SFF = "L_ORDER_SFF";
    string L_FOA_SUBMIT_DATE = "L_FOA_SUBMIT_DATE";
    string L_CS_APPROVE_DATE_TEXT = "L_CS_APPROVE_DATE_TEXT";
    string L_EVENT_CODE = "L_EVENT_CODE";
    string L_INSTALLATION_ADDRESS = "L_INSTALLATION_ADDRESS";
    string L_SUBCONTRACT_SUB_TYPE = "L_SUBCONTRACT_SUB_TYPE";
    string L_SUBCONTRACT_TYPE = "L_SUBCONTRACT_TYPE";
    string L_RECAL_MAPPING_COST = "L_RECAL_MAPPING_COST";
    string L_INV_AMT_BFVAT = "Invoice Amount(Befoe Vat7%)";
    string L_INV_AMT_VAT = "Invoice Amount Vat7%";
    string L_TOTAL_INV_AMT_VAT = "Total Invoice Amount(Include Vat7%)";
    string L_ORDER_STATUS_DATE = "L_ORDER_STATUS_DATE";
    string L_TOTAL_COST = "L_TOTAL_COST";
    string L_OM_ORDER_STATUS = "L_OM_ORDER_STATUS";
    string L_PAID_DATE = "L_PAID_DATE";
    string L_ADDR_ID = "Address ID";
    string L_PHASE_PO = "Phase Po";
    string L_INV_GRP = "INV_GRP";
    string L_SUBCONTRACT_LOCATION = "L_SUBCONTRACT_LOCATION";

    string L_RECAL_DISTANCE = "";
    string L_ORDER_TYPE = "";
    string L_COMPLETE_DATE = "";
    string L_LOOKUP_NAME = "";
    string L_ONTOP_LOOKUP_ID = "";
    string L_ONTOP_LOOKUP_NAME = "";
    string L_TOTAL_DISTANCE = "";
    string L_BASE_COST = "";
    string L_TOTAL_SOA = "";
    string L_RECAL_LOOKUP_ID = "";
    string L_RECAL_ONTOP_LOOKUP_ID = "";
    string L_RECAL_COST = "";
    string L_TOTAL_RECAL = "";
    string L_REQUEST_SUB_FLAG = "";
    string L_TOTAL_FEE = "";
    string L_LAST_UPDATE_DATE = "";
    string L_SOA_SUBMIT_DATE = "";
    string L_SYMPTOM_GROUP = "";
    string L_MODIFY_DATE = "";
    string L_MODIFY_BY = "";
    string L_LOOKUP_COST = "";
    string L_ONTOP_COST = "";
    string L_LAST_UPDATE_BY = "";
    string L_SYMPTOM_NAME = "";

    if (ViewBag.ACCOrderListScreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.ACCOrderListScreen;
        L_PERIOD = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PERIOD").LovValue1 : "";
        L_ORDER_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS").LovValue1 : "";
        L_INTERNET_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INTERNET_NO").LovValue1 : "";
        L_ACCOUNT_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ACCOUNT_NAME").LovValue1 : "";
        L_APPOINT_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_APPOINT_DATE").LovValue1 : "";
        L_PROMOTION = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PROMOTION").LovValue1 : "";
        L_SUBCONTRACT_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_NAME").LovValue1 : "";
        L_LENGTH = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LENGTH").LovValue1 : "";
        L_OUTDOOR = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_OUTDOOR").LovValue1 : "";
        L_INDOOR = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INDOOR").LovValue1 : "";

        L_TOTAL_PAID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_PAID").LovValue1 : "";
        L_ENTRY_FEE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ENTRY_FEE").LovValue1 : "";
        L_ORDER_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_NO").LovValue1 : "";
        L_PRODUCT_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_NAME").LovValue1 : "";
        L_PRODUCT_OWNER = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_OWNER").LovValue1 : "";//L_PRODUCT_OWNER
        L_PRIORITY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PRIORITY").LovValue1 : "";//L_PRIORITY
        L_LOOKUP_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LOOKUP_ID").LovValue1 : "";//L_LOOKUP_ID
        L_TOPUP_LOOKUP_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOPUP_LOOKUP_ID").LovValue1 : "";//L_TOPUP_LOOKUP_ID
        L_SUBCONTRACT_CODE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_VENDOR_CODE").LovValue1 : "";
        L_TOTAL_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_COST").LovValue1 : "";

        L_OM_ORDER_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_OM_ORDER_STATUS").LovValue1 : "";

        L_LENGHT_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LENGTH").LovValue1 : "";

        L_EFFECTIVE_END_DT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_NO").LovValue1 : "";
        L_CREAETED_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_NAME").LovValue1 : "";
        L_LAST_UPDATED_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_VENDOR_CODE").LovValue1 : "";

        L_ACC_ORDER_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS").LovValue1 : "";


        L_ACC_REMARK = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_REMARK").LovValue1 : "";
        L_ACC_INVOICE_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INVOICE_NO").LovValue1 : "";
        L_ACC_INVOICE_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INVOICE_DATE").LovValue1 : "";

        L_Request_Distance = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Request_Distance").LovValue1 : "";
        L_Approve_Distance = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_Distance").LovValue1 : "";
        L_Approve_STAFF = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_STAFF").LovValue1 : "";
        L_Approve_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_STATUS").LovValue1 : "";
        L_Reuse_Flag = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Reuse_Flag").LovValue1 : "";
        L_Maping_Cost = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Maping_Cost").LovValue1 : "";
        L_Over_Length = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Over_Length").LovValue1 : "";
        L_Over_Cost = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Over_Cost").LovValue1 : "";
        L_Rule_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_Rule_ID").LovValue1 : "";
        L_LENGTH_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LENGTH_DISTANCE").LovValue1 : "";
        L_ORDER_SFF = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_SFF").LovValue1 : "";
        L_FOA_SUBMIT_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_FOA_SUBMIT_DATE").LovValue1 : "";
        L_CS_APPROVE_DATE_TEXT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_CS_APPROVE_DATE_TEXT").LovValue1 : "";
        L_EVENT_CODE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_EVENT_CODE").LovValue1 : "";
        L_INSTALLATION_ADDRESS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INSTALLATION_ADDRESS").LovValue1 : "";
        L_SUBCONTRACT_SUB_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_SUB_TYPE").LovValue1 : "";
        L_SUBCONTRACT_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_TYPE").LovValue1 : "";
        L_RECAL_MAPPING_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_MAPPING_COST").LovValue1 : "";
        L_INV_AMT_BFVAT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INV_AMT_BFVAT").LovValue1 : "";
        L_INV_AMT_VAT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INV_AMT_VAT").LovValue1 : "";
        L_TOTAL_INV_AMT_VAT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_INV_AMT_VAT").LovValue1 : "";
        L_ORDER_STATUS_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS_DATE").LovValue1 : "";
        L_PAID_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PAID_DATE").LovValue1 : "";

        L_ADDR_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ADDR_ID").LovValue1 : "";
        L_PHASE_PO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_PHASE_PO").LovValue1 : "";
        L_INV_GRP = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_INV_GRP").LovValue1 : "";
        L_SUBCONTRACT_LOCATION = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_LOCATION").LovValue1 : "";

        L_RECAL_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_DISTANCE").LovValue1 : "";
        L_ORDER_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_TYPE").LovValue1 : "";
        L_COMPLETE_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_COMPLETE_DATE").LovValue1 : "";
        L_LOOKUP_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LOOKUP_NAME").LovValue1 : "";
        L_ONTOP_LOOKUP_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ONTOP_LOOKUP_ID").LovValue1 : "";
        L_ONTOP_LOOKUP_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ONTOP_LOOKUP_NAME").LovValue1 : "";
        L_TOTAL_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_DISTANCE").LovValue1 : "";
        L_BASE_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_BASE_COST").LovValue1 : "";
        L_TOTAL_SOA = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_SOA").LovValue1 : "";
        L_RECAL_LOOKUP_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_LOOKUP_ID").LovValue1 : "";
        L_RECAL_ONTOP_LOOKUP_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_ONTOP_LOOKUP_ID").LovValue1 : "";
        L_RECAL_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_COST").LovValue1 : "";
        L_TOTAL_RECAL = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_RECAL").LovValue1 : "";
        L_REQUEST_SUB_FLAG = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_REQUEST_SUB_FLAG").LovValue1 : "";
        L_TOTAL_FEE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_FEE").LovValue1 : "";
        L_LAST_UPDATE_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_DATE").LovValue1 : "";
        L_SOA_SUBMIT_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SOA_SUBMIT_DATE").LovValue1 : "";
        L_SYMPTOM_GROUP = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SYMPTOM_GROUP").LovValue1 : "";
        L_MODIFY_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_MODIFY_DATE").LovValue1 : "";
        L_MODIFY_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_MODIFY_BY").LovValue1 : "";
        L_LOOKUP_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LOOKUP_COST").LovValue1 : "";
        L_ONTOP_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_ONTOP_COST").LovValue1 : "";
        L_LAST_UPDATE_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_BY").LovValue1 : "";
        L_SYMPTOM_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT_REPORT_INSTALLATION") ? configscreen.FirstOrDefault(f => f.Name == "L_SYMPTOM_NAME").LovValue1 : "";


    }

}

<div id="AccountGridresult" class="row">
    @{
        int counter = 1;
    }
    @(Html.Kendo().TabStrip()
                                                                                                                                .Name("SoftwareTabStrip")
                                                                                                                                .Events(events => events
                                                                                                                                        .Select("onSelect")
                                                                                                                                    )
                                                                                                                                .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
                                                                                                                                .Items(tabstrip =>
                                                                                                                                {
                                                                                                                                tabstrip.Add()
                                                                                                                                            .Text("INSTALLATION")
                                                                                                                                            .Selected(true)
                                                                                                                                            .Content(@<text>
                                                                                                                                                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.ReportInstallationCostbyOrderListModel_Binding>()
                                                                                                                                                                                      .Name("AccountingView")
                                                                                                                                                                                      .Sortable()
                                                                                                                                                                               .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                                                                                                                                                      .Columns(columns =>
                                                                                                                                                                      {
                                                                                                                                                                          columns.Bound(p => p.WORK_STATUS)
                                                                                                                                                                                 .ClientTemplate("# if ( WORK_STATUS === 'Confirm Paid'){ #<input type='checkbox' class='k-cb ACCTViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb ACCTViewRow-checkbox hidden' disabled = 'disabled' />#}#")
                                                                                                                                                                         .HeaderTemplate("<input type='checkbox' id='ACCTViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                                                                                                                                                                          .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);

                                                                                                                                                                          columns.Command(command =>
                                                                                                                                                                          {
                                                                                                                                                                              command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");

                                                                                                                                                                          }).Title("ACTION").Width(90);

                                                                                                                                                                          //columns.Bound(p => p.RowNumber).Title("No").HtmlAttributes(new { style = "text-align:center;" }).Width(40).Template(t => { }).ClientTemplate("#= renderNumber(data) #");
                                                                                                                                                                          columns.Bound(p => p.WORK_STATUS).Title(@L_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(170);//WORKFLOW STATUS
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NUMBER_MASKING).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(110);//InternetNO
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NO).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(120).Hidden();//InternetNO
                                                                                                                                                                          //columns.Bound(p => p.PAY_PERIOD).Title(@L_PERIOD).HtmlAttributes(new { style = "text-align:left;" }).Width(120);//รอบการเบิก
                                                                                                                                                                          //columns.Bound(p => p.ORDER_STATUS_DT).Title(@L_ORDER_STATUS_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(160).ClientTemplate("# if ( ORDER_STATUS_DT === '' || ORDER_STATUS_DT === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(ORDER_STATUS_DT,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");


                                                                                                                                                                          //columns.Bound(p => p.ACCOUNT_NAME).Title(@L_PRODUCT_OWNER).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//PRODUCT OWNER

                                                                                                                                                                          columns.Bound(p => p.ORDER_NO).Title(@L_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220).Hidden();//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_NO_SFF).Title(@L_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_TYPE).Title(@L_ORDER_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order Type.
                                                                                                                                                                          columns.Bound(p => p.COMPLETE_DATE_TEXT).Title(@L_COMPLETE_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Complete date
                                                                                                                                                                          columns.Bound(p => p.SOA_SUBMIT_DATE_TEXT).Title(@L_SOA_SUBMIT_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//SOA Submit Date

                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_NAME).Title(L_SUBCONTRACT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(180);//Subcontract

                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_TYPE).Title(L_SUBCONTRACT_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract type
                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(L_SUBCONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract sub type
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_ID).Title(@L_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup ID
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_NAME).Title(@L_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Name
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_COST).Title(@L_LOOKUP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Cost

                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_ID).Title(@L_ONTOP_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//TOPUP LOOKUP ID|| ONTOP LOOKUP ID
                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_NAME).Title(@L_ONTOP_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//TOPUP LOOKUP ID|| ONTOP LOOKUP ID
                                                                                                                                                                          columns.Bound(p => p.ONTOP_COST).Title(@L_ONTOP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//ONTOP COST
                                                                                                                                                                          columns.Bound(p => p.TOTAL_DISTANCE).Title(@L_TOTAL_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Distance
                                                                                                                                                                          columns.Bound(p => p.BASE_COST).Title(@L_BASE_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Base Cost
                                                                                                                                                                          columns.Bound(p => p.OVER_LENGTH).Title(L_Over_Length).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Over lenght
                                                                                                                                                                          columns.Bound(p => p.OVER_COST).Title(L_Over_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Over cost
                                                                                                                                                                          columns.Bound(p => p.TOTAL_SOA).Title(@L_TOTAL_SOA).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Soa
                                                                                                                                                                          columns.Bound(p => p.RECAL_LOOKUP_ID).Title(@L_RECAL_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Lookup ID
                                                                                                                                                                          columns.Bound(p => p.RECAL_ONTOP_LOOKUP_ID).Title(@L_RECAL_ONTOP_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Ontop Lookup ID
                                                                                                                                                                          columns.Bound(p => p.RECAL_DISTANCE).Title(@L_RECAL_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Distance
                                                                                                                                                                          columns.Bound(p => p.RECAL_COST).Title(@L_RECAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Cost
                                                                                                                                                                          columns.Bound(p => p.RECAL_OVER_LENGTH).Title(L_RECAL_OVER_LENGTH).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal over lenght
                                                                                                                                                                          columns.Bound(p => p.RECAL_OVER_COST).Title(L_RECAL_OVER_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Over Cost
                                                                                                                                                                          columns.Bound(p => p.TOTAL_RECAL).Title(@L_TOTAL_RECAL).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Recal
                                                                                                                                                                          //columns.Bound(p => p.TOTAL_DISPUTE).Title("Total Dispute").HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Dispute
                                                                                                                                                                          columns.Bound(p => p.REUSED_FLAG).Title(L_Reuse_Flag).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Reuse Flag
                                                                                                                                                                          columns.Bound(p => p.REQUEST_SUB_FLAG).Title(@L_REQUEST_SUB_FLAG).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Request Sub Flag
                                                                                                                                                                          columns.Bound(p => p.TOTAL_FEE).Title(@L_TOTAL_FEE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Fee
                                                                                                                                                                          columns.Bound(p => p.LAST_UPDATE_DATE_TEXT).Title(@L_LAST_UPDATE_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);//Last Update Date
                                                                                                                                                                          columns.Bound(p => p.LAST_UPDATE_BY).Title(@L_LAST_UPDATE_BY).HtmlAttributes(new { style = "text-align:center;" }).Width(150);//Last Update By

                                                                                                                                                                      })
                                                                                                                                                                                .Scrollable(scrollable => scrollable.Height("auto"))
                                                                                                                                                                                // .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                                                                                                                                .Resizable(resize => resize.Columns(true))
                                                                                                                                                                                .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 5, 20, 50, 100 }))
                                                                                                                                                                                .AutoBind(false)
                                                                                                                                                                                .Sortable()
                                                                                                                                                                                .DataSource(dataSource => dataSource
                                                                                                                                                                                    .Ajax()
                                                                                                                                                                                    .Aggregates(aggregates =>
                                                                                                                                                                                    {

                                                                                                                                                                                        aggregates.Add(p => p.TOTAL_PAID).Sum();

                                                                                                                                                                                    })
                                                                                                                                                                                    .PageSize(20)
                                                                                                                                                                                    .Read(read => read.Action("SearchReportInstallationCostbyOrderList", "ReportInstallationCostbyOrder").Data("bindingValue"))
                                                                                                                                                                                //.Update(update => update.Action("UpdateSCMOrderList", "ReportInstallationCostbyOrder"))
                                                                                                                                                                                )
                                                                                                                                                                               .Events(e => e.DataBound("onACCTViewDataBound"))
                                                                                                                                                                       ) </text>);
                                                                                                                                    tabstrip.Add()
                                                                                                                                            .Text("MA")
                                                                                                                                            .Content(@<text>
                                                                                                                                                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.ReportInstallationCostbyOrderListModel_Binding>()
                                                                                                                                                                                      .Name("AccountingView2")

                                                                                                                                                                    .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                                                                                                                                                      .Columns(columns =>
                                                                                                                                                                      {
                                                                                                                                                                          columns.Bound(p => p.ORDER_STATUS)
                                                                                                                                                                                 .ClientTemplate("# if ( ORDER_STATUS === 'Confirm Paid'){ #<input type='checkbox' class='k-cb ACCTViewRow2-checkbox' /># }else{# <input type='checkbox' class='k-cb ACCTViewRow2-checkbox hidden' disabled = 'disabled' />#}#")
                                                                                                                                                                         .HeaderTemplate("<input type='checkbox' id='ACCTViewheader2-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                                                                                                                                                                          .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);

                                                                                                                                                                          columns.Command(command =>
                                                                                                                                                                          {
                                                                                                                                                                              command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");

                                                                                                                                                                          }).Title("ACTION").Width(90);


                                                                                                                                                                          columns.Bound(p => p.ORDER_STATUS).Title(@L_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(170);//WORKFLOW STATUS
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NO).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(110);//InternetNO
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NUMBER).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(120).Hidden();//InternetNO
                                                                                                                                                                          columns.Bound(p => p.ORDER_NO).Title(@L_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220).Hidden();//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_NO_SFF).Title(@L_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_TYPE).Title(@L_ORDER_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order Type.
                                                                                                                                                                          columns.Bound(p => p.SOA_SUBMIT_DATE_TEXT).Title(@L_SOA_SUBMIT_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//SOA Submit Date
                                                                                                                                                                          columns.Bound(p => p.SYMPTOM_GROUP).Title(@L_SYMPTOM_GROUP).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Symptom Group
                                                                                                                                                                          columns.Bound(p => p.SYMPTOM_NAME).Title(@L_SYMPTOM_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Symptom Name
                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_NAME).Title(L_SUBCONTRACT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(180);//Subcontract

                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_TYPE).Title(L_SUBCONTRACT_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract type
                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(L_SUBCONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract sub type
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_ID).Title(@L_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup ID
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_NAME).Title(@L_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Name
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_COST).Title(@L_LOOKUP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Cost
                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_ID).Title(@L_ONTOP_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//ONTOP LOOKUP ID
                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_NAME).Title(@L_ONTOP_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);// ONTOP LOOKUP NAME
                                                                                                                                                                          columns.Bound(p => p.ONTOP_COST).Title(@L_ONTOP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//ONTOP COST

                                                                                                                                                                          columns.Bound(p => p.BASE_COST).Title(@L_BASE_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Base Cost
                                                                                                                                                                          columns.Bound(p => p.RECAL_COST).Title(@L_RECAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Cost
                                                                                                                                                                          columns.Bound(p => p.MODIFY_DATE_TEXT).Title(@L_MODIFY_DATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Modify Date
                                                                                                                                                                          columns.Bound(p => p.MODIFY_BY).Title(@L_MODIFY_BY).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:n}").Width(150);//Modify By

                                                                                                                                                                      })
                                                                                                                                                                                .Scrollable(scrollable => scrollable.Height("auto"))
                                                                                                                                                                                // .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                                                                                                                                .Resizable(resize => resize.Columns(true))
                                                                                                                                                                                .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 5, 20, 50, 100 }))
                                                                                                                                                                                .AutoBind(false)
                                                                                                                                                                                .Sortable()
                                                                                                                                                                                .DataSource(dataSource => dataSource
                                                                                                                                                                                    .Ajax()
                                                                                                                                                                                    .Aggregates(aggregates =>
                                                                                                                                                                                    {

                                                                                                                                                                                        aggregates.Add(p => p.TOTAL_PAID).Sum();

                                                                                                                                                                                    })
                                                                                                                                                                                    .PageSize(20)
                                                                                                                                                                                    .Read(read => read.Action("SearchReportInstallationCostbyOrderList", "ReportInstallationCostbyOrder").Data("bindingValue"))
                                                                                                                                                                                )
                                                                                                                                                                               .Events(e => e.DataBound("onACCTViewDataBoundMA"))
                                                                                                                                                                       ) </text>);
                                                                                                                                    }))
</div>

<script>
    



    function _Clear() {
        console.log("CLEAR");
        $("#ORDER_NO").val("");
        $("#ACCESS_NO").val("");
        //Search Panel
        $("#txtSearchAccessNo").val("");
        $("#txtSearchOrderNo").val("");
        $("#txtSearchERRMSG").val("");
        $("#ORDER_NO").val("");
        $("#ACCESS_NO").val("");
        //$("#ddlStatus").data('kendoDropDownList').text("-- Select All --");
        $("#ddlRegion").data('kendoDropDownList').text("SELECT ALL");
        var ddlProductName = $("#ddlProductName").data('kendoMultiSelect');
        ddlProductName.value("");
        ddlProductName.trigger("change");
        $("#ddlSubContract").data('kendoDropDownList').value("ALL");
        $("#ddlRegion").data('kendoDropDownList').value("ALL");
        $("#ddlVendorcode").data('kendoDropDownList').value("ALL");
        $("#ddlIrDoc").data('kendoDropDownList').value("ALL");
        $("#ddlSubContracttype").data('kendoDropDownList').value("ALL");
        $("#ddlSubContractsubtype").data('kendoDropDownList').value("ALL");
        $("#ddlProductOwner").data('kendoDropDownList').value("ALL");
        $("#ddlOrdStatus").data('kendoDropDownList').value("ALL");
        $("#ddlOrdertype").data('kendoDropDownList').value("ALL");
        var ddlWorkflowStatus = $("#ddlWorkflowStatus").data('kendoMultiSelect');
        ddlWorkflowStatus.value("");
        ddlWorkflowStatus.trigger("change");
        $("#INVOICE_NO").val("");
        //$("#ddlProductName").data('kendoMultiSelect').text("SELECT ALL");
        //$("#ddlSubContract").data('kendoDropDownList').text("-- Select All --");
        $("#dtpFoaDateFrom").data("kendoDatePicker").value(new Date());
        $("#dtpFoaDateTo").data("kendoDatePicker").value(new Date());
        $("#dtpCsApproveDateFrom").data("kendoDatePicker").value(new Date());
        $("#dtpCsApproveDateTo").data("kendoDatePicker").value(new Date());
        $("#dtpWithdrawalDateFrom").data("kendoDatePicker").value(new Date());
        $("#dtpWithdrawalDateTo").data("kendoDatePicker").value(new Date());
        $("#dtpTransferDateFrom").data("kendoDatePicker").value(new Date());
        $("#dtpTransferDateTo").data("kendoDatePicker").value(new Date());
        $("#dtpCsApproveDateFrom").val("");
        $("#dtpCsApproveDateTo").val("");
        $("#dtpWithdrawalDateFrom").val("");
        $("#dtpWithdrawalDateTo").val("");
        $("#dtpTransferDateFrom").val("");
        $("#dtpTransferDateTo").val("");
        $("#dtpFoaDateFrom").val("");
        $("#dtpFoaDateTo").val("");
        $("#dtpFoaDateTo").data("kendoDatePicker").enable(false);
        $("#dtpCsApproveDateTo").data("kendoDatePicker").enable(false);
        $("#dtpWithdrawalDateTo").data("kendoDatePicker").enable(false);
        $("#dtpTransferDateTo").data("kendoDatePicker").enable(false);
        $("#validatefor-" + "dtpCsApproveDateFrom").html("");
        $("#validatefor-" + "dtpCsApproveDateTo").html("");

        $("#validatefor-" + "dtpWithdrawalDateFrom").html("");
        $("#validatefor-" + "dtpWithdrawalDateTo").html("");

        $("#validatefor-" + "dtpTransferDateFrom").html("");
        $("#validatefor-" + "dtpTransferDateTo").html("");


        $("#validatefor-" + "dtpFoaDateFrom").html("");
        $("#validatefor-" + "dtpFoaDateTo").html("");


        $("#AccountingView").data("kendoGrid").dataSource.data([]);
        $("#AccountingView2").data("kendoGrid").dataSource.data([]);

        $('#_orderListPanel').hide();
        $('#_orderListHistory').hide();
        $('#_DistanceDetail').hide();
        $('#_SapDetail').hide();
    }



    function Loading(x) {
        if (x == 0) {
            $("#PopupLoading").data("kendoWindow").close();
        }
        else {
            $("#PopupLoading").data("kendoWindow").open();
            $("#PopupLoading").data("kendoWindow").center();
        }
    }
    var counter = 1;
    
    var AccessList = function () {
        ACCESS_NUMBER = "";
    }
    $(document).ready(function () {
        // Initialize both Accounting grids
        var grid1 = $("#AccountingView").data("kendoGrid");
        var grid2 = $("#AccountingView2").data("kendoGrid");

        // Bind row checkbox click events to each grid
        grid1.table.on("click", ".ACCTViewRow-checkbox", selectRow); // For AccountingView grid
        grid2.table.on("click", ".ACCTViewRow2-checkbox", selectRow); // For AccountingView2 grid (MA)

        // "Check All" for AccountingView grid
        $('#ACCTViewheader-chb').change(function (ev) {
            handleCheckAll(ev, '.ACCTViewRow-checkbox');
        });

        // "Check All" for AccountingView2 grid (MA)
        $('#ACCTViewheader2-chb').change(function (ev) {
            handleCheckAll(ev, '.ACCTViewRow2-checkbox');
        });

        // Save selected rows on button click
        $("#saveChkAcc").bind("click", function () {
            saveCheckedItems();
        });
    });

    // Handle "Check All" checkbox functionality
    function handleCheckAll(ev, checkboxClass) {
        var checked = ev.target.checked;

        // Loop through all row checkboxes with the specific class
        $(checkboxClass + ':enabled').each(function (idx, item) {
            if (checked) {
                if ($(item).prop("checked", false)) {
                    $(item).click(); // Check the box
                }
            } else {
                if ($(item).prop("checked", true)) {
                    $(item).click(); // Uncheck the box
                    checkedIds = {};  // Clear checked IDs
                }
            }
        });

        // Update global checkbox states and UI elements
        if (checked) {
            $("#chk").val("True");
            $("#chkall").val("True");
            $("#updateall").prop("disabled", false);
            $(".h-cb").prop('checked', true); // Check header checkboxes
        } else {
            $("#chkall").val("False");
            $("#chk").val("False");
            $("#updateall").prop("disabled", true);
            $(".h-cb").prop('checked', false); // Uncheck header checkboxes
        }
    }

    // Save checked rows from both grids
    function saveCheckedItems() {
        var checked = [];
        var checkeds = [];

        // Loop through checkedIds to gather the selected items
        for (var i in checkedIds) {
            var ListModel = new AccessList();
            if (checkedIds[i]) {
                ListModel.ACCESS_NUMBER = i;
                checked.push(i);
                checkeds.push(ListModel);
                $("#accNo").val("000000000");  // Example value for testing
            }
        }

        // Perform actions based on "Check All" state
        if ($("#chkall").val() === "False") {
            CheckBoxACCTConfirmPaid(checkeds);  // Action for individually checked rows
        } else {
            CheckBoxALLACCTConfirmPaid();  // Action for "Check All"
        }
    }

    //function onSelect(e) {
    //    _Clear();

        
    //}
   
    //var checkedIds = {};

    //on click of the checkbox:
    function selectRow() {
        var checked = this.checked,
            row = $(this).closest("tr"),
            gridId = $(this).closest("[data-role='grid']").attr("id"),
            grid = $("#" + gridId).data("kendoGrid"),
            dataItem = grid.dataItem(row);

        checkedIds[dataItem.ACCESS_NUMBER] = checked;

        if (checked) {
            row.addClass("k-state-selected");
            $("#chk").val("True");
            if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                if ($('#ddlWorkflowStatus').val().length == 1) {
                    $("#updateall").prop("disabled", false);
                }
            }

        } else {
            $("#chkall").val("False");
            row.removeClass("k-state-selected");
            $("#" + gridId + "header-chb").prop("checked", false);
        }

        checkUpdateAllButton();
    }

    //on click of the checkbox MA:
    function selectRowMA() {
        var checked = this.checked,
            row = $(this).closest("tr"),
            grid2 = $("#AccountingView2").data("kendoGrid"),
            dataItem = grid2.dataItem(row);
        $("#hideinvNo").val(dataItem.INVOICE_NO);
        checkedIds[dataItem.ACCESS_NUMBER] = checked;
        if (checked) {
            //-select the row
            row.addClass("k-state-selected");

            //var checkHeader = true;

            //$.each(grid.items(), function (index, item) {
            //    if ( item.ORDER_STATUS === "Confirm Paid" || item.ORDER_STATUS === "Paid" || item.ORDER_STATUS === "Hold") {
            //        if (!($(item).hasClass("k-state-selected"))) {
            //            checkHeader = false;
            //        }
            //    }
            //});
            $("#chk").val("True");
            $("#updateall").prop("disabled", false);
            //$("#ACCTViewheader-chb")[0].checked = checkHeader;
        } else {
            $("#chkall").val("False");
            //-remove selection
            row.removeClass("k-state-selected");
            $("#ACCTViewheader2-chb").prop("checked", false);
            //$("#ACCTViewheader-chb")[0].checked = false;
        }

        checkUpdateAllButton();
    }

    function renderNumber(data) {
        return counter++;
    }

    function onACCTViewDataBound() {

        counter = 1;
        Loading(0);
        var grid = this;
        //fix kendo grid width
        if (this.dataSource.view().length === 0)
        {
            $('#export').attr("disabled", true);
            $('#btnAcctUpdate').attr("disabled", true);
            $("#updateall").prop("disabled", true);
            //$('#updatebyfile').attr("disabled", true);
            //insert empty row
            //var colspan = this.thead.find("th").length;
            //var emptyRow = "<tr style='height:auto; text-align:center' ><td colspan='" + colspan + "'>  </td></tr>";

            //this.tbody.html(emptyRow);

            //$("#noData").data("kendoWindow").open();
            //$("#noData").data("kendoWindow").center();
            ////workarounds for IE lt 9
            //this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            var colspan = this.thead.find("th").length;


            $("#sumtotal").html("0.00");
            $("#sumvat").html("0.00");
            $("#sumincvat").html("0.00");
            $("#_sumtotal").val("0");
            $("#_sumvat").val("0");
            $("#_sumincvat").val("0");
            var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

            this.tbody.html(emptyRow);

            //   $("#noData").data("kendoWindow").open();
            //    $("#noData").data("kendoWindow").center();
            //workarounds for IE lt 9
            this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            $(".k-grid-content").height(50);
        }
        else if (this.dataSource.view().length === 1)
        {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);
                var status = '';
                if (model.WORK_STATUS != null) {
                    status = model.WORK_STATUS
                } else if (model.ORDER_STATUS != null) {
                    status = model.ORDER_STATUS
                }
                var approveflag = model.APPROVE_FLAG;
                // console.log(approveflag);
                if ((status === 'Confirm Paid') && (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".ACCTViewRow-checkbox").show();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', false);

                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".ACCTViewRow-checkbox").hide();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', true);
                    //   $('#export').attr("disabled", true);
                }
            });

            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "150px");
            $('#btnAcctUpdate').attr("disabled", true);
            getSumValue();
        }
        else 
        {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);
                var status = '';
                if (model.WORK_STATUS != null) {
                    status = model.WORK_STATUS
                } else if (model.ORDER_STATUS != null) {
                    status = model.ORDER_STATUS
                }
                var approveflag = model.APPROVE_FLAG;
               // console.log(approveflag);
                if ((status === 'Confirm Paid') && (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".ACCTViewRow-checkbox").show();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', false);

                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".ACCTViewRow-checkbox").hide();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', true);
                  //   $('#export').attr("disabled", true);
                }
            });

            $('#export').attr("disabled", false);
          //  $('#btnAcctUpdate').attr("disabled", false);
            //$('#updatebyfile').attr("disabled", false);
            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "300px");
            getSumValue();
        }

        //show order list detail panel
        if (this.dataSource.view().length === 1) {

            var accNo = $("#AccountingView").data("kendoGrid").dataSource.view()[0].ACCESS_NO;
            var ordNo = $("#AccountingView").data("kendoGrid").dataSource.view()[0].ORDER_NO_SFF;
            $("#dbk_ACC_NO").val(accNo);
            $("#dbk_ORD_NO").val(ordNo);
            CallListDetail(accNo, ordNo);
        }


        //reset checklist
        //$('#ACCTViewheader-chb').removeAttr('checked');

        var view = this.dataSource.view();
        for(var i = 0; i < view.length;i++){
            if(checkedIds[view[i].id]){
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".ACCTViewRow-checkbox")
                    .attr("checked","checked");
            }
        }
        //$("#ACCTViewheader-chb").change(function () {
        //    idsToSend = [];
        //    var AccessListModel = new AccessList();
        //    AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
        //    idsToSend.push(AccessListModel);
        //});
        //when header checkbox is checked
        if ($("#ACCTViewheader-chb").prop("checked")) {
            $('.ACCTViewRow-checkbox:enabled').each(function (idx, item) {
                if ($(item).prop("checked", false)) {
                    $(item).click();
                }
            });
        }
        $('.ACCTViewRow-checkbox').change(function () {
            //checkAcctcount();
        });
        $("#ACCTViewheader-chb").change(function () {
            $('#btnAcctUpdate').attr("disabled", false);
            idsToSend = [];
            var AccessListModel = new AccessList();
            AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
            idsToSend.push(AccessListModel);
            console.log(idsToSend);

        });
        setSumValue();
    }
    function checkAcctcount() {
        var count = 0;
        $('.ACCTViewRow-checkbox:enabled').each(function (idx, item) {
            if ($(item).is(':checked')) {
                count++;
            }

        });
       // console.log(count)
        //if (count > 1) {
            //$('#btnAcctUpdate').attr("disabled", false);
            //$('#sendmail').attr('disabled', 'disabled');
        //} else {
            //$('#btnAcctUpdate').attr("disabled", true);
            // $('#sendmail').removeAttr('disabled');
         //   $("#hideinvNo").val("");
        //}
    }


    function onACCTViewDataBoundMA() {

        counter = 1;
        Loading(0);
        var grid = this;
        //fix kendo grid width
        if (this.dataSource.view().length === 0) {
            $('#export').attr("disabled", true);
            $('#btnAcctUpdate').attr("disabled", true);
            $("#updateall").prop("disabled", true);
            //$('#updatebyfile').attr("disabled", true);
            //insert empty row
            //var colspan = this.thead.find("th").length;
            //var emptyRow = "<tr style='height:auto; text-align:center' ><td colspan='" + colspan + "'>  </td></tr>";

            //this.tbody.html(emptyRow);

            //$("#noData").data("kendoWindow").open();
            //$("#noData").data("kendoWindow").center();
            ////workarounds for IE lt 9
            //this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            var colspan = this.thead.find("th").length;


            $("#sumtotal").html("0.00");
            $("#sumvat").html("0.00");
            $("#sumincvat").html("0.00");
            $("#_sumtotal").val("0");
            $("#_sumvat").val("0");
            $("#_sumincvat").val("0");
            var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

            this.tbody.html(emptyRow);

            //   $("#noData").data("kendoWindow").open();
            //    $("#noData").data("kendoWindow").center();
            //workarounds for IE lt 9
            this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            $(".k-grid-content").height(50);
        }
        else if (this.dataSource.view().length === 1) {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);
                var status = '';
                if (model.WORK_STATUS != null) {
                    status = model.WORK_STATUS
                } else if (model.ORDER_STATUS != null) {
                    status = model.ORDER_STATUS
                }
                var approveflag = model.APPROVE_FLAG;
                // console.log(approveflag);
                if ((status === 'Confirm Paid') && (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".ACCTViewRow2-checkbox").show();
                    $(this).find(".ACCTViewRow2-checkbox").attr('disabled', false);

                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".ACCTViewRow2-checkbox").hide();
                    $(this).find(".ACCTViewRow2-checkbox").attr('disabled', true);
                    //   $('#export').attr("disabled", true);
                }
            });

            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "150px");
            $('#btnAcctUpdate').attr("disabled", true);
            getSumValue();
        }
        else {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);
                var status = '';
                if (model.WORK_STATUS != null) {
                    status = model.WORK_STATUS
                } else if (model.ORDER_STATUS != null) {
                    status = model.ORDER_STATUS
                }
                var approveflag = model.APPROVE_FLAG;
                // console.log(approveflag);
                if ((status === 'Confirm Paid') && (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".ACCTViewRow2-checkbox").show();
                    $(this).find(".ACCTViewRow2-checkbox").attr('disabled', false);

                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".ACCTViewRow2-checkbox").hide();
                    $(this).find(".ACCTViewRow2-checkbox").attr('disabled', true);
                    //   $('#export').attr("disabled", true);
                }
            });

            $('#export').attr("disabled", false);
            //  $('#btnAcctUpdate').attr("disabled", false);
            //$('#updatebyfile').attr("disabled", false);
            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "300px");
            getSumValue();
        }

        //show order list detail panel
        if (this.dataSource.view().length === 1) {

            var accNo = $("#AccountingView2").data("kendoGrid").dataSource.view()[0].ACCESS_NUMBER;
            var ordNo = $("#AccountingView2").data("kendoGrid").dataSource.view()[0].ORDER_NO_SFF;
            $("#dbk_ACC_NO").val(accNo);
            $("#dbk_ORD_NO").val(ordNo);
            CallListDetail(accNo, ordNo);
        }


        //reset checklist
        //$('#ACCTViewheader-chb').removeAttr('checked');

        var view = this.dataSource.view();
        for (var i = 0; i < view.length; i++) {
            if (checkedIds[view[i].id]) {
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".ACCTViewRow2-checkbox")
                    .attr("checked", "checked");
            }
        }
        //$("#ACCTViewheader-chb").change(function () {
        //    idsToSend = [];
        //    var AccessListModel = new AccessList();
        //    AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
        //    idsToSend.push(AccessListModel);
        //});
        //when header checkbox is checked
        if ($("#ACCTViewheader2-chb").prop("checked")) {
            $('.ACCTViewRow2-checkbox:enabled').each(function (idx, item) {
                if ($(item).prop("checked", false)) {
                    $(item).click();
                }
            });
        }
        $('.ACCTViewRow2-checkbox').change(function () {
            //checkAcctcount();
        });
        $("#ACCTViewheader2-chb").change(function () {
            $('#btnAcctUpdate').attr("disabled", false);
            idsToSend = [];
            var AccessListModel = new AccessList();
            AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
            idsToSend.push(AccessListModel);
            console.log(idsToSend);

        });
        setSumValue();
    }
    function checkAcctcount() {
        var count = 0;
        $('.ACCTViewRow-checkbox:enabled').each(function (idx, item) {
            if ($(item).is(':checked')) {
                count++;
            }

        });
        // console.log(count)
        //if (count > 1) {
        //$('#btnAcctUpdate').attr("disabled", false);
        //$('#sendmail').attr('disabled', 'disabled');
        //} else {
        //$('#btnAcctUpdate').attr("disabled", true);
        // $('#sendmail').removeAttr('disabled');
        //   $("#hideinvNo").val("");
        //}
    }
</script>