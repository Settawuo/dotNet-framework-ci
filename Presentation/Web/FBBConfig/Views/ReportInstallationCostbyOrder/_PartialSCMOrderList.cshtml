@using WBBEntity.PanelModels;
@{

    string usertype = ViewBag.UserGroup;
    string L_ACC_NBR  = "";
    string L_USER_NAME = "";
    //string L_SBC_CPY = "";
    string L_PRODUCT_NAME = "";
    string L_PRODUCT_OWNER = "";// L_PRODUCT_OWNER
    string L_PRIORITY = "";
    string L_LOOKUP_ID = "";
    string L_TOPUP_LOOKUP_ID = "";
    string L_ON_TOP1 = "";
    string L_ON_TOP2 = "";
    string L_VOIP_NUMBER = "";
    string L_SERVICE_PACK_NAME = "";
    string L_ORD_NO = "";
    string L_ORD_TYPE = "";
    string L_ORDER_SFF = "";
    string L_APPOINTMENT_DATE = "";
    string L_SFF_ACTIVE_DATE = "";
    string L_APPROVE_JOB_FBSS_DATE = "";
    string L_COMPLETED_DATE = "";
    string L_ORDER_STATUS = "";
    string L_REJECT_REASON = "";
    string L_MATERIAL_CODE_CPESN = "";
    string L_CPE_SN = "";
    string L_CPE_MODE = "";
    string L_MATERIAL_CODE_STBSN = "";
    string L_STB_SN = "";
    string L_MATERIAL_CODE_ATASN = "";
    string L_ATA_SN = "";
    string L_MATERIAL_CODE_WIFIROUTESN = "";
    string L_WIFI_ROUTER_SN = "";
    string L_STO_LOCATION = "";
    string L_VENDOR_CODE = "";
    string L_FOA_REJECT_REASON = "";
    string L_RE_APPOINTMENT_REASON = "";
    string L_PHASE_PO = "";
    string L_SFF_SUBMITTED_DATE = "";
    string L_EVENT_CODE = "";
    string L_REGION = "";
    string L_TOTAL_FEE = "";
    string L_FEE_CODE = "";
    string L_ADDR_ID = "";
    string L_ADDR_NAME_TH = "";
    string L_Distance_To_Paid = "";
    string L_Out_door = "";
    string L_In_door = "";
    string L_Total_Paid = "";
    string L_Status  = "";
    string L_Remark = "";
    string L_NOTE = "";
    //Phase III  03/01/2019
    string L_Request_Distance = "";
    string L_Approve_Distance = "";
    string L_Approve_STAFF = "";
    string L_Approve_STATUS = "";
    string L_Reuse_Flag = "";
    string L_Maping_Cost = "";
    string L_Over_Length = "";
    string L_Over_Cost = "";
    string L_Rule_ID = "";
    string L_SUB_CONTRACT_TYPE = "";
    string L_SUB_CONTRACT_SUB_TYPE = "";
    string L_INSTALLATION_ADDRESS = "";
    string L_APPROVE_FLAG = "Order Status";
    string L_DIFF_DISTANCE = "DIFF DISTANCE";
    string L_RECAL_DIS = "RECAL DISTANCE";
    string L_RECAL_RATE = "Total RECAL";
    string L_RECAL_OVER_LENGTH = "RECAL OVER LENGTH";
    string L_RECAL_OVER_COST = "RECAL OVER COST";
    string L_MAX_LENGTH = "MAX LENGTH";
    string L_RECAL_MAPPING_COST = "RECAL MAPPING COST";
    string L_TOTAL_COST = "TOTAL FOA";
    string L_IR_DOC = "L_IR_DOC";
    string L_INVOICE_NO = "L_INVOICE_NO";
    string L_SUBCONTRACT_LOCATION = "L_SUBCONTRACT_LOCATION";

    string L_ORDER_TYPE = "";
    string L_LOOKUP_NAME = "";
    string L_SUBCONTRACT_NAME = "";
    string L_LOOKUP_COST = "";
    string L_ONTOP_LOOKUP_ID = "";
    string L_ONTOP_LOOKUP_NAME = "";
    string L_ONTOP_COST = "";
    string L_TOTAL_DISTANCE = "";
    string L_BASE_COST = "";
    string L_TOTAL_SOA = "";
    string L_RECAL_LOOKUP_ID = "";
    string L_RECAL_ONTOP_LOOKUP_ID = "";
    string L_RECAL_COST = "";
    string L_REQUEST_SUB_FLAG = "";
    string L_LAST_UPDATE_DATE = "";
    string L_SOA_SUBMIT_DATE = "";
    string L_SYMPTOM_GROUP = "";
    string L_SYMPTOM_NAME = "";
    string L_MODIFY_DATE = "";
    string L_MODIFY_BY = "";
    string L_LAST_UPDATE_BY = "";
    if (ViewBag.SCMOrderListScreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.SCMOrderListScreen;
        L_ACC_NBR = configscreen.FirstOrDefault(f => f.Name == "L_ACC_NBR").LovValue1 ?? "";
        L_USER_NAME = configscreen.FirstOrDefault(f => f.Name == "L_USER_NAME").LovValue1 ?? "";
        //L_SBC_CPY = configscreen.FirstOrDefault(f => f.Name == "L_SBC_CPY").LovValue1 ?? "";
        L_PRODUCT_NAME = configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_NAME").LovValue1 ?? "";
        L_PRODUCT_OWNER = configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_OWNER").LovValue1 ?? "";//L_PRODUCT_OWNER
        L_PRIORITY = configscreen.FirstOrDefault(f => f.Name == "L_PRIORITY").LovValue1 ?? "";//L_PRIORITY
        L_LOOKUP_ID = configscreen.FirstOrDefault(f => f.Name == "L_LOOKUP_ID").LovValue1 ?? "";//L_LOOKUP_ID
        L_TOPUP_LOOKUP_ID = configscreen.FirstOrDefault(f => f.Name == "L_TOPUP_LOOKUP_ID").LovValue1 ?? "";//L_TOPUP_LOOKUP_ID
        L_ON_TOP1 = configscreen.FirstOrDefault(f => f.Name == "L_ON_TOP1").LovValue1 ?? "";
        L_ON_TOP2 = configscreen.FirstOrDefault(f => f.Name == "L_ON_TOP2").LovValue1 ?? "";
        L_VOIP_NUMBER = configscreen.FirstOrDefault(f => f.Name == "L_VOIP_NUMBER").LovValue1 ?? "";
        L_SERVICE_PACK_NAME = configscreen.FirstOrDefault(f => f.Name == "L_SERVICE_PACK_NAME").LovValue1 ?? "";
        L_ORD_NO = configscreen.FirstOrDefault(f => f.Name == "L_ORD_NO").LovValue1 ?? "";
        L_ORD_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_ORD_TYPE").LovValue1 ?? "";
        L_ORDER_SFF = configscreen.FirstOrDefault(f => f.Name == "L_ORDER_SFF").LovValue1 ?? "";
        L_APPOINTMENT_DATE = configscreen.FirstOrDefault(f => f.Name == "L_APPOINTMENT_DATE").LovValue1 ?? "";
        L_SFF_ACTIVE_DATE = configscreen.FirstOrDefault(f => f.Name == "L_SFF_ACTIVE_DATE").LovValue1 ?? "";
        L_APPROVE_JOB_FBSS_DATE = configscreen.FirstOrDefault(f => f.Name == "L_APPROVE_JOB_FBSS_DATE").LovValue1 ?? "";
        L_COMPLETED_DATE = configscreen.FirstOrDefault(f => f.Name == "L_COMPLETED_DATE").LovValue1 ?? "";
        L_ORDER_STATUS = configscreen.FirstOrDefault(f => f.Name == "L_Status").LovValue1 ?? "";
        L_REJECT_REASON = configscreen.FirstOrDefault(f => f.Name == "L_REJECT_REASON").LovValue1 ?? "";
        L_MATERIAL_CODE_CPESN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_CPESN").LovValue1 ?? "";
        L_CPE_SN = configscreen.FirstOrDefault(f => f.Name == "L_CPE_SN").LovValue1 ?? "";
        L_CPE_MODE = configscreen.FirstOrDefault(f => f.Name == "L_CPE_MODE").LovValue1 ?? "";
        L_MATERIAL_CODE_STBSN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_STBSN").LovValue1 ?? "";
        L_STB_SN = configscreen.FirstOrDefault(f => f.Name == "L_STB_SN").LovValue1 ?? "";
        L_MATERIAL_CODE_ATASN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_ATASN").LovValue1 ?? "";
        L_ATA_SN = configscreen.FirstOrDefault(f => f.Name == "L_ATA_SN").LovValue1 ?? "";
        L_MATERIAL_CODE_WIFIROUTESN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_WIFIROUTESN").LovValue1 ?? "";
        L_WIFI_ROUTER_SN = configscreen.FirstOrDefault(f => f.Name == "L_WIFI_ROUTER_SN").LovValue1 ?? "";
        L_STO_LOCATION = configscreen.FirstOrDefault(f => f.Name == "L_STO_LOCATION").LovValue1 ?? "";
        L_VENDOR_CODE = configscreen.FirstOrDefault(f => f.Name == "L_VENDOR_CODE").LovValue1 ?? "";
        L_FOA_REJECT_REASON = configscreen.FirstOrDefault(f => f.Name == "L_FOA_REJECT_REASON").LovValue1 ?? "";
        L_RE_APPOINTMENT_REASON = configscreen.FirstOrDefault(f => f.Name == "L_RE_APPOINTMENT_REASON").LovValue1 ?? "";
        L_PHASE_PO = configscreen.FirstOrDefault(f => f.Name == "L_PHASE_PO").LovValue1 ?? "";
        L_SFF_SUBMITTED_DATE = configscreen.FirstOrDefault(f => f.Name == "L_SFF_SUBMITTED_DATE").LovValue1 ?? "";
        L_EVENT_CODE = configscreen.FirstOrDefault(f => f.Name == "L_EVENT_CODE").LovValue1 ?? "";
        L_REGION = configscreen.FirstOrDefault(f => f.Name == "L_REGION").LovValue1 ?? "";
        L_TOTAL_FEE = configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_FEE").LovValue1 ?? "";
        L_FEE_CODE = configscreen.FirstOrDefault(f => f.Name == "L_FEE_CODE").LovValue1 ?? "";
        L_ADDR_ID = configscreen.FirstOrDefault(f => f.Name == "L_ADDR_ID").LovValue1 ?? "";
        L_ADDR_NAME_TH = configscreen.FirstOrDefault(f => f.Name == "L_ADDR_NAME_TH").LovValue1 ?? "";
        L_Distance_To_Paid = configscreen.FirstOrDefault(f => f.Name == "L_Distance_To_Paid").LovValue1 ?? "";
        L_Out_door = configscreen.FirstOrDefault(f => f.Name == "L_Out_door").LovValue1 ?? "";
        L_In_door = configscreen.FirstOrDefault(f => f.Name == "L_In_door").LovValue1 ?? "";
        L_Total_Paid = configscreen.FirstOrDefault(f => f.Name == "L_Total Paid").LovValue1 ?? "";
        L_Status = configscreen.FirstOrDefault(f => f.Name == "L_Status").LovValue1 ?? "";
        L_Remark = configscreen.FirstOrDefault(f => f.Name == "L_Remark").LovValue1 ?? "";
        L_NOTE = configscreen.FirstOrDefault(f => f.Name == "L_NOTE").LovValue1 ?? "";
        L_Request_Distance = configscreen.FirstOrDefault(f => f.Name == "L_Request_Distance").LovValue1 ?? "";
        L_Approve_Distance = configscreen.FirstOrDefault(f => f.Name == "L_Approve_Distance").LovValue1 ?? "";
        L_Approve_STAFF = configscreen.FirstOrDefault(f => f.Name == "L_Approve_STAFF").LovValue1 ?? "";
        L_Approve_STATUS = configscreen.FirstOrDefault(f => f.Name == "L_Approve_STATUS").LovValue1 ?? "";
        L_Reuse_Flag = configscreen.FirstOrDefault(f => f.Name == "L_Reuse_Flag").LovValue1 ?? "";
        L_Maping_Cost = configscreen.FirstOrDefault(f => f.Name == "L_Maping_Cost").LovValue1 ?? "";
        L_Over_Length = configscreen.FirstOrDefault(f => f.Name == "L_Over_Length").LovValue1 ?? "";
        L_Over_Cost = configscreen.FirstOrDefault(f => f.Name == "L_Over_Cost").LovValue1 ?? "";
        L_Rule_ID = configscreen.FirstOrDefault(f => f.Name == "L_Rule_ID").LovValue1 ?? "";
        L_SUB_CONTRACT_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_SUB_CONTRACT_TYPE").LovValue1 ?? "";
        L_SUB_CONTRACT_SUB_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_SUB_CONTRACT_SUB_TYPE").LovValue1 ?? "";
        L_REQUEST_SUB_FLAG = configscreen.FirstOrDefault(f => f.Name == "L_REQUEST_SUB_FLAG").LovValue1 ?? "";
        L_INSTALLATION_ADDRESS = configscreen.FirstOrDefault(f => f.Name == "L_INSTALLATION_ADDRESS").LovValue1 ?? "";
        L_IR_DOC = configscreen.FirstOrDefault(f => f.Name == "L_IR_DOC").LovValue1 ?? "";
        L_INVOICE_NO = configscreen.FirstOrDefault(f => f.Name == "L_INVOICE_NO").LovValue1 ?? "";

        L_TOTAL_COST = configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_COST").LovValue1 ?? "";
        L_RECAL_DIS = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_DIS").LovValue1 ?? "";
        L_RECAL_OVER_LENGTH = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_OVER_LENGTH").LovValue1 ?? "";
        L_RECAL_OVER_COST  = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_OVER_COST").LovValue1 ?? "";
        L_RECAL_MAPPING_COST  = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_MAPPING_COST").LovValue1 ?? "";
        L_MAX_LENGTH = configscreen.FirstOrDefault(f => f.Name == "L_MAX_LENGTH").LovValue1 ?? "";
        L_DIFF_DISTANCE = configscreen.FirstOrDefault(f => f.Name == "L_DIFF_DISTANCE").LovValue1 ?? "";
        L_SUBCONTRACT_LOCATION = configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_LOCATION").LovValue1 ?? "";
        L_ORDER_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_ORDER_TYPE").LovValue1 ?? "";
        L_LOOKUP_NAME = configscreen.FirstOrDefault(f => f.Name == "L_LOOKUP_NAME").LovValue1 ?? "";
        L_SUBCONTRACT_NAME = configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_NAME").LovValue1 ?? "";
        L_LOOKUP_COST = configscreen.FirstOrDefault(f => f.Name == "L_LOOKUP_COST").LovValue1 ?? "";
        L_ONTOP_LOOKUP_ID = configscreen.FirstOrDefault(f => f.Name == "L_ONTOP_LOOKUP_ID").LovValue1 ?? "";
        L_ONTOP_LOOKUP_NAME = configscreen.FirstOrDefault(f => f.Name == "L_ONTOP_LOOKUP_NAME").LovValue1 ?? "";
        L_ONTOP_COST = configscreen.FirstOrDefault(f => f.Name == "L_ONTOP_COST").LovValue1 ?? "";
        L_TOTAL_DISTANCE = configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_DISTANCE").LovValue1 ?? "";
        L_BASE_COST = configscreen.FirstOrDefault(f => f.Name == "L_BASE_COST").LovValue1 ?? "";
        L_TOTAL_SOA = configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_SOA").LovValue1 ?? "";
        L_RECAL_LOOKUP_ID = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_LOOKUP_ID").LovValue1 ?? "";
        L_RECAL_ONTOP_LOOKUP_ID = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_ONTOP_LOOKUP_ID").LovValue1 ?? "";
        L_RECAL_COST = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_COST").LovValue1 ?? "";
        L_REQUEST_SUB_FLAG = configscreen.FirstOrDefault(f => f.Name == "L_REQUEST_SUB_FLAG").LovValue1 ?? "";
        L_LAST_UPDATE_DATE = configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_DATE").LovValue1 ?? "";
        L_SOA_SUBMIT_DATE = configscreen.FirstOrDefault(f => f.Name == "L_SOA_SUBMIT_DATE").LovValue1 ?? "";
        L_SYMPTOM_GROUP = configscreen.FirstOrDefault(f => f.Name == "L_SYMPTOM_GROUP").LovValue1 ?? "";
        L_SYMPTOM_NAME = configscreen.FirstOrDefault(f => f.Name == "L_SYMPTOM_NAME").LovValue1 ?? "";
        L_MODIFY_DATE = configscreen.FirstOrDefault(f => f.Name == "L_MODIFY_DATE").LovValue1 ?? "";
        L_MODIFY_BY = configscreen.FirstOrDefault(f => f.Name == "L_MODIFY_BY").LovValue1 ?? "";

        L_LAST_UPDATE_BY = configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_BY").LovValue1 ?? "";
        //L_LAST_UPDATE_DATE = configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_DATE").LovValue1 ?? "";
        //L_SOA_SUBMIT_DATE = configscreen.FirstOrDefault(f => f.Name == "L_SOA_SUBMIT_DATE").LovValue1 ?? "";
    }

}
<div id="SCMGridResult" class="row">
    @{
        int counter = 1;
    }
    @(Html.Kendo().TabStrip()
                                                                                                                                .Name("SoftwareTabStrip")
                                                                                                                                .Events(events => events
                                                                                                                                        .Select("onSelect")
                                                                                                                                    )
                                                                                                                                .Animation(animation => animation.Open(effect => effect.Fade(FadeDirection.In)))
                                                                                                                                .Items(tabstrip =>
                                                                                                                                {
                                                                                                                                tabstrip.Add()
                                                                                                                                            .Text("INSTALLATION")
                                                                                                                                            .Selected(true)
                                                                                                                                            .Content(@<text>
                                                                                                                                                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.ReportInstallationCostbyOrderListModel_Binding>()
                                                                                                                                                                                      .Name("SCMView")
                                                                                                                                                                               .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                                                                                                                                                      .Columns(columns =>
                                                                                                                                                                      {
                                                                                                                                                                          if (usertype == "SCM")
                                                                                                                                                                          {
                                                                                                                                                                              columns.Bound(p => p.WORK_STATUS)// || ORDER_STATUS === 'Confirm Paid'
                                                                                                                                                                                 .ClientTemplate("# if (WORK_STATUS=='Completed' ||WORK_STATUS=='Re Check'|| WORK_STATUS=='No Data' ||  WORK_STATUS=='Waiting Sub Verify' || WORK_STATUS === 'Waiting Paid' || WORK_STATUS === 'Dispute' || WORK_STATUS === 'Dispute'){ #<input type='checkbox' class='k-cb SCMViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb SCMViewRow-checkbox hidden' disabled= 'disabled' />#}#")
                                                                                                                                                                                 .HeaderTemplate("<input type='checkbox' id='SCMViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                                                                                                                                                                                 .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);
                                                                                                                                                                          }
                                                                                                                                                                          if (usertype == "ACCT")
                                                                                                                                                                          {
                                                                                                                                                                              // columns.Bound(p => p.ORDER_STATUS)
                                                                                                                                                                              // .ClientTemplate("# if ( ORDER_STATUS === 'Confirm Paid' || ORDER_STATUS === 'Paid' || ORDER_STATUS === 'Hold'){ #<input type='checkbox' class='k-cb SCMViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb SCMViewRow-checkbox hidden' disabled= 'disabled' />#}#")
                                                                                                                                                                              // .HeaderTemplate("<input type='checkbox' id='SCMViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                                                                                                                                                                              //.HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50);
                                                                                                                                                                          }
                                                                                                                                                                          columns.Command(command =>
                                                                                                                                                                          {
                                                                                                                                                                              command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");
                                                                                                                                                                          }).Title("ACTION").Width(100);

                                                                                                                                                                          //columns.Bound(p => p.RowNumber).Title("No").HtmlAttributes(new { style = "text-align:center;" }).Width(40).Template(t => { }).ClientTemplate("#= renderNumber(data) #");
                                                                                                                                                                          columns.Bound(p => p.WORK_STATUS).Title(L_Status).HtmlAttributes(new { style = "text-align:left;" }).Width(170);//WORKFLOW STATUS
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NUMBER_MASKING).Title(L_ACC_NBR).HtmlAttributes(new { style = "text-align:left;" }).Width(110);//InternetNO
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NO).Title(L_ACC_NBR).HtmlAttributes(new { style = "text-align:left;" }).Width(120).Hidden();//InternetNO
                                                                                                                                                                          //columns.Bound(p => p.PAY_PERIOD).Title(@L_PERIOD).HtmlAttributes(new { style = "text-align:left;" }).Width(120);//รอบการเบิก
                                                                                                                                                                          //columns.Bound(p => p.ORDER_STATUS_DT).Title(@L_ORDER_STATUS_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(160).ClientTemplate("# if ( ORDER_STATUS_DT === '' || ORDER_STATUS_DT === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(ORDER_STATUS_DT,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");


                                                                                                                                                                          //columns.Bound(p => p.ACCOUNT_NAME).Title(@L_PRODUCT_OWNER).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//PRODUCT OWNER

                                                                                                                                                                          columns.Bound(p => p.ORDER_NO).Title(L_ORD_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220).Hidden();//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_NO_SFF).Title(L_ORD_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_TYPE).Title(L_ORDER_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order Type.
                                                                                                                                                                          columns.Bound(p => p.COMPLETE_DATE_TEXT).Title(L_COMPLETED_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Complete date
                                                                                                                                                                          columns.Bound(p => p.SOA_SUBMIT_DATE_TEXT).Title(L_SOA_SUBMIT_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//SOA Submit Date

                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_NAME).Title(L_SUBCONTRACT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(180);//Subcontract

                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_TYPE).Title(L_SUB_CONTRACT_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract type
                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(L_SUB_CONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract sub type
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_ID).Title(L_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup ID
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_NAME).Title(L_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Name
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_COST).Title(L_LOOKUP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Cost

                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_ID).Title(L_ONTOP_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//TOPUP LOOKUP ID|| ONTOP LOOKUP ID
                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_NAME).Title(L_ONTOP_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//TOPUP LOOKUP ID|| ONTOP LOOKUP ID
                                                                                                                                                                          columns.Bound(p => p.ONTOP_COST).Title(L_ONTOP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//ONTOP COST
                                                                                                                                                                          columns.Bound(p => p.TOTAL_DISTANCE).Title(L_TOTAL_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Distance
                                                                                                                                                                          columns.Bound(p => p.BASE_COST).Title(L_BASE_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Base Cost
                                                                                                                                                                          columns.Bound(p => p.OVER_LENGTH).Title(L_Over_Length).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Over lenght
                                                                                                                                                                          columns.Bound(p => p.OVER_COST).Title(L_Over_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Over cost
                                                                                                                                                                          columns.Bound(p => p.TOTAL_SOA).Title(L_TOTAL_SOA).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Soa
                                                                                                                                                                          columns.Bound(p => p.RECAL_LOOKUP_ID).Title(L_RECAL_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Lookup ID
                                                                                                                                                                          columns.Bound(p => p.RECAL_ONTOP_LOOKUP_ID).Title(L_RECAL_ONTOP_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Ontop Lookup ID
                                                                                                                                                                          columns.Bound(p => p.RECAL_DISTANCE).Title(L_RECAL_DIS).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Distance
                                                                                                                                                                          columns.Bound(p => p.RECAL_COST).Title(L_RECAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Cost
                                                                                                                                                                          columns.Bound(p => p.RECAL_OVER_LENGTH).Title(L_RECAL_OVER_LENGTH).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal over lenght
                                                                                                                                                                          columns.Bound(p => p.RECAL_OVER_COST).Title(L_RECAL_OVER_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Over Cost
                                                                                                                                                                          columns.Bound(p => p.TOTAL_RECAL).Title(L_RECAL_RATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Recal
                                                                                                                                                                          //columns.Bound(p => p.TOTAL_DISPUTE).Title("Total Dispute").HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Dispute
                                                                                                                                                                          columns.Bound(p => p.REUSED_FLAG).Title(L_Reuse_Flag).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Reuse Flag
                                                                                                                                                                          columns.Bound(p => p.REQUEST_SUB_FLAG).Title(L_REQUEST_SUB_FLAG).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Request Sub Flag
                                                                                                                                                                          columns.Bound(p => p.TOTAL_FEE).Title(L_TOTAL_FEE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Total Fee
                                                                                                                                                                          columns.Bound(p => p.LAST_UPDATE_DATE_TEXT).Title(L_LAST_UPDATE_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);//Last Update Date
                                                                                                                                                                          columns.Bound(p => p.LAST_UPDATE_BY).Title(L_LAST_UPDATE_BY).HtmlAttributes(new { style = "text-align:center;" }).Width(150);//Last Update By

                                                                                                                                                                      })
                                                                                                                                                                                .Scrollable(scrollable => scrollable.Height("auto"))
                                                                                                                                                                                // .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                                                                                                                                .Resizable(resize => resize.Columns(true))
                                                                                                                                                                                .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 5, 20, 50, 100 }))
                                                                                                                                                                                .AutoBind(false)
                                                                                                                                                                                .Sortable()
                                                                                                                                                                                .DataSource(dataSource => dataSource
                                                                                                                                                                                    .Ajax()
                                                                                                                                                                                    .Aggregates(aggregates =>
                                                                                                                                                                                    {

                                                                                                                                                                                        aggregates.Add(p => p.TOTAL_PAID).Sum();

                                                                                                                                                                                    })
                                                                                                                                                                                    .PageSize(20)
                                                                                                                                                                                    .Read(read => read.Action("SearchReportInstallationCostbyOrderList", "ReportInstallationCostbyOrder").Data("bindingValue"))
                                                                                                                                                                                //.Update(update => update.Action("UpdateSCMOrderList", "ReportInstallationCostbyOrder"))
                                                                                                                                                                                )
                                                                                                                                                                               .Events(e => e.DataBound("onSCMViewDataBound"))
                                                                                                                                                                       ) </text>);
                                                                                                                                    tabstrip.Add()
                                                                                                                                            .Text("MA")
                                                                                                                                            .Content(@<text>
                                                                                                                                                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.ReportInstallationCostbyOrderListModel_Binding>()
                                                                                                                                                                                      .Name("SCMView2")

                                                                                                                                                                       .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                                                                                                                                                                      .Columns(columns =>
                                                                                                                                                                      {
                                                                                                                                                                          // columns.Bound(p => p.ORDER_STATUS)
                                                                                                                                                                          //        .ClientTemplate("# if ( ORDER_STATUS === 'Confirm Paid'){ #<input type='checkbox' class='k-cb ACCTViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb ACCTViewRow-checkbox hidden' disabled = 'disabled' />#}#")
                                                                                                                                                                          //.HeaderTemplate("<input type='checkbox' id='ACCTViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                                                                                                                                                                          // .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);
                                                                                                                                                                          columns.Bound(p => p.ORDER_STATUS)// || ORDER_STATUS === 'Confirm Paid'
                                                                                                                                                                                 .ClientTemplate("# if (ORDER_STATUS=='Completed' ||ORDER_STATUS=='Re Check'|| ORDER_STATUS=='No Data' ||  ORDER_STATUS=='Waiting Sub Verify' || ORDER_STATUS === 'Waiting Paid' || ORDER_STATUS === 'Dispute' || ORDER_STATUS === 'Dispute'){ #<input type='checkbox' class='k-cb SCMViewRow2-checkbox' /># }else{# <input type='checkbox' class='k-cb SCMViewRow2-checkbox hidden' disabled= 'disabled' />#}#")
                                                                                                                                                                                 .HeaderTemplate("<input type='checkbox' id='SCMViewheader2-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                                                                                                                                                                                 .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);

                                                                                                                                                                          columns.Command(command =>
                                                                                                                                                                          {
                                                                                                                                                                              command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");

                                                                                                                                                                          }).Title("ACTION").Width(90);


                                                                                                                                                                          columns.Bound(p => p.ORDER_STATUS).Title(@L_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(170);//WORKFLOW STATUS
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NO).Title(L_ACC_NBR).HtmlAttributes(new { style = "text-align:left;" }).Width(110);//InternetNO
                                                                                                                                                                          columns.Bound(p => p.ACCESS_NUMBER).Title(L_ACC_NBR).HtmlAttributes(new { style = "text-align:left;" }).Width(120).Hidden();//InternetNO
                                                                                                                                                                          columns.Bound(p => p.ORDER_NO).Title(L_ORD_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220).Hidden();//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_NO_SFF).Title(L_ORD_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order No.
                                                                                                                                                                          columns.Bound(p => p.ORDER_TYPE).Title(L_ORDER_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//Order Type.
                                                                                                                                                                          columns.Bound(p => p.SOA_SUBMIT_DATE_TEXT).Title(L_SOA_SUBMIT_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(220);//FOA SUBMIT DATE.
                                                                                                                                                                          columns.Bound(p => p.SYMPTOM_GROUP).Title(L_SYMPTOM_GROUP).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Symptom Group
                                                                                                                                                                          columns.Bound(p => p.SYMPTOM_NAME).Title(L_SYMPTOM_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Symptom Name
                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_NAME).Title(L_SUBCONTRACT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(180);//Subcontract

                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_TYPE).Title(L_SUB_CONTRACT_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract type
                                                                                                                                                                          columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(L_SUB_CONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);//Subcontract sub type
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_ID).Title(L_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup ID
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_NAME).Title(L_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Name
                                                                                                                                                                          columns.Bound(p => p.LOOKUP_COST).Title(L_LOOKUP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Lookup Cost
                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_ID).Title(L_ONTOP_LOOKUP_ID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//ONTOP LOOKUP ID
                                                                                                                                                                          columns.Bound(p => p.ONTOP_LOOKUP_NAME).Title(L_ONTOP_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);// ONTOP LOOKUP NAME
                                                                                                                                                                          columns.Bound(p => p.ONTOP_COST).Title(L_ONTOP_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//ONTOP COST

                                                                                                                                                                          columns.Bound(p => p.BASE_COST).Title(L_BASE_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Base Cost
                                                                                                                                                                          columns.Bound(p => p.RECAL_COST).Title(L_RECAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Recal Cost
                                                                                                                                                                          columns.Bound(p => p.MODIFY_DATE_TEXT).Title(L_MODIFY_DATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);//Modify Date
                                                                                                                                                                          columns.Bound(p => p.MODIFY_BY).Title(L_MODIFY_BY).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:n}").Width(150);//Modify By

                                                                                                                                                                      })
                                                                                                                                                                                .Scrollable(scrollable => scrollable.Height("auto"))
                                                                                                                                                                                // .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                                                                                                                                                .Resizable(resize => resize.Columns(true))
                                                                                                                                                                                .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 5, 20, 50, 100 }))
                                                                                                                                                                                .AutoBind(false)
                                                                                                                                                                                .Sortable()
                                                                                                                                                                                .DataSource(dataSource => dataSource
                                                                                                                                                                                    .Ajax()
                                                                                                                                                                                    .Aggregates(aggregates =>
                                                                                                                                                                                    {

                                                                                                                                                                                        aggregates.Add(p => p.TOTAL_PAID).Sum();

                                                                                                                                                                                    })
                                                                                                                                                                                    .PageSize(20)
                                                                                                                                                                                    .Read(read => read.Action("SearchReportInstallationCostbyOrderList", "ReportInstallationCostbyOrder").Data("bindingValue"))
                                                                                                                                                                                )
                                                                                                                                                                               .Events(e => e.DataBound("onSCMViewDataBoundMA"))
                                                                                                                                                                       ) </text>);
                                                                                                                                    }))
</div>
<div id="selectRow">
    @(Html.Kendo().Window()
                .Name("norow")
            .HtmlAttributes(new { @class = "i-gap-popup" })

                .Title("System Information")
            .Width(400)
            .Draggable()
            .Visible(false)
            .Modal(true)
            .Content(@<text>
        <div id="Nodata">
            <div style="text-align:center" class="row">
                <label style="font-size:15px;color:red">  Please Select Row</label>
            </div>
        </div>
            </text>)
    )
            </div>
            <div>

                <input id="_invNo" type="hidden" value="" />
                <input id="_invDate" type="hidden" value="" />
                <input id="_IRDOC" type="hidden" value="" />
                <input id="_remark" type="hidden" value="" />
                <input id="_ordstatus" type="hidden" value="" />
                <input id="_remarksub" type="hidden" value="" />
                <input id="_usertype" type="hidden" value="@ViewBag.UserGroup"/>
            </div>

            <script>



                function _Clear() {
                    console.log("CLEAR scm");
                    //Search Panel
                    $("#ORDER_NO").val("");
                    $("#ACCESS_NO").val("");
                    $("#txtSearchAccessNo").val("");
                    $("#txtSearchOrderNo").val("");
                    $("#txtSearchERRMSG").val("");
                    //$("#ddlStatus").data('kendoDropDownList').text("-- Select All --");
                    $("#ddlRegion").data('kendoDropDownList').text("SELECT ALL");
                    var ddlProductName = $("#ddlProductName").data('kendoMultiSelect');
                    ddlProductName.value("");
                    ddlProductName.trigger("change");
                    $("#ddlSubContract").data('kendoDropDownList').value("ALL");
                    $("#ddlRegion").data('kendoDropDownList').value("ALL");
                    $("#ddlVendorcode").data('kendoDropDownList').value("ALL");
                    $("#ddlIrDoc").data('kendoDropDownList').value("ALL");
                    $("#ddlSubContracttype").data('kendoDropDownList').value("ALL");
                    $("#ddlSubContractsubtype").data('kendoDropDownList').value("ALL");
                    $("#ddlProductOwner").data('kendoDropDownList').value("ALL");
                    $("#ddlOrdStatus").data('kendoDropDownList').value("ALL");
                    $("#ddlOrdertype").data('kendoDropDownList').value("ALL");
                    var ddlWorkflowStatus = $("#ddlWorkflowStatus").data('kendoMultiSelect');
                    ddlWorkflowStatus.value("");
                    ddlWorkflowStatus.trigger("change");
                    $("#INVOICE_NO").val("");
                    //$("#ddlProductName").data('kendoMultiSelect').text("SELECT ALL");
                    //$("#ddlSubContract").data('kendoDropDownList').text("-- Select All --");
                    $("#dtpFoaDateFrom").data("kendoDatePicker").value(new Date());
                    $("#dtpFoaDateTo").data("kendoDatePicker").value(new Date());
                    $("#dtpCsApproveDateFrom").data("kendoDatePicker").value(new Date());
                    $("#dtpCsApproveDateTo").data("kendoDatePicker").value(new Date());
                    $("#dtpWithdrawalDateFrom").data("kendoDatePicker").value(new Date());
                    $("#dtpWithdrawalDateTo").data("kendoDatePicker").value(new Date());
                    $("#dtpTransferDateFrom").data("kendoDatePicker").value(new Date());
                    $("#dtpTransferDateTo").data("kendoDatePicker").value(new Date());
                    $("#dtpCsApproveDateFrom").val("");
                    $("#dtpCsApproveDateTo").val("");
                    $("#dtpWithdrawalDateFrom").val("");
                    $("#dtpWithdrawalDateTo").val("");
                    $("#dtpTransferDateFrom").val("");
                    $("#dtpTransferDateTo").val("");
                    $("#dtpFoaDateFrom").val("");
                    $("#dtpFoaDateTo").val("");
                    $("#dtpFoaDateTo").data("kendoDatePicker").enable(false);
                    $("#dtpCsApproveDateTo").data("kendoDatePicker").enable(false);
                    $("#dtpWithdrawalDateTo").data("kendoDatePicker").enable(false);
                    $("#dtpTransferDateTo").data("kendoDatePicker").enable(false);
                    $("#validatefor-" + "dtpCsApproveDateFrom").html("");
                    $("#validatefor-" + "dtpCsApproveDateTo").html("");

                    $("#validatefor-" + "dtpWithdrawalDateFrom").html("");
                    $("#validatefor-" + "dtpWithdrawalDateTo").html("");

                    $("#validatefor-" + "dtpTransferDateFrom").html("");
                    $("#validatefor-" + "dtpTransferDateTo").html("");


                    $("#validatefor-" + "dtpFoaDateFrom").html("");
                    $("#validatefor-" + "dtpFoaDateTo").html("");


                    $("#SCMView").data("kendoGrid").dataSource.data([]);
                    $("#SCMView2").data("kendoGrid").dataSource.data([]);

                    $('#_orderListPanel').hide();
                    $('#_orderListHistory').hide();
                    $('#_DistanceDetail').hide();
                    $('#_SapDetail').hide();
                }

                //function onSelect(e) {
                //    _Clear();


                //}

                function editGrid(arg) {
                    arg.container.find("input[name='NOTE']").each(function () { $(this).attr("maxlength", "500") });
                    arg.container.find("input[name='NOTE']").each(function () { $(this).attr('style', 'background-color:#7EA700') });

                    arg.container.find("input[name=NOTE]").change(function () {


                        if (arg.container.find("input[name=NOTE]").val() == "") {
                            $("#tempNote").val("0");
                        }
                        else {
                            $("#tempNote").val(arg.container.find("input[name=NOTE]").val());
                        }
                    });


                }
                function checkNote() {
                    var tempnote = $("#tempNote").val();
                    var tempnoteLength = $("#tempNote").val().length;
                    if (tempnoteLength > 500) {

                        alert("Cannot Input Note Please Check Note Length");
                        return false;
                    }
                    else {
                        if (tempnote != "0") {
                            alert("Please Save Change OR Please Cancel Change !!! ");
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                }

                var AccessList = function () {
                    ACCESS_NUMBER = "";
                }
                //$(document).ready(function () {
                //    $("#tempNote").val("0");
                //    var grid = $("#SCMView").data("kendoGrid");
                //    grid.table.on("click", ".SCMViewRow-checkbox", selectRow);
                //    var count = 0;
                //    //check all
                //    $('#SCMViewheader-chb').change(function (ev) {
                //        var checked = ev.target.checked;
                      
                //        $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                //            count++;
                //            if (checked) {
                //                if ($(item).prop("checked", false)) {
                //                    $(item).click();
                //                }
                //            } else {
                //                if ($(item).prop("checked", true)) {
                //                    $(item).click();
                //                    checkedIds = {};
                //                }
                //            }
                //        });

                //        if (checked) {
                //            $("#chk").val("True");
                //            $("#chkall").val("True");
                //            if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                //                if ($('#ddlWorkflowStatus').val().length == 1 && count > 2) {
                //                    $("#updateall").prop("disabled", false);
                //                }
                //            }
                          
                //            $(".h-cb").prop('checked', true);
                //        } else {
                //            $("#chkall").val("False");
                //            $("#chk").val("False");
                //            $("#updateall").prop("disabled", true);
                //            $(".h-cb").prop('checked', false);
                //        }
                //    });

                //    //check all ma
                //    $('#SCMViewheader2-chb').change(function (ev) {
                //        var checked = ev.target.checked;


                //        $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                //            count++;
                //            if (checked) {
                //                if ($(item).prop("checked", false)) {
                //                    $(item).click();
                //                }
                //            } else {
                //                if ($(item).prop("checked", true)) {
                //                    $(item).click();
                //                    checkedIds = {};
                //                }
                //            }
                //        });

                //        if (checked) {
                //            $("#chk").val("True");
                //            $("#chkall").val("True");
                //            if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                //                if ($('#ddlWorkflowStatus').val().length == 1 && count > 2) {
                //                    $("#updateall").prop("disabled", false);
                //                }
                //            }

                //            $(".h-cb").prop('checked', true);
                //        } else {
                //            $("#chkall").val("False");
                //            $("#chk").val("False");
                //            $("#updateall").prop("disabled", true);
                //            $(".h-cb").prop('checked', false);
                //        }
                //    });
                //    //sample retrive data
                //    $("#savechkbox").bind("click", function () {

                //        var checked = [];
                //        var checkeds = [];


                //        for (var i in checkedIds) {
                //            var ListModel = new AccessList();
                //            if (checkedIds[i]) {
                //                ListModel.ACCESS_NUMBER = i;
                //                checked.push(i);
                //                checkeds.push(ListModel);
                //                $("#accNo").val("000000000");
                //            }

                //        }
                //        if ($("#chkall").val() === "False") {
                //            CheckBoxSCMConfirmPaid(checkeds);
                //           // alert("NotCheckAll");
                //        }
                //        else {
                //           //  alert("CheckAll");
                //           CheckBoxAllSCMConfirmPaid();

                //        }


                       




                //    });
                //});

                $(document).ready(function () {
                    $("#tempNote").val("0");

                    var grid1 = $("#SCMView").data("kendoGrid");
                    var grid2 = $("#SCMView2").data("kendoGrid"); // Assuming there's a second grid

                    // Bind the checkbox click event to SCMView grid rows
                    grid1.table.on("click", ".SCMViewRow-checkbox", selectRow);
                    grid2.table.on("click", ".SCMViewRow2-checkbox", selectRow); // For second grid

                    var count = 0;

                    // Check all functionality for SCMView grid
                    $('#SCMViewheader-chb').change(function (ev) {
                        handleCheckAllSCM(ev, grid1, '.SCMViewRow-checkbox');
                    });

                    // Check all functionality for SCMView2 grid
                    $('#SCMViewheader2-chb').change(function (ev) {
                        handleCheckAllSCM(ev, grid2, '.SCMViewRow2-checkbox');
                    });

                    // Save checked items
                    $("#savechkbox").bind("click", function () {
                        saveCheckedItemsSCM();
                    });
                });

                // Handle the "Check All" checkbox functionality for both grids
                function handleCheckAllSCM(ev, grid, headerCheckboxId) {
                    var checked = ev.target.checked;
                    var count = 0;

                    // Loop through all row checkboxes in the corresponding grid
                    $(headerCheckboxId + ':enabled').each(function (idx, item) {
                        count++;
                        if (checked) {
                            if ($(item).prop("checked", false)) {
                                $(item).click();  // Check the box
                            }
                        } else {
                            if ($(item).prop("checked", true)) {
                                $(item).click();  // Uncheck the box
                                checkedIds = {};   // Clear the checked IDs
                            }
                        }
                    });

                    // Update global checkbox values and enable/disable the update button
                    if (checked) {
                        $("#chk").val("True");
                        $("#chkall").val("True");

                        if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                            if ($('#ddlWorkflowStatus').val().length == 1 && count > 2) {
                                $("#updateall").prop("disabled", false);
                            }
                        }

                        $(".h-cb").prop('checked', true);
                    } else {
                        $("#chkall").val("False");
                        $("#chk").val("False");
                        $("#updateall").prop("disabled", true);
                        $(".h-cb").prop('checked', false);
                    }
                }

                function saveCheckedItemsSCM() {
                    var checked = [];
                    var checkeds = [];

                    for (var i in checkedIds) {
                        var ListModel = new AccessList();
                        if (checkedIds[i]) {
                            ListModel.ACCESS_NUMBER = i;
                            checked.push(i);
                            checkeds.push(ListModel);
                            $("#accNo").val("000000000");
                        }
                    }
                    if ($("#chkall").val() === "False") {
                        CheckBoxSCMConfirmPaid(checkeds);
                    } else {
                        CheckBoxAllSCMConfirmPaid();
                    }
                }



                function selectRow() {
                    var checked = this.checked,
                        row = $(this).closest("tr"),
                        gridId = $(this).closest("[data-role='grid']").attr("id"),
                        grid = $("#" + gridId).data("kendoGrid"),
                        dataItem = grid.dataItem(row);

                    checkedIds[dataItem.ACCESS_NUMBER] = checked;

                    if (checked) {
                        row.addClass("k-state-selected");
                        $("#chk").val("True");
                        if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                            if ($('#ddlWorkflowStatus').val().length == 1) {
                                $("#updateall").prop("disabled", false);
                            }
                        }
                        
                    } else {
                        $("#chkall").val("False");
                        row.removeClass("k-state-selected");
                        $("#" + gridId + "header-chb").prop("checked", false);
                    }

                    checkUpdateAllButton();
                }

                function onSCMViewDataBound() {
                    $("#tempNote").val("0");
                    Loading(0);
                    var grid = this;
                    //fix kendo grid width
                    if (this.dataSource.view().length === 0) {
                        $('#export').attr("disabled", true);
                        //$('#sendmail').attr("disabled", true);

                        $("#updateall").prop("disabled", true);
                      //  $('#updatebyfile').attr("disabled", true);


                        var colspan = this.thead.find("th").length;
                    
                    

                        var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

                        this.tbody.html(emptyRow);

                     //   $("#noData").data("kendoWindow").open();
                    //    $("#noData").data("kendoWindow").center();
                        //workarounds for IE lt 9
                        this.table.width(800);
                        //$(".k-grid-content").height(2 * kendo.support.scrollbar());
                        $(".k-grid-content").height(50);
                    }
                    else {

                        grid.tbody.find("tr[role='row']").each(function () {
                            var model = grid.dataItem(this);
                            var status = '';
                            if (model.WORK_STATUS != null) {
                                status = model.WORK_STATUS
                            } else if (model.ORDER_STATUS != null) {
                                status = model.ORDER_STATUS
                            }

                            var approveflag = model.APPROVE_FLAG
                          //  console.log(status);
                            if ( $("#_usertype").val() == "SCM")
                            {
                                 $(this).find(".SCMViewRow-checkbox").attr('value', status);
                                if ((status === "Waiting Paid" || status === "Dispute" || status === "Hold") || (status === "Waiting Sub Verify") && (approveflag === "Approved")) {
                              //  if (status === "Waiting Sub Verify" || status === "Waiting Paid" || status === "Dispute" || status === "Confirm Paid") {
                                    $(this).find(".k-grid-Edit").show();
                                    $(this).find(".SCMViewRow-checkbox").hide();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', true);
                                }
                                //else if (((status === "Waiting Sub Verify") || status === "Hold") && (approveflag === "Approved")) {
                                //    $(this).find(".k-grid-Edit").show();
                                //    $(this).find(".SCMViewRow-checkbox").show();
                                //    $(this).find(".SCMViewRow-checkbox").attr('disabled', false);
                                //}
                                else if ((status === "Completed" || status === "Re Check" || status === "No Data") && (approveflag === "Approved") )//&& (approveflag === "Approved"))
                                {
                                    $(this).find(".k-grid-Edit").hide();
                                    $(this).find(".SCMViewRow-checkbox").show();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', false);
                                }
                                else
                                {
                                    $(this).find(".k-grid-Edit").hide();
                                    $(this).find(".SCMViewRow-checkbox").hide();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', true);

                                }
                            }
                            //if ($("#_usertype").val() == "ACCT")
                            //{
                            //   //  $("#SCMViewheader-chb").prop("disabled", true);
                            //    if ((status === 'Confirm Paid' || status === 'Hold') && (approveflag === "Approved")) {
                            //        $(this).find(".k-grid-Edit").show();
                            //        $(this).find(".SCMViewRow-checkbox").hide();
                            //    } else {
                            //        $(this).find(".k-grid-Edit").hide();
                            //        $(this).find(".SCMViewRow-checkbox").hide();
                            //    }
                            //}
                            
                        });
                        $('#export').attr("disabled", false);
                      //  $('#sendmail').attr("disabled", false);

                   //     $('#updatebyfile').attr("disabled", false);
                        $('.k-grid-content').height("auto");
                        $('.k-grid-content').css("max-height", "300px");
                    }

                    //show order list detail panel
                    if (this.dataSource.view().length === 1) {
                        $('.k-grid-content').height("auto");
                        $('.k-grid-content').css("max-height", "150px");
                        var accNo = $("#SCMView").data("kendoGrid").dataSource.view()[0].ACCESS_NO;
                        var ordNo = $("#SCMView").data("kendoGrid").dataSource.view()[0].ORDER_NO_SFF;
                        $("#dbk_ACC_NO").val(accNo);
                        $("#dbk_ORD_NO").val(ordNo);


                        CallListDetail(accNo, ordNo);
                    }

                    //reset checklist
                    //$('#SCMViewheader-chb').removeAttr('checked');

                    var view = this.dataSource.view();
                    for (var i = 0; i < view.length; i++) {
                        if (checkedIds[view[i].id]) {
                            this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                                .addClass("k-state-selected")
                                .find(".SCMViewRow-checkbox")
                                .attr("checked", "checked");
                        }
                    }

                    //when header checkbox is checked
                    if ($("#SCMViewheader-chb").prop("checked")) {
                        $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                            if ($(item).prop("checked", false)) {
                                $(item).click();
                            }
                        });
                    }
                  
                        $('.SCMViewRow-checkbox').change(function () {
                     
                            checkboxcount();
                        });

                    $("#SCMViewheader-chb").change(function () {
                        idsToSend = [];
                        var AccessListModel = new AccessList();
                        AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
                        idsToSend.push(AccessListModel);
                    });
                }
                function checkboxcount() {
                    var count = 0; var countb = 0;
                   // console.log(item);
                    $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                       
                        if ($(item).is(':checked')) {

                            var status = item.value;
                            if (status === 'Waiting Sub Verify') {
                               // console.log('a');
                                countb++;
                               //  countb++;
                                 
                            }
                            else {
                              //  console.log('b');
                                //count++;
                                count++;
                            }
                          
                            //count++;

                        }
                      
                        console.log('count' + count);
                        
                    });
                   // console.log(count)
                    //if (count > 0 && countb === 0) {
                    //    $('#sendmail').attr("disabled", false);
                    //    $('#btscmupdateall').attr('disabled', true);
                    //} else if (count === 0 && countb > 0) {
                    //    $('#sendmail').attr("disabled", true);
                    //    $('#btscmupdateall').attr('disabled', false);
                    //}
                    //else {
                    //    $('#sendmail').attr("disabled", true);
                    //    $('#btscmupdateall').attr('disabled', true);
                    //}
                   if (count > 0) {
                        $('#sendmail').attr("disabled", false);
                       // $('#btscmupdateall').attr('disabled', true);
                    } else  {
                        $('#sendmail').attr("disabled", true);
                      //  $('#btscmupdateall').attr('disabled', false);
                    }
                }


                function onSCMViewDataBoundMA() {
                    $("#tempNote").val("0");
                    Loading(0);
                    var grid = this;
                    //fix kendo grid width
                    if (this.dataSource.view().length === 0) {
                        $('#export').attr("disabled", true);
                        //$('#sendmail').attr("disabled", true);

                        $("#updateall").prop("disabled", true);
                        //  $('#updatebyfile').attr("disabled", true);


                        var colspan = this.thead.find("th").length;



                        var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

                        this.tbody.html(emptyRow);

                        //   $("#noData").data("kendoWindow").open();
                        //    $("#noData").data("kendoWindow").center();
                        //workarounds for IE lt 9
                        this.table.width(800);
                        //$(".k-grid-content").height(2 * kendo.support.scrollbar());
                        $(".k-grid-content").height(50);
                    }
                    else {

                        grid.tbody.find("tr[role='row']").each(function () {
                            var model = grid.dataItem(this);
                            var status = '';
                            if (model.WORK_STATUS != null) {
                                status = model.WORK_STATUS
                            } else if (model.ORDER_STATUS != null) {
                                status = model.ORDER_STATUS
                            }

                            var approveflag = model.APPROVE_FLAG
                            //  console.log(status);
                            if ($("#_usertype").val() == "SCM") {
                                $(this).find(".SCMViewRow-checkbox").attr('value', status);
                                if ((status === "Waiting Paid" || status === "Dispute" || status === "Hold") || (status === "Waiting Sub Verify") && (approveflag === "Approved")) {
                                    //  if (status === "Waiting Sub Verify" || status === "Waiting Paid" || status === "Dispute" || status === "Confirm Paid") {
                                    $(this).find(".k-grid-Edit").show();
                                    $(this).find(".SCMViewRow-checkbox").hide();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', true);
                                }
                                //else if (((status === "Waiting Sub Verify") || status === "Hold") && (approveflag === "Approved")) {
                                //    $(this).find(".k-grid-Edit").show();
                                //    $(this).find(".SCMViewRow-checkbox").show();
                                //    $(this).find(".SCMViewRow-checkbox").attr('disabled', false);
                                //}
                                else if ((status === "Completed" || status === "Re Check" || status === "No Data") && (approveflag === "Approved"))//&& (approveflag === "Approved"))
                                {
                                    $(this).find(".k-grid-Edit").hide();
                                    $(this).find(".SCMViewRow-checkbox").show();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', false);
                                }
                                else {
                                    $(this).find(".k-grid-Edit").hide();
                                    $(this).find(".SCMViewRow-checkbox").hide();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', true);

                                }
                            }
                            //if ($("#_usertype").val() == "ACCT")
                            //{
                            //   //  $("#SCMViewheader-chb").prop("disabled", true);
                            //    if ((status === 'Confirm Paid' || status === 'Hold') && (approveflag === "Approved")) {
                            //        $(this).find(".k-grid-Edit").show();
                            //        $(this).find(".SCMViewRow-checkbox").hide();
                            //    } else {
                            //        $(this).find(".k-grid-Edit").hide();
                            //        $(this).find(".SCMViewRow-checkbox").hide();
                            //    }
                            //}

                        });
                        $('#export').attr("disabled", false);
                        //  $('#sendmail').attr("disabled", false);

                        //     $('#updatebyfile').attr("disabled", false);
                        $('.k-grid-content').height("auto");
                        $('.k-grid-content').css("max-height", "300px");
                    }

                    //show order list detail panel
                    if (this.dataSource.view().length === 1) {
                        $('.k-grid-content').height("auto");
                        $('.k-grid-content').css("max-height", "150px");
                        var accNo = $("#SCMView2").data("kendoGrid").dataSource.view()[0].ACCESS_NUMBER;
                        var ordNo = $("#SCMView2").data("kendoGrid").dataSource.view()[0].ORDER_NO_SFF;
                        $("#dbk_ACC_NO").val(accNo);
                        $("#dbk_ORD_NO").val(ordNo);


                        CallListDetail(accNo, ordNo);
                    }

                    //reset checklist
                    //$('#SCMViewheader-chb').removeAttr('checked');

                    var view = this.dataSource.view();
                    for (var i = 0; i < view.length; i++) {
                        if (checkedIds[view[i].id]) {
                            this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                                .addClass("k-state-selected")
                                .find(".SCMViewRow-checkbox")
                                .attr("checked", "checked");
                        }
                    }

                    //when header checkbox is checked
                    if ($("#SCMViewheader-chb").prop("checked")) {
                        $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                            if ($(item).prop("checked", false)) {
                                $(item).click();
                            }
                        });
                    }

                    $('.SCMViewRow-checkbox').change(function () {

                        checkboxcount();
                    });

                    $("#SCMViewheader-chb").change(function () {
                        idsToSend = [];
                        var AccessListModel = new AccessList();
                        AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
                        idsToSend.push(AccessListModel);
                    });
                }
            </script>