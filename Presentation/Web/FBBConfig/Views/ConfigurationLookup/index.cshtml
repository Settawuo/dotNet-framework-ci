@using WBBEntity.PanelModels.FBBWebConfigModels;
@model WBBEntity.PanelModels.FBBWebConfigModels.ConfigurationLookupView
@using WBBEntity.PanelModels;
@{
    ViewBag.Title = "";
    string L_PAGE_NAME = "Configuration Look up";

    string L_CRITERIA_PANEL = " Configuration Look up";
    string L_TableName = "TableName";
    string L_LookupName = "Look up Name";
    string L_RuleID = "RuleID";
    string L_EFFECTIVE_DATE = "Effective Date";
    string L_EXPIRE_DATE = "Expire Date";
    string L_RESULT_PANEL = "Search Result";
    string L_SUBCONTRACT_TYPE = "Subcontract Type";
    string L_ORDER_TYPE = "ORDER TYPE";
    string L_TECHNOLOGY = "TECHNOLOGY";

    string E_RULE_ID = "RULE ID";
    string E_RULE_NAME = "RULE NAME";
    string E_ORDER_TYPE = "ORDER TYPE";

    string E_VENDOR_CODE = "VENDOR CODE";
    string E_TECHNOLOGY = "TECHNOLOGY";
    string E_TOTAL_PRICE = "TOTAL PRICE";
    string E_EFFECTIVE_DATE = "EFFECTIVE DATE";
    string E_EXPIRE_DATE = "EXPIRE DATE";
    string E_CREATE_DATE = "CREATE DATE";
    string E_CREATE_BY = "CREATE BY";
    string E_UPDATE_DATE = "UPDATE DATE";
    string E_UPDATE_BY = "UPDATE BY";

    //revamp
    //edit
    //lookup
    string H_LOOKUP = "";
    string SH_LOOKUP = "";
    string L_LOOKUP_NAME = "";
    string L_SEARCH_RESULT = "";
    string C_ACTION = "";
    string C_LOOKUP_NAME = "";
    string C_RULE_NAME = "";
    string C_ONTOP = "";
    string C_ONTOP_FLAG = "";
    string C_EFF_DATE_START = "";
    string M_CONFIRM_DELETE_SEARCH = "";

    string U_LOOKUP = "Look up";
    string U_LOOKUP_NAME = "Look up Name";
    //parameter
    string U_PARAMETER = "Parameter";
    //order
    string H_ORDER = "Order";

    string P_ORDER_TYPE = "";
    string P_ORDER_TECHNOLOGY = "";
    string P_ORDER_SYMPTOM_NAME = "";
    string P_ORDER_COMPANY = "";
    string P_ORDER_SAMEDAY = "";
    string P_ORDER_EVENT_CODE = "";
    string P_ORDER_ROOM_FLAG = "";

    string p_ORDER_TYPE = "";
    string p_ORDER_TECHNOLOGY = "";
    string p_ORDER_SYMPTOM_NAME = "";
    string p_ORDER_COMPANY = "";
    string p_ORDER_SAMEDAY = "";
    string p_ORDER_EVENT_CODE = "";
    string p_ORDER_ROOM_FLAG = "";

    //customer
    string H_CUSTOMER = "Customer";
    string P_CUS_PROVINCE = "";
    string P_CUS_DISTRICT = "";
    string P_CUS_SUB_DISTRICT = "";
    string P_CUS_ADDRESS_ID = "";
    string P_CUS_FTTR_FLAG = "";

    string p_CUS_PROVINCE = "";
    string p_CUS_DISTRICT = "";
    string p_CUS_SUB_DISTRICT = "";
    string p_CUS_ADDRESS_ID = "";
    string p_CUS_FTTR_FLAG = "";

    //suncontract
    string H_SUBCONTRACT = "Subcontract";
    string P_SUBCONTRACT_TYPE = "";
    string P_SUBCONTRACT_SUB_TYPE = "";
    string P_SUBCONTRACT_REGION = "";
    string P_SUBCONTRACT_ORG = "";
    string P_SUBCONTRACT_CODE = "";
    string P_SUBCONTRACT_LOCATION_NAME = "";

    string p_SUBCONTRACT_TYPE = "";
    string p_SUBCONTRACT_SUB_TYPE = "";
    string p_SUBCONTRACT_REGION = "";
    string p_SUBCONTRACT_ORG = "";
    string p_SUBCONTRACT_CODE = "";
    string p_SUBCONTRACT_LOCATION_NAME = "";

    //LMR
    string H_LMR = "LMR";
    string P_LMR_REUSE_FLAG = "";
    string P_LMR_DISTANCE_FROM = "";
    string P_LMR_DISTANCE_TO = "";
    string P_LMR_SUBCONTRACT_LOCATION_CODE = "";
    string P_LMR_INDOOR_PRICE = "";
    string P_LMR_OUTDOOR_PRICE = "";
    string P_LMR_EXCESS_PRICE = "";
    string P_LMR_MAX_DISTANCE = "";

    string p_LMR_REUSE_FLAG = "";
    string p_LMR_DISTANCE_FROM = "";
    string p_LMR_DISTANCE_TO = "";
    string p_LMR_SUBCONTRACT_LOCATION_CODE = "";
    string p_LMR_INDOOR_PRICE = "";
    string p_LMR_OUTDOOR_PRICE = "";
    string p_LMR_EXCESS_PRICE = "";
    string p_LMR_MAX_DISTANCE = "";

    //configuration
    string H_CONFIG = "Configuration";
    string P_CONFIG_INSTALL_PRICE = "";
    string P_CONFIG_EFFECTIVE_DATE_START = "";
    string P_CONFIG_EFFECTIVE_DATE_END = "";

    string p_CONFIG_INSTALL_PRICE = "";
    string p_CONFIG_EFFECTIVE_DATE_START = "";
    string p_CONFIG_EFFECTIVE_DATE_END = "";

    //insert
    //lookup
    string E_LOOKUP = "Look up";
    string E_LOOKUP_NAME = "Look up Name";
    //parameter
    string E_PARAMETER = "Parameter";
    //upsert
    string SH_ONTOP = "";
    string L_DISABLE = "";
    string L_ONTOP_LOOKUP = "";
    string L_ONTOP_FLAG = "";
    string H_CONFIG_LOOKUP = "";
    string _SH_LOOKUP = "";
    string L_LOOLUP_NAME = "";
    string SH_PARAMETER = "";
    string SH_PRICELIST = "";
    //message
    string M_SELECTED_SYMPNAME = "";
    string M_INVALID_FORMAT = "";
    string M_CHECKED_SUBDIST = "";
    string M_CHECKED_DIST = "";
    string M_CHECKED_SYMPNAME = "";
    string M_UNCHECK_DIST = "";
    string M_UNCHECK_PROVINCE = "";
    string M_UNCHECK_SYMPGROUP = "";
    string M_INVALID_DATE_START = "";
    string M_INVALID_DATE_START_LOWEST = "";
    string M_INVALID_PATTERN = "";
    string M_ACTIVE_ROW = "";
    string M_OVERLAP_DATE = "";
    string M_REQUIRE_FIELD = "";
    string M_CONFIRM_CANCEL_EDIT = "";
    string M_CONFIRM_CANCEL = "";
    string M_EFFECTIVE_DATE_END = "";
    string M_CHECK_ROW = "";
    string M_CHECKED_PROVDIST = "";
    string M_CHECKED_PARAMETER = "";
    string M_VALIDATE_EFFECTIVE = "";
    string M_VALIDATE_BLANK = "";
    string M_VALIDATE_EFFECTIVE_DEFAULT = "";
    string M_CONFIRM_DELETE_UPSERT = "";

    string E_INTERNET_PRICE = "INTERNET PRICE ";
    string E_VOIP_PRICE = "VOIP PRICE";
    string E_PLAYBOX_PRICE = "PLAYBOX PRICE";
    string E_MECH_PRICE = "MESH PRICE";
    string E_ADDRESS_ID = "ADDRESS ID";
    string E_EVENT_TYPE = "EVENT TYPE";

    string E_EVENT_CODE = "EVENT CODE";
    string E_ROOM_FLAG = "ROOM FLAG";
    string E_REUSE_FLAG = "REUSE FLAG";
    string E_DISTANCE_FROM = "DISTANCE FROM";
    string E_DISTANCE_TO = "DISTANCE TO";
    string E_INDOOR_PRICE = "INDOOR PRICE";
    string E_OUTDOOR_PRICE = "OUTDOOR PRICE";
    string E_SAME_DAY = "SAME DAY";
    string E_SUBCONTRACT_LOCATION = "LOCATION CODE";

    string L_POPUP_INSTALL_COST_ADD = "";
    string L_SERVICE = "";
    string L_CUSTOMER = "";
    string L_CUSTOMER_NAME = "";
    string L_CUSTOMER_NAME_EDIT = "";


    string L_INTERNET_RATE = "";
    string L_PLAY_BOX_RATE = "";
    string L_VOIP_RATE = "";
    string L_PLAY_BOX = "";
    string L_PHASE = "";
    string L_REMARK = "";
    string L_LINE_FR = "";
    string L_LINE_TO = "";
    string L_TARGET_FROM = "";
    string L_TARGET_TO = "";
    string L_LINE_FROM_TO = "";
    string L_OUT_DOOR_PRICE = "";
    string L_IN_DOOR_PRICE = "";

    // Button
    string B_SEARCH = "Search";
    string B_CLEAR = "Clear";
    //string B_NEW = "New Rate";
    string B_NEW = "New";
    string B_ADD_DEFAULT = "Add Default";
    string B_DELETE = "Delete";
    string B_EDIT = "Edit";
    string B_SAVE = "Save";
    string B_CANCEL = "Cancel";
    string B_EXPORT = "Export to Excel";
    string B_EXPORTALL = "Export All";

    string username = "";
    if (ViewBag.username != null)
    {
        username = ViewBag.username;
    }

    if (ViewBag.configscreenLookup != null)
    {
        var configscreenLookup = (List<LovModel>)ViewBag.configscreenLookup;
        H_LOOKUP = configscreenLookup.Any(f => f.LOV_NAME == "H_Config_Lookup") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "H_Config_Lookup").LOV_VAL1 : "";
        SH_LOOKUP = configscreenLookup.Any(f => f.LOV_NAME == "SH_Config_Lookup") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "SH_Config_Lookup").LOV_VAL1 : "";
        L_LOOKUP_NAME = configscreenLookup.Any(f => f.LOV_NAME == "L_Lookup_Name") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "L_Lookup_Name").LOV_VAL1 : "";
        L_SEARCH_RESULT = configscreenLookup.Any(f => f.LOV_NAME == "L_Search_Result") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "L_Search_Result").LOV_VAL1 : "";
        C_ACTION = configscreenLookup.Any(f => f.LOV_NAME == "C_Action") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "C_Action").LOV_VAL1 : "";
        C_LOOKUP_NAME = configscreenLookup.Any(f => f.LOV_NAME == "C_Lookup_Name") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "C_Lookup_Name").LOV_VAL1 : "";
        C_RULE_NAME = configscreenLookup.Any(f => f.LOV_NAME == "C_Rule_Name") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "C_Rule_Name").LOV_VAL1 : "";
        C_ONTOP = configscreenLookup.Any(f => f.LOV_NAME == "C_Ontop_Lookup") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "C_Ontop_Lookup").LOV_VAL1 : "";
        C_ONTOP_FLAG = configscreenLookup.Any(f => f.LOV_NAME == "C_Ontop_Flag") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "C_Ontop_Flag").LOV_VAL1 : "";
        C_EFF_DATE_START = configscreenLookup.Any(f => f.LOV_NAME == "C_Effective_Start") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "C_Effective_Start").LOV_VAL1 : "";
        M_CONFIRM_DELETE_SEARCH = configscreenLookup.Any(f => f.LOV_NAME == "M_Confirm_Delete") ? configscreenLookup.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Delete").LOV_VAL1 : "";
    }
    if (ViewBag.configscreenLookup_Upsert != null)
    {
        var configscreenLookup_upsert = (List<LovModel>)ViewBag.configscreenLookup_Upsert;
        SH_ONTOP = configscreenLookup_upsert.Any(f => f.LOV_NAME == "SH_Ontop") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "SH_Ontop").LOV_VAL1 : "";
        L_DISABLE = configscreenLookup_upsert.Any(f => f.LOV_NAME == "L_Disable") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "L_Disable").LOV_VAL1 : "";
        L_ONTOP_LOOKUP = configscreenLookup_upsert.Any(f => f.LOV_NAME == "L_Ontop_Lookup") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "L_Ontop_Lookup").LOV_VAL1 : "";
        L_ONTOP_FLAG = configscreenLookup_upsert.Any(f => f.LOV_NAME == "L_Ontop_Flag") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "L_Ontop_Flag").LOV_VAL1 : "";
        H_CONFIG_LOOKUP = configscreenLookup_upsert.Any(f => f.LOV_NAME == "H_Config_lookup") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "H_Config_lookup").LOV_VAL1 : "";
        _SH_LOOKUP = configscreenLookup_upsert.Any(f => f.LOV_NAME == "SH_Lookup") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "SH_Lookup").LOV_VAL1 : "";
        L_LOOLUP_NAME = configscreenLookup_upsert.Any(f => f.LOV_NAME == "L_Lookup_Name") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "L_Lookup_Name").LOV_VAL1 : "";
        SH_PARAMETER = configscreenLookup_upsert.Any(f => f.LOV_NAME == "SH_Parameter") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "SH_Parameter").LOV_VAL1 : "";
        SH_PRICELIST = configscreenLookup_upsert.Any(f => f.LOV_NAME == "SH_PriceList") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "SH_PriceList").LOV_VAL1 : "";

        //message
        M_SELECTED_SYMPNAME = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Selected_SympName") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Selected_SympName").LOV_VAL1 : "";
        M_INVALID_FORMAT = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Invalid_Format") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Format").LOV_VAL1 : "";
        M_CHECKED_SUBDIST = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Checked_SubDist") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Checked_SubDist").LOV_VAL1 : "";
        M_CHECKED_DIST = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Checked_Dist") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Checked_Dist").LOV_VAL1 : "";
        M_CHECKED_SYMPNAME = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Checked_SympName") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Checked_SympName").LOV_VAL1 : "";
        M_UNCHECK_DIST = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Uncheck_Dist") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Uncheck_Dist").LOV_VAL1 : "";
        M_UNCHECK_PROVINCE = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Uncheck_Province") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Uncheck_Province").LOV_VAL1 : "";
        M_UNCHECK_SYMPGROUP = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Uncheck_SympGroup") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Uncheck_SympGroup").LOV_VAL1 : "";
        M_INVALID_DATE_START = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Invalid_Date_Start") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Date_Start").LOV_VAL1 : "";
        M_INVALID_DATE_START_LOWEST = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Invalid_Date_Start_Lowest") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Date_Start_Lowest").LOV_VAL1 : "";
        M_INVALID_PATTERN = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Invalid_Pattern") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Pattern").LOV_VAL1 : "";
        M_ACTIVE_ROW = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Active_Row") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Active_Row").LOV_VAL1 : "";
        M_OVERLAP_DATE = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Overlap_Date") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Overlap_Date").LOV_VAL1 : "";
        M_REQUIRE_FIELD = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Require_Field") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Require_Field").LOV_VAL1 : "";
        M_CONFIRM_CANCEL_EDIT = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Confirm_Cancel_Edit") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Cancel_Edit").LOV_VAL1 : "";
        M_CONFIRM_CANCEL = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Confirm_Cancel") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Cancel").LOV_VAL1 : "";
        M_EFFECTIVE_DATE_END = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Effective_Date_End") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Effective_Date_End").LOV_VAL1 : "";
        M_CHECK_ROW = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Check_Row") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Check_Row").LOV_VAL1 : "";
        M_CHECKED_PROVDIST = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Checked_ProvDist") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Checked_ProvDist").LOV_VAL1 : "";
        M_CHECKED_PARAMETER = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Checked_Parameter") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Checked_Parameter").LOV_VAL1 : "";
        M_VALIDATE_EFFECTIVE = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Validate_Effective") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Validate_Effective").LOV_VAL1 : "";
        M_VALIDATE_BLANK = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Validate_Blank") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Validate_Blank").LOV_VAL1 : "";
        M_VALIDATE_EFFECTIVE_DEFAULT = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Validate_Effective_Default") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Validate_Effective_Default").LOV_VAL1 : "";
        M_CONFIRM_DELETE_UPSERT = configscreenLookup_upsert.Any(f => f.LOV_NAME == "M_Confirm_Delete") ? configscreenLookup_upsert.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Delete").LOV_VAL1 : "";
    }
}

<style>
    label.required:after {
        color: red;
        content: " *";
    }

    .k-grid .k-grid-header .k-header .k-link {
        height: auto;
    }

    .k-grid .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }

    .TextUpper {
        text-transform: uppercase !important;
    }

    .modal {
        text-align: center;
        padding: 0 !important;
    }

        .modal:before {
            content: '';
            display: inline-block;
            height: 100%;
            vertical-align: middle;
            margin-right: -4px;
        }

    .modal-dialog {
        display: inline-block;
        text-align: left;
        vertical-align: middle;
    }
</style>

<style>
    .loader {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-40%, -50%);
        animation: effect 1s linear infinite;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top-color: #fff;
    }

    @@keyframes effect {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }


    /* position to center */

    .loader {
        position: absolute;
        top: calc(50% - 2.5em);
        left: calc(50% - 2.5em);
    }


    /**
    * disable background
    */

    .loader-mask {
        position: fixed;
        z-index: 9998;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, .5);
        display: table;
        transition: opacity .3s ease;
    }

    .k-checkbox-label {
        font-weight: lighter;
    }

    .k-grid-content {
        overflow-x: scroll;
    }

    .k-window-content {
        overflow-x: auto; /* Enable horizontal scrolling */
        overflow-y: auto; /* Enable vertical scrolling (if necessary) */
    }

    #gridAddselect {
        width: 100%; /* Ensure grid takes full width of its container */
        overflow: auto; /* Enable horizontal scrolling */
    }

    .disabled-row {
        background-color: #f0f0f0;
        cursor: not-allowed;
    }

        .disabled-row input,
        .disabled-row .k-dropdown,
        .disabled-row .k-datepicker {
            pointer-events: none;
            background-color: #e0e0e0;
        }

            .disabled-row .k-dropdown .k-dropdown-wrap,
            .disabled-row .k-datepicker .k-datepicker-wrap {
                cursor: not-allowed;
            }

    .disabled-column {
        background-color: #e0e0e0;
        color: #a0a0a0;
        cursor: not-allowed;
    }

    .k-grid td input:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .hidden {
        display: none;
    }
</style>

<div class="page-header i-header-fit">
    <div class="row">
        <div class="col-sm-12 col-md-12">
            <h3 style="margin-top: 0">@H_LOOKUP</h3>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-success">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <span>@SH_LOOKUP</span>
                    <a data-toggle="collapse" class="pull-right" href="#SearchPanel1" onclick="onPanelToggle(this);" id="SearchPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow1"></i></a>
                </h3>
            </div>
            <div id="SearchPanel1" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-sm-12 col-md-4">
                            <label>@L_LOOKUP_NAME</label>
                            <div class="i-fg-data-entry">
                                @(Html.Kendo().DropDownList()
                                                                                                                                .Name("ddllTableList")
                                                                                                                                .OptionLabel("ALL")
                                                                                                                                .DataTextField("LOOKUP_NAME")
                                                                                                                                .DataValueField("LOOKUP_NAME")
                                                                                                                                .Filter("contains")
                                                                                                                                .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                 .DataSource(source =>
                                                                                                                                 {
                                                                                                                                     source.Read(read =>
                                                                                                                                     {
                                                                                                                                         read.Action("SelectListLookupName", "ConfigurationLookup");
                                                                                                                                     });
                                                                                                                                 })
                                                                                                                                 .SelectedIndex(0)


                                )
                            </div>
                            <div id="validate-ddllTableList" class="i-fg-data-entry-validation"></div>
                        </div>
                    </div>

                    <div class="row">
                        <br />
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-4"></div>
                        <div class="col-sm-12 col-md-4"></div>
                        <div class="col-sm-12 col-md-4 i-text-align-right">

                            <a class="btn btn-default" onclick="_Clear();"><i class="fa fa-ban fa-lg"></i>&nbsp;&nbsp;@B_CLEAR</a>
                            <a class="btn btn-info" onclick="_Search();"><i class="fa fa-search fa-lg"></i>&nbsp;&nbsp;@B_SEARCH</a>
                            @*<a class="btn btn-info" onclick="_ExportAll();"><i class="fa fa-file-excel-o"></i>&nbsp;&nbsp;Export All</a>*@

                        </div>
                    </div>
                    <div class="row">

                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-success">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <span>@L_SEARCH_RESULT</span>
                    <a data-toggle="collapse" class="pull-right" href="#ResultPanel1" onclick="onPanelToggle(this);" id="ResultPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultPanelHeaderArrow1"></i></a>
                </h3>
            </div>
            <div id="ResultPanel1" class="panel-collapse collapse in">
                <div class="panel-body">
                    <br />
                    <div class="pull-right">
                        <div>
                            <a onclick="AddnewData();" id="addnew" class="btn btn-default">
                                <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_NEW
                            </a>&nbsp;
                        </div>
                        <br />
                    </div>
                    <div class="row">
                        <div id="SearchTable1">
                            <div class="col-sm-12 col-md-12 ">
                                <div id="gridresult" class="row">
                                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.DataConfigLookupTable>()
                                                                                                                                                                                                .Name("gridCostTable1")
                                                                                                                                                                                                        .Columns(columns =>
                                                                                                                                                                                                        {
                                                                                                                                                                                                            columns.Command(command =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                command.Custom(@B_EDIT).Click("EditLookup").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");
                                                                                                                                                                                                                command.Custom(@B_DELETE).Click("modalConfirmDeleteShow").Text("<i class='fa fa-times-circle fa-lg'></i>");
                                                                                                                                                                                                                command.Custom(@B_EXPORT).Click("ExportDataToExcel").Text("<i class='fa fa-file-excel-o'></i>");
                                                                                                                                                                                                            }).Title(@C_ACTION).HtmlAttributes(new { style = "text-align:center;" }).Width(250);
                                                                                                                                                                                                            columns.Bound(p => p.LOOKUP_NAME).Title(@C_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:left;" });
                                                                                                                                                                                                            columns.Bound(p => p.RULE_NAME).Title(@C_RULE_NAME).HtmlAttributes(new { style = "text-align:left;", id = "_lookup_name" }).Encoded(false);
                                                                                                                                                                                                            columns.Bound(p => p.ONTOP_FLAG).Title(@C_ONTOP_FLAG).HtmlAttributes(new { style = "text-align:left;", id = "_lookup_flag" }).Width(180);
                                                                                                                                                                                                            columns.Bound(p => p.ONTOP_LOOKUP).Title(@C_ONTOP).HtmlAttributes(new { style = "text-align:left;", id = "_ontop_lookup" }).Encoded(false);
                                                                                                                                                                                                            columns.Bound(p => p.EFFECTIVE_DATE_START).Title(@C_EFF_DATE_START).HtmlAttributes(new { style = "text-align:left;", id = "_effective_date_start_search" });
                                                                                                                                                                                                            columns.Bound(p => p.FLAG_DELETE).Title("FLAG_DELETE").HtmlAttributes(new { style = "text-align:left;", id = "_flag_delete" }).Hidden(true);
                                                                                                                                                                                                        })

                                                                                                                                                                                            .Scrollable(scrollable => scrollable.Height("auto"))
                                                                                                                                                                                            .Sortable()
                                                                                                                                                                                            .Resizable(resize => resize.Columns(true))
                                                                                                                                                                                            .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 20, 50, 100 }))
                                                                                                                                                                                            .AutoBind(false)
                                                                                                                                                                                            .DataSource(dataSource => dataSource
                                                                                                                                                                                            .Ajax()
                                                                                                                                                                                            .PageSize(20)
                                                                                                                                                                                            .Read(read => read.Action("getDataConfigLookupTable", "ConfigurationLookup").Data("bindingValue"))
                                                                                                                                                                                            )
                                                                                                                                                                                            .Events(e => e.DataBound("onGridDataBound"))
                                    )
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="_tableselect" />
<input type="hidden" id="_ruleselect" />
<input type="hidden" id="_saveType" />
<input type="hidden" id="_efdate" />
<input type="hidden" id="_exdate" />
<input type="hidden" id="_lookupname" />
<input type="hidden" id="_rulename" />
@(Html.Kendo().Window()
                                                                                                                    .Name("ConfigCostInsPopup")
                                                                                                                    //.Title(@NAME_TITLE)
                                                                                                                    .Width(1200)
                                                                                                                    .Draggable()
                                                                                                                    .Visible(false)
                                                                                                                    .Modal(true)
                                                                                                                    .Events(e => e.Close("_clearPopupData"))
                                                                                                                    .Content(
                                                                                                                    @<text>

                                                                                                                        <div class="i-no-over" id="AddPopupPanel">
                                                                                                                            <div class="panel-body">
                                                                                                                                <br />
                                                                                                                                <div>
                                                                                                                                    <div class="panel panel-success">
                                                                                                                                        <div class="panel-heading">
                                                                                                                                            <h3 class="panel-title">
                                                                                                                                                <span>@SH_LOOKUP</span>
                                                                                                                                                <a data-toggle="collapse" class="pull-right" href="#E_LOOLUP" onclick="onPanelToggle(this);" id="ResultLookuplHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultLookupHeaderArrow1"></i></a>
                                                                                                                                            </h3>
                                                                                                                                        </div>
                                                                                                                                        <div id="E_LOOLUP" class="panel-collapse collapse in">
                                                                                                                                            <div class="panel-body">
                                                                                                                                                <div class="row">
                                                                                                                                                    <div id="e_LOOKUP_NAME" class="col-sm-3">
                                                                                                                                                        <label>
                                                                                                                                                            @L_LOOKUP_NAME&nbsp;
                                                                                                                                                            <a style="color:red;font-size:18px">*</a>
                                                                                                                                                        </label><br />
                                                                                                                                                        <input type="text" id="_LOOKUP_NAME" class="k-textbox form-control" onKeyPress="ValueKeyPress()" maxlength="50" />
                                                                                                                                                        <div id="validate-_LOOKUP_NAME" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="panel panel-success">
                                                                                                                                    <div class="panel-heading">
                                                                                                                                        <h3 class="panel-title">
                                                                                                                                            <span>@SH_PARAMETER</span>
                                                                                                                                            <a data-toggle="collapse" class="pull-right" href="#E_PARAMETER" onclick="onPanelToggle(this);" id="ResultParamlHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultParamHeaderArrow1"></i></a>
                                                                                                                                        </h3>
                                                                                                                                    </div>
                                                                                                                                    <div id="E_PARAMETER" class="panel-collapse collapse in">
                                                                                                                                        <div class="panel-body">
                                                                                                                                            <div>
                                                                                                                                                @{
                                                                                                                                                                var configscreenOrder = (List<LovValueModel>)ViewBag.configscreenAddLookup;
                                                                                                                                                                var headerList = configscreenOrder.Select(p => p.LovValue2).Distinct().ToList();
                                                                                                                                                                for (int i = 0; i < headerList.Count(); i++)
                                                                                                                                                                {
                                                                                                                                                        <div>
                                                                                                                                                            <br />
                                                                                                                                                            @{
                                                                                                                                                                            if (@headerList[i] == "Configuration")
                                                                                                                                                                            {
                                                                                                                                                                    <div class="hidden">
                                                                                                                                                                        <a style="color:black;font-weight:bold;">@headerList[i]</a>
                                                                                                                                                                    </div>
                                                                                                                                                                            }
                                                                                                                                                                            else
                                                                                                                                                                            {
                                                                                                                                                                    <div>
                                                                                                                                                                        <a style="color:black;font-weight:bold;">@headerList[i]</a>
                                                                                                                                                                    </div>
                                                                                                                                                                            }
                                                                                                                                                            }

                                                                                                                                                            <br />
                                                                                                                                                            <div class="row">
                                                                                                                                                                @{
                                                                                                                                                                                var detailList = configscreenOrder.Where(p => p.LovValue2 == @headerList[i]).ToList();
                                                                                                                                                                                if (@headerList[i] == "Configuration")
                                                                                                                                                                                {
                                                                                                                                                                                    foreach (var value in detailList)
                                                                                                                                                                                    {
                                                                                                                                                                            <div class="col-sm-2 hidden">
                                                                                                                                                                                @*id="@value.LovValue1"*@
                                                                                                                                                                                <input type="checkbox" id="@value.LovValue1" name="@value.Text" onchange="passValueColumn(this)" value="@value.Text" checked disabled>
                                                                                                                                                                                <label for="@value.LovValue1" style="font-weight:lighter;">@value.Text</label><br>
                                                                                                                                                                                <br />
                                                                                                                                                                            </div>
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                else
                                                                                                                                                                                {
                                                                                                                                                                                    foreach (var value in detailList)
                                                                                                                                                                                    {
                                                                                                                                                                            <div class="col-sm-2">
                                                                                                                                                                                @*id="@value.LovValue1"*@
                                                                                                                                                                                <input type="checkbox" id="@value.LovValue1" name="@value.Text" onchange="passValueColumn(this)" value="@value.Text">
                                                                                                                                                                                <label for="@value.LovValue1" style="font-weight:lighter;">@value.Text</label><br>
                                                                                                                                                                                <br />
                                                                                                                                                                            </div>
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                }
                                                                                                                                                            </div>
                                                                                                                                                        </div>
                                                                                                                                                        <br />
                                                                                                                                                                }
                                                                                                                                                }
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="panel panel-success">
                                                                                                                                    <div class="panel-heading">
                                                                                                                                        <h3 class="panel-title">
                                                                                                                                            <span>@SH_ONTOP</span>
                                                                                                                                            <a data-toggle="collapse" class="pull-right" href="#E_ONTOP" onclick="onPanelToggle(this);" id="ResultOntopHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultOntopHeaderArrow1"></i></a>
                                                                                                                                        </h3>
                                                                                                                                    </div>
                                                                                                                                    <div id="E_ONTOP" class="panel-collapse collapse in">
                                                                                                                                        <div class="panel-body">
                                                                                                                                            <div class="row">
                                                                                                                                                <div class="col-sm-1">
                                                                                                                                                    <label style="font-weight:lighter;">@L_ONTOP_FLAG</label>
                                                                                                                                                </div>
                                                                                                                                                <div id="e_ONTOP_FLAG" class="col-sm-1">
                                                                                                                                                    <input type="checkbox" id="E_ONTOP_FLAG" name="_E_ONTOP_FLAG" onchange="changeOntopflag(this)" @*onchange="passValueColumn(this)"*@ @*value="@value.Text"*@>
                                                                                                                                                    &nbsp;
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                            <br />
                                                                                                                                            <div class="row">
                                                                                                                                                <div class="col-sm-1">
                                                                                                                                                    <label style="font-weight:lighter;">@L_ONTOP_LOOKUP</label>
                                                                                                                                                </div>
                                                                                                                                                <div id="e_ONTOP" class="col-sm-3">
                                                                                                                                                    @(Html.Kendo().MultiSelect()
                                                                                                                                                                                                        .Name("ddlONTOP")
                                                                                                                                                                                                        .Placeholder("SELECT ALL")
                                                                                                                                                                                                        //.HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                                                                                        .DataTextField("LOOKUP_NAME")
                                                                                                                                                                                                        .DataValueField("LOOKUP_NAME")
                                                                                                                                                                                                        .DataSource(source =>
                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                source.Read(read =>
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                            read.Action("SelectOntop", "ConfigurationLookup");
                                                                                                                                                                                                                                                                        });
                                                                                                                                                                                                                                            })
                                                                                                                                                    )
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="panel panel-success">
                                                                                                                                    <div class="panel-heading">
                                                                                                                                        <h3 class="panel-title">
                                                                                                                                            <span>@SH_PRICELIST</span>  @*Add Result*@
                                                                                                                                            <a data-toggle="collapse" class="pull-right" href="#E_ADDRESULT" onclick="onPanelToggle(this);" id="ResultAddlHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultAddHeaderArrow1"></i></a>
                                                                                                                                        </h3>
                                                                                                                                    </div>
                                                                                                                                    <div id="E_ADDRESULT" class="panel-collapse collapse in">
                                                                                                                                        <div class="panel-body">
                                                                                                                                            <br />
                                                                                                                                            <div class="pull-right">
                                                                                                                                                <a onclick="AddnewRow();" id="add_select" class="btn btn-default">
                                                                                                                                                    <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_NEW
                                                                                                                                                </a>&nbsp;
                                                                                                                                            </div>
                                                                                                                                            <br />
                                                                                                                                            <br />
                                                                                                                                            <br />
                                                                                                                                            <div id="gridAddselect"></div>
                                                                                                                                            <br />
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-3 col-md-3"></div>
                                                                                                                                    <div class="col-sm-5 col-md-5">
                                                                                                                                        <div style="text-align:center">
                                                                                                                                            <a onclick="cancelPopup()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                            <a onclick="ConfirmAddLookupDetail()" id="btnpop_save" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i>&nbsp;@B_SAVE</a>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </div>

                                                                                                                        </div>
                                                                                                                    </text>))
@(Html.Kendo().Window()
                                                                                                                    .Name("ConfigCostEditPopup")
                                                                                                                    .Title("Configuration Look up Name")
                                                                                                                    .Width(1200)
                                                                                                                    .Draggable()
                                                                                                                    .Visible(false)
                                                                                                                    .Modal(true)
                                                                                                                    .Events(e => e.Close("_clearPopupData"))
                                                                                                                    .Content(
                                                                                                                    @<text>

                                                                                                                        <div class="i-no-over" id="AddPopupPanelEdit">
                                                                                                                            <div class="panel-body">
                                                                                                                                <br />
                                                                                                                                <div>
                                                                                                                                    <div class="panel panel-success">
                                                                                                                                        <div class="panel-heading">
                                                                                                                                            <h3 class="panel-title">
                                                                                                                                                <span>@SH_LOOKUP</span>
                                                                                                                                                <a data-toggle="collapse" class="pull-right" href="#U_LOOLUP" onclick="onPanelToggle(this);" id="ResultLookupEditlHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultLookupEditHeaderArrow1"></i></a>
                                                                                                                                            </h3>
                                                                                                                                        </div>
                                                                                                                                        <div id="U_LOOLUP" class="panel-collapse collapse in">
                                                                                                                                            <div class="panel-body">
                                                                                                                                                <div class="row">
                                                                                                                                                    <div id="u_LOOKUP_NAME" class="col-sm-3">
                                                                                                                                                        <label>
                                                                                                                                                            @L_LOOKUP_NAME&nbsp;
                                                                                                                                                            <a style="color:red;font-size:18px">*</a>
                                                                                                                                                        </label><br />
                                                                                                                                                        <input type="text" id="_U_LOOKUP_NAME" disabled="disabled" class="k-textbox form-control" />
                                                                                                                                                        @*<div id="validate-_LOOKUP_NAME" class="i-fg-data-entry-validation"></div>*@
                                                                                                                                                    </div>
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="panel panel-success">
                                                                                                                                    <div class="panel-heading">
                                                                                                                                        <h3 class="panel-title">
                                                                                                                                            <span>@SH_PARAMETER</span>
                                                                                                                                            <a data-toggle="collapse" class="pull-right" href="#E_PARAMETER" onclick="onPanelToggle(this);" id="ResultParamlHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultParamHeaderArrow1"></i></a>
                                                                                                                                        </h3>
                                                                                                                                    </div>
                                                                                                                                    <div id="E_PARAMETER" class="panel-collapse collapse in">
                                                                                                                                        <div class="panel-body">
                                                                                                                                            <div>
                                                                                                                                                @{
                                                                                                                                                                var configscreenOrderEdit = (List<LovValueModel>)ViewBag.configscreenAddLookup;
                                                                                                                                                                var headerListEdit = configscreenOrderEdit.Select(p => p.LovValue2).Distinct().ToList();
                                                                                                                                                                for (int i = 0; i < headerListEdit.Count(); i++)
                                                                                                                                                                {
                                                                                                                                                        <div>
                                                                                                                                                            <br />
                                                                                                                                                            @{
                                                                                                                                                                            if (@headerListEdit[i] == "Configuration")
                                                                                                                                                                            {
                                                                                                                                                                    <div class="hidden">
                                                                                                                                                                        <a style="color:black;font-weight:bold;">@headerListEdit[i]</a>
                                                                                                                                                                    </div>
                                                                                                                                                                            }
                                                                                                                                                                            else
                                                                                                                                                                            {
                                                                                                                                                                    <div>
                                                                                                                                                                        <a style="color:black;font-weight:bold;">@headerListEdit[i]</a>
                                                                                                                                                                    </div>
                                                                                                                                                                            }
                                                                                                                                                            }
                                                                                                                                                            <br />
                                                                                                                                                            <div class="row">
                                                                                                                                                                @{
                                                                                                                                                                                var detailListEdit = configscreenOrderEdit.Where(p => p.LovValue2 == @headerListEdit[i]).ToList();
                                                                                                                                                                                if (@headerListEdit[i] == "Configuration")
                                                                                                                                                                                {
                                                                                                                                                                                    foreach (var value in detailListEdit)
                                                                                                                                                                                    {
                                                                                                                                                                            <div class="col-sm-2 hidden">
                                                                                                                                                                                @*id="@value.LovValue1"*@
                                                                                                                                                                                <input type="checkbox" id="u_@value.LovValue1" name="u_@value.Text" onchange="passValueColumnEdit(this)" value="@value.Text"> @*checked disabled*@
                                                                                                                                                                                <label for="u_@value.LovValue1" style="font-weight:lighter;">@value.Text</label><br>
                                                                                                                                                                                <br />
                                                                                                                                                                            </div>
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                else
                                                                                                                                                                                {
                                                                                                                                                                                    foreach (var value in detailListEdit)
                                                                                                                                                                                    {
                                                                                                                                                                            <div class="col-sm-2">
                                                                                                                                                                                @*id="@value.LovValue1"*@
                                                                                                                                                                                <input type="checkbox" id="u_@value.LovValue1" name="u_@value.Text" onchange="passValueColumnEdit(this)" value="@value.Text">
                                                                                                                                                                                <label for="u_@value.LovValue1" style="font-weight:lighter;">@value.Text</label><br>
                                                                                                                                                                                <br />
                                                                                                                                                                            </div>
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                }
                                                                                                                                                            </div>
                                                                                                                                                        </div>
                                                                                                                                                        <br />
                                                                                                                                                                }
                                                                                                                                                }
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="panel panel-success">
                                                                                                                                    <div class="panel-heading">
                                                                                                                                        <h3 class="panel-title">
                                                                                                                                            <span>@SH_ONTOP</span>
                                                                                                                                            <a data-toggle="collapse" class="pull-right" href="#E_ONTOP" onclick="onPanelToggle(this);" id="ResultOntopHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultOntopHeaderArrow1"></i></a>
                                                                                                                                        </h3>
                                                                                                                                    </div>
                                                                                                                                    <div id="E_ONTOP" class="panel-collapse collapse in">
                                                                                                                                        <div class="panel-body">
                                                                                                                                            <div class="row">
                                                                                                                                                <div class="col-sm-1">
                                                                                                                                                    <label style="font-weight:lighter;">@L_ONTOP_FLAG</label>
                                                                                                                                                </div>
                                                                                                                                                <div id="u_ONTOP_FLAG" class="col-sm-1">
                                                                                                                                                    <input type="checkbox" id="U_ONTOP_FLAG" name="_U_ONTOP_FLAG" onchange="changeOntopflagEdit(this)" @*onchange="passValueColumn(this)"*@ @*value="@value.Text"*@>
                                                                                                                                                    &nbsp;
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                            <br />
                                                                                                                                            <div class="row">
                                                                                                                                                <div class="col-sm-1">
                                                                                                                                                    <label style="font-weight:lighter;">@L_ONTOP_LOOKUP</label>
                                                                                                                                                </div>
                                                                                                                                                <div id="u_ONTOP" class="col-sm-3">
                                                                                                                                                    @(Html.Kendo().MultiSelect()
                                                                                                                                                                    .Name("ddlONTOP_Edit")
                                                                                                                                                                    .Placeholder("SELECT ALL")
                                                                                                                                                                    .DataTextField("LOOKUP_NAME")
                                                                                                                                                                    .DataValueField("LOOKUP_NAME")
                                                                                                                                                                    .DataSource(source =>
                                                                                                                                                                    {
                                                                                                                                                                                                            source.Read(read =>
                                                                                                                                                                                                {
                                                                                                                                                                                                                                                    read.Action("SelectOntop", "ConfigurationLookup");
                                                                                                                                                                                                                                                });
                                                                                                                                                                                                        })
                                                                                                                                                    )
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="panel panel-success">
                                                                                                                                    <div class="panel-heading">
                                                                                                                                        <h3 class="panel-title">
                                                                                                                                            <span>@SH_PRICELIST</span>  @*Add Result*@
                                                                                                                                            <a data-toggle="collapse" class="pull-right" href="#U_ADDRESULT" onclick="onPanelToggle(this);" id="ResultEditlHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultEditHeaderArrow1"></i></a>
                                                                                                                                        </h3>
                                                                                                                                    </div>
                                                                                                                                    <div id="U_ADDRESULT" class="panel-collapse collapse in">
                                                                                                                                        <div class="panel-body">
                                                                                                                                            <br />
                                                                                                                                            <div class="pull-right" style="padding: 5px;">
                                                                                                                                                <a onclick="AddnewRow_Edit();" id="add_select" class="btn btn-default">
                                                                                                                                                    <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_NEW
                                                                                                                                                </a>&nbsp;
                                                                                                                                            </div>
                                                                                                                                            <div class="pull-right" style="padding: 5px;">
                                                                                                                                                <a onclick="AddDefault_Edit();" id="add_default" class="btn btn-default">
                                                                                                                                                    <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_ADD_DEFAULT
                                                                                                                                                </a>
                                                                                                                                            </div>
                                                                                                                                            <br />
                                                                                                                                            <br />
                                                                                                                                            <br />
                                                                                                                                            <div id="gridEditselect"></div>
                                                                                                                                            <br />
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-3 col-md-3"></div>
                                                                                                                                    <div class="col-sm-5 col-md-5">
                                                                                                                                        <div style="text-align:center">
                                                                                                                                            @*class="pull-left"*@
                                                                                                                                            <a onclick="cancelPopupEdit()" id="u_btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                            <a onclick="ConfirmEditLookupDetail()" id="u_btnpop_save" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i>&nbsp;@B_SAVE</a> @*ConfirmUpdate()*@
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </div>


                                                                                                                        </div>
                                                                                                                    </text>))
@(Html.Kendo().Window()
                                                                                                                       .Name("SUBCONTYPEPopup")
                                                                                                                      .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                      .Width(500)

                                                                                                                      .Draggable()
                                                                                                                      .Events(e => e.Close("_clearPopupData"))
                                                                                                                      .Visible(false)
                                                                                                                      .Modal(true)
                                                                                                                      .Content(@<text>
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-5">
                                                                                                                                <label id="_dname"></label>


                                                                                                                            </div>
                                                                                                                            <div class="col-sm-4">

                                                                                                                                <input type="text" id="_exsubcontype" class="k-textbox form-control" />
                                                                                                                                <div id="validate-_exsubcontype" class="i-fg-data-entry-validation"></div>
                                                                                                                            </div>

                                                                                                                        </div>
                                                                                                                        <div class="row">
                                                                                                                            <br />
                                                                                                                            @*<input id="_addtype" type="hidden" />*@
                                                                                                                        </div>
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-3">

                                                                                                                            </div>
                                                                                                                            <div class="col-sm-6">
                                                                                                                                <div class="pull-right">
                                                                                                                                    <a onclick="ClearSubConType()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                    <a onclick="AddConfigDataType()" id="btnpop_save" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i>&nbsp;@B_SAVE</a>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                    </text>)
)
@(Html.Kendo().Window()
                                                                                                                       .Name("TeamIDPopup")
                                                                                                                      .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                      .Width(1000)
                                                                                                                      .Draggable()
                                                                                                                      .Events(e => e.Close("_clearPopupData"))
                                                                                                                      .Visible(false)
                                                                                                                      .Modal(true)
                                                                                                                      .Content(@<text>

                                                                                                                        <div class="form-inline">
                                                                                                                            <label>ค้นหา</label>&ensp;
                                                                                                                            @*@(Html.Kendo().DropDownList()
                                                                                                                                     .Name("_filter_search")
                                                                                                                                           .Filter("contains")
                                                                                                                                           .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                           .DataTextField("subcontract_location")
                                                                                                                                           .DataValueField("subcontract_location")
                                                                                                                                           .DataSource(source =>
                                                                                                                                          {
                                                                                                                                              source.Read(read =>
                                                                                                                                              {
                                                                                                                                                  read.Action("GetSUBCONTRACTLOCATION", "ConfigurationCostInstallation");

                                                                                                                                              });

                                                                                                                                          }).SelectedIndex(0)
                                                                                                                                         .Events(e => e.Change("onChangeORDTYPE"))
                                                                                                                                )*@
                                                                                                                            @(Html.Kendo().DropDownList()
                                                                                                                                                                                                                                                                                                                                                                                     .Name("_filter_search")
                                                                                                                                                                                                                                                                                                                                                                                           .Filter("contains")
                                                                                                                                                                                                                                                                                                                                                                                           .HtmlAttributes(new { @class = "form-control i-form-control-extend", style = "width:300px" })
                                                                                                                                                                                                                                                                                                                                                                                           .BindTo(new List<SelectListItem>() {
                                                                                                                                                                                                                                                                                                                              new SelectListItem() {
                                                                                                                                                                                                                                                                                                                                  Text = "Region",
                                                                                                                                                                                                                                                                                                                                  Value = "Region"
                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                              new SelectListItem() {
                                                                                                                                                                                                                                                                                                                                  Text = "Location Code",
                                                                                                                                                                                                                                                                                                                                  Value = "Location Code"
                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                              new SelectListItem() {
                                                                                                                                                                                                                                                                                                                                  Text = "Company Name",
                                                                                                                                                                                                                                                                                                                                  Value = "Company Name"
                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                              new SelectListItem() {
                                                                                                                                                                                                                                                                                                                                  Text = "Team Name",
                                                                                                                                                                                                                                                                                                                                  Value = "Team Name"
                                                                                                                                                                                                                                                                                                                              },
                                                                                                                                                                                                                                                                                                                              new SelectListItem() {
                                                                                                                                                                                                                                                                                                                                  Text = "Team ID",
                                                                                                                                                                                                                                                                                                                                  Value = "Team ID"
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              //,
                                                                                                                                                                                                                                                                                                                              //new SelectListItem() {
                                                                                                                                                                                                                                                                                                                              //    Text = "Subcontract Type",
                                                                                                                                                                                                                                                                                                                              //    Value = "Subcontract Type"
                                                                                                                                                                                                                                                                                                                              //},
                                                                                                                                                                                                                                                                                                                              //new SelectListItem() {
                                                                                                                                                                                                                                                                                                                              //    Text = "Subcontract Sub Type",
                                                                                                                                                                                                                                                                                                                              //    Value = "Subcontract Sub Type"
                                                                                                                                                                                                                                                                                                                              //}
                                                                                                                                                                                                                                                                                                                                                                                           })
                                                                                                                                                                                                                                                                                                                                                                                           .SelectedIndex(0)
                                                                                                                                                                                                                                                                                                                                                                                         .Events(e => e.Change("onChangeORDTYPE"))
                                                                                                                            )
                                                                                                                            <input type="text" id="_searchPopup" class="k-textbox form-control" placeholder="Keyword.." style="width: 250px" />
                                                                                                                            <button class="btn btn-primary" onclick="onClickSearchInPopup();"> <i class="fa fa-search fa-sm"></i> Search</button>


                                                                                                                        </div>
                                                                                                                        <br />
                                                                                                                        <div id="gridteamid"></div>
                                                                                                                        <hr />
                                                                                                                        @*<div>
                                                                                                                                <div class="col-lg-offset-5">
                                                                                                                                    <a onclick="ClearTeamID()" id="btnpop_cancel2" class="btn btn-default"><i class="fa fa-power-off fa-sm"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                    <a onclick="AddConfigDataType()" id="btnpop_save2" class="btn btn-success"><i class="fa fa-check-circle fa-sm"></i>&nbsp;@B_SAVE</a>
                                                                                                                                </div>
                                                                                                                            </div>*@
                                                                                                                    </text>)
)
@(Html.Kendo().Window()
                                                                                                                    .Name("MyPopupLoading")
                                                                                                                    .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                    .Title(false)
                                                                                                                    .Modal(true)
                                                                                                                    .Visible(false)
                                                                                                                    .Content(
                                                                                                                    @<text>
                                                                                                                        <div style="margin: 0 80px;"><font size="4">Loading &nbsp;<i class="fa fa-refresh fa-spin"></i></font></div>
                                                                                                                    </text>)
)
@(Html.Kendo().Window()
                                                                                                                       .Name("DateEndPopup")
                                                                                                                      .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                      .Width(500)

                                                                                                                      .Draggable()
                                                                                                                      .Events(e => e.Close("_clearPopupData"))
                                                                                                                      .Visible(false)
                                                                                                                      .Modal(true)
                                                                                                                      .Content(@<text>
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-9">
                                                                                                                                <label id="_dInformation" style="font-weight:lighter"></label>  @*Effective date end cannot be before effective date start*@
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                        <br />
                                                                                                                        <br />
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-11">
                                                                                                                                <div class="pull-right">
                                                                                                                                    <a onclick="ClearDateEndPopup()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                    </text>)
)
@(Html.Kendo().Window()
                                                .Name("noData")
                                                .HtmlAttributes(new { @class = "i-gap-popup" })

                                                .Title("System Information")
                                                .Width(400)
                                                .Draggable()
                                                .Visible(false)
                                                .Modal(true)
                                               .Content(@<text>
                                                <div id="Nodata">
                                                    <div style="text-align:center" class="row">
                                                        <label style="font-size:15px;color:red">  No Data Found </label>
                                                    </div>
                                                </div>
                                            </text>)
)
@(Html.Kendo().Window()
                                                                                                                                   .Name("ValidatePopupDelete")
                                                                                                                                  .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                                  .Width(500)

                                                                                                                                  .Draggable()
                                                                                                                                  .Events(e => e.Close("_clearPopupData"))
                                                                                                                                  .Visible(false)
                                                                                                                                  .Modal(true)
                                                                                                                                  .Content(@<text>
                                                                                                                                    <div class="row">
                                                                                                                                        <div class="col-sm-9">
                                                                                                                                            <label id="_dInformationValidate" style="font-weight:lighter">@M_CONFIRM_DELETE_UPSERT</label>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                    <br />
                                                                                                                                    <br />
                                                                                                                                    <div class="row">
                                                                                                                                        <div class="col-sm-11">
                                                                                                                                            <div class="pull-right">
                                                                                                                                                <a onclick="ClearDeletePopup()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                                <a onclick="ConfirmDeletecPopup()" id="btnpop_confirm" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i> &nbsp;Confirm</a>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </text>)
)
<div class="modal fade cancel-sm-box" tabindex="-1" id="modal003_perorder" data-id="" role="dialog" aria-labelledby="modal003_perorder_label" style="z-index:14000">
    <div class="modal-dialog modal-sm">
        <div class="modal-content text-center">
            <div class="modal-header" style="padding-bottom: 25px;">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-times-circle"></i></button>
            </div>
            <p class="clearfix"></p>
            <h4 class="text-center">@M_CONFIRM_DELETE_SEARCH</h4> @*Confirm Delete Lookup Name*@
            <button type="button" id="btndel_cancel" class="btn btn-default" data-dismiss="modal"><i class="fa fa-power-off fa-lg"></i>&nbsp; Cancel &nbsp; </button>
            <button type="button" id="btndel_ok" class="btn btn-success" onclick="ConfirmDelete(); try { $.modal.close(); } catch (ex) { }"><i class="fa fa-check-circle fa-lg"></i>&nbsp; Confirm &nbsp;</button>
            <p class="clearfix"></p>
        </div>
    </div>
</div>
<script>
    var currentDeleteObject = null;
    var currentGridDelete = null;
    var originalValues = [];
    function AddnewRow() {
        var grid = $("#gridAddselect").data("kendoGrid");
        var dataSource = grid.dataSource;
        var total = dataSource.data().length;
        var id = 1;
        if (total == 0) { // firstRowData
            $.ajax({
                type: "POST",
                url: "/ConfigurationLookup/getDefaultFirstRow",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            //var xx = response;
                            //debugger;
                            var jsonObject = JSON.parse(response);
                            //debugger;
                            // set effective_date_start
                            jsonObject.effective_date_start = new Date(new Date().setDate(new Date().getDate() + 1));

                            var isEditing = grid.editable;
                            if (isEditing) {
                                // If currently editing, show an alert or handle as needed
                                //alert("Please save or cancel the current edit before adding a new row.");
                                var title = "System Information";
                                var message = "@M_ACTIVE_ROW";
                                popUpMeassage(title, message);
                                return;
                            }
                            //debugger;
                            dataSource.insert(total, jsonObject);
                            dataSource.page(dataSource.totalPages());
                            grid.editRow(grid.tbody.children().last());
                        }
                        else {
                            null;
                        }
                    }

                },
                failure: function () {
                    console.log(msg);
                }
            });
        }
        else {
            id = id += total;
            var dataRow = {
                id: id,
                base_price: null,
                effective_date_start: new Date(new Date().setDate(new Date().getDate() + 1)),
                effective_date_to: null
                //p_addess_id : "Default"
            };
            var isEditing = grid.editable;

            if (isEditing) {
                // If currently editing, show an alert or handle as needed
                //alert("Please save or cancel the current edit before adding a new row.");
                var title = "System Information";
                var message = "@M_ACTIVE_ROW";
                popUpMeassage(title, message);
                return;
            }
            dataSource.insert(total, dataRow);
            dataSource.page(dataSource.totalPages());
            grid.editRow(grid.tbody.children().last());

        }
    }

    //var originalValues = {};

    $("#gridAddselect").kendoGrid({
        dataSource: {
            data: [],
            schema: {
                model: {
                    id: "id",
                    fields: {
                        id: { type: "number"},
                        base_price: { type: "string", validation: { maxlength: 50 }},
                        effective_date_start: { type: "date"},
                        effective_date_to: { type: "date" }
                    }
                }
            },
            pageSize: 20 // จำนวนรายการต่อหน้า
        },
        columns: ColumnGeneration(),
        pageable: true,
        scrollable: true,
        resizable: true,
        editable: "inline",
        dataBound: function (e) {
            var grid = $("#gridAddselect").data("kendoGrid");
            var dataSource = grid.dataSource;
            var page = dataSource.page(); // Get the current page number
            var pageSize = dataSource.pageSize();

            // Calculate the index of the first row on the current page
            var startIndex = (page - 1) * pageSize;

            // Iterate through all rows
            grid.tbody.find("tr").each(function (index) {
                // Check if the row is the first row of the current page
                if (index === 0) {
                    var destroyButton = $(this).find(".k-grid-delete,.k-grid-detail");
                    if (page === 1) {
                        // Hide delete button for the first row on page 1
                        destroyButton.hide();
                    } else {
                        // Show delete button for other pages
                        destroyButton.show();
                    }
                } else {
                    // Ensure delete buttons are visible for rows other than the first on page 1
                    $(this).find(".k-grid-delete,.k-grid-detail").show();
                }
            });
        },
        edit: function (e) {
            // สร้างสำเนาและ push เข้าไปในลิสต์
            originalValues.push(JSON.parse(JSON.stringify(e.model)));
        },
        save: function (e) {
            var grid = $("#gridAddselect").data("kendoGrid");
            var model = e.model;
            // ตรวจสอบค่าว่ามีการกรอกหรือไม่
            if (!model.base_price) {
                //alert(" Base Price is required field.");
                var title = "System Information";
                var message = "@M_REQUIRE_FIELD";
                popUpMeassage(title, message);
                e.preventDefault(); // ป้องกันการบันทึกข้อมูล
            }
            else {
                var input = model.base_price;
                var checkDecimal = rexDecimal(input);
                if (!checkDecimal) {
                    //alert("Invalid format Base Price ");
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'base_price');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    var message = str_message.replace("{0}", display_val);
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
            }

            if (model.v_max_distance) {
                var input_max_distance = model.v_max_distance;
                var checkDecimal = rexDecimal(input_max_distance);
                if (!checkDecimal &&  model.v_max_distance !== "Default") {
                    //alert("Invalid format Max Distance ");
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'v_max_distance');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    var message = str_message.replace("{0}", display_val);
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
            }


            if (model.v_over_cost_pm) {
                var input_v_over_cost_pm = model.v_over_cost_pm;
                var checkDecimal = rexDecimal(input_v_over_cost_pm);
                if (!checkDecimal && model.v_over_cost_pm !== "Default") {
                    //alert("Invalid format Excess Price ");
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'v_over_cost_pm');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    var message = str_message.replace("{0}", display_val);
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
            }

            var start_date = model.effective_date_start;
            var end_date = model.effective_date_to;
            if (start_date > end_date) {
                model.set("effective_date_to", null);
                //debugger;
            }
        },
        cancel: function (e) {

            var grid = $("#gridAddselect").data("kendoGrid");

            grid.dataSource.add({ id: 9999 });

            var totalRecords = grid.dataSource.total();
            totalRecords = totalRecords - 1;
            var dataItem = grid.dataSource.at(totalRecords);
            grid.dataSource.remove(dataItem);

            if (originalValues !== null) {
                // ดึงข้อมูลจาก dataSource.view()
                var gridselect = $("#gridAddselect").data("kendoGrid");
                var data = gridselect.dataSource.view();
                var page = gridselect.dataSource.page(); // Get the current page number
                var pageSize = gridselect.dataSource.pageSize();
                // Calculate the index of the first row on the current page
                var startIndex = pageSize * (page - 1);

                var result = data.find(item => item.base_price === null);
                if (result != null) {
                    if (page == 1) {
                        var id = result.id;
                        var itemToRemove = gridselect.dataSource.view()[id - 1]; // ดึงข้อมูลของแถวที่ต้องการลบ
                        gridselect.dataSource.remove(itemToRemove); // ลบแถวจาก dataSource
                        // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                        gridselect.dataSource.sync();
                    }
                    else
                    {
                        var id = result.id;
                        var row_index = id - 1 - (startIndex);
                        var itemToRemove = gridselect.dataSource.view()[row_index]; // ดึงข้อมูลของแถวที่ต้องการลบ
                        gridselect.dataSource.remove(itemToRemove); // ลบแถวจาก dataSource
                        // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                        gridselect.dataSource.sync();
                        if (row_index == 0) {
                            gridselect.dataSource.page(page - 1);
                        }
                    }

                }
                else {
                    var rowId = e.model.id;
                    var row_index = rowId - 1 - (startIndex);
                    if (page == 1) {
                        var oldvalueList = originalValues.filter(item => item.id === rowId);
                        var lengeOldvalueList = oldvalueList.length;
                        var selectValue = oldvalueList[lengeOldvalueList - 1] //เลือก value ก่อนหน้า
                        var itemGrid = grid.dataSource.get(rowId); // ดึงข้อมูลที่มี id ตรงกัน
                        if (itemGrid) {
                            if (selectValue.base_price == null) {
                                var itemToRemove = gridselect.dataSource.view()[rowId - 1]; // ดึงข้อมูลของแถวที่ต้องการลบ
                                gridselect.dataSource.remove(itemToRemove); // ลบแถวจาก dataSource
                                // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                                gridselect.dataSource.sync();
                            }
                            else {
                                // อัปเดตค่าทั้งหมดในอ็อบเจกต์
                                Object.keys(selectValue).forEach(key => {
                                    itemGrid.set(key, selectValue[key]);
                                });
                            }

                        }
                    }
                    else
                    {
                        var row_index = rowId - 1 - (startIndex);
                        var oldvalueList = originalValues.filter(item => item.id === rowId);
                        var lengeOldvalueList = oldvalueList.length;
                        var selectValue = oldvalueList[lengeOldvalueList - 1] //เลือก value ก่อนหน้า
                        var itemGrid = grid.dataSource.get(rowId); // ดึงข้อมูลที่มี id ตรงกัน
                        if (itemGrid) {
                            if (selectValue.base_price == null) {
                                var itemToRemove = gridselect.dataSource.view()[row_index]; // ดึงข้อมูลของแถวที่ต้องการลบ
                                gridselect.dataSource.remove(itemToRemove); // ลบแถวจาก dataSource
                                // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                                gridselect.dataSource.sync();
                                if (row_index == 0) {
                                    gridselect.dataSource.page(page - 1);
                                }
                            }
                            else {
                                // อัปเดตค่าทั้งหมดในอ็อบเจกต์
                                Object.keys(selectValue).forEach(key => {
                                    itemGrid.set(key, selectValue[key]);
                                });
                            }

                        }

                    }

                }

            }
        }
    });

    function rexDecimal(input) {
        const regex = /^\d*\.?\d+$/;
        return regex.test(input);
    }
    function showDeleteConfirmationAddGrid(e) {

        var model = e.model;

        var grid = $("#gridAddselect").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr")); // รับข้อมูลของแถวที่ถูกเลือก
        currentDeleteObject = dataItem;
        currentGridDelete = grid;

        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }

        var title = "System Information";
        $("#ValidatePopupDelete").data("kendoWindow").center().open();
        $("#ValidatePopupDelete").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
        $("#ValidatePopupDelete").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#B7B7B7');

    }
    function ConfirmDeletecPopup() {

        currentGridDelete.dataSource.remove(currentDeleteObject);
        currentDeleteObject = null;
        currentGridDelete = null;

        $("#ValidatePopupDelete").data("kendoWindow").close();
    }
    function ClearDeletePopup() {
        currentDeleteObject = null;
        currentGridDelete = null;
        $("#ValidatePopupDelete").data("kendoWindow").close();
    }
    function ColumnGeneration() {
        column = [];
        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        column.push({
            command: [
                { name: "edit", text: "Edit" },
                { name: "detail", text: "Delete", click: showDeleteConfirmationAddGrid }

            ], title: "@C_ACTION", width: 180
        });
        column.push({ field: "id", hidden: true });
        var filterConfig = columnList.filter(p => p.LovValue2 === 'Configuration')
        for (var i = 0; i < filterConfig.length; i++) {
            console.log(filterConfig[i]);
            var datafilterConfig = filterConfig[i];
            if (datafilterConfig.Text == "Effective Date Start") {
                column.push({ field: "effective_date_start", title: datafilterConfig.Text, format: "{0: dd/MM/yyyy}", editor: dateFromEditor, width: 280});
            }
            else if (datafilterConfig.Text == "Effective Date End") {
                column.push({
                    field: "effective_date_to", title: datafilterConfig.Text, format: "{0: dd/MM/yyyy}", editor: dateEndEditor, width: 280,});
            }
            else if (datafilterConfig.Text == "Base Price")
            {
                column.push({ field: "base_price", title: datafilterConfig.Text, width: 280 });
            }
            else {
                column.push({ field: datafilterConfig.LovValue1, title: datafilterConfig.Text, width: 280});
            }
        }

        var filterNonConfig = columnList.filter(p => p.LovValue2 !== 'Configuration')
        for (var j = 0; j < filterNonConfig.length; j++) {
            console.log(filterNonConfig[j]);
            var datafilterNonConfig = filterNonConfig[j];
            if (datafilterNonConfig.DefaultValue == "DROPDOWNLIST") {
                column.push({ field: datafilterNonConfig.LovValue1, title: datafilterNonConfig.Text, editor: valueDropDown, hidden: true, width: 280});
            }
            else {
                column.push({ field: datafilterNonConfig.LovValue1, title: datafilterNonConfig.Text, editor: checkFirstRow, hidden: true, width: 280});
            }
        }
        debugger;
        return column;
    }
    function dateFromEditor(container, options) {
        var dataDate = new Date(new Date().setDate(new Date().getDate() + 1));
        var datePickerFrom = $("<input id='_effective_date_start'  name='" + options.field + "'/>")
            .appendTo(container)
            .on('keydown', function (e) {
                e.preventDefault();
            })
            .kendoDatePicker({
                format: "dd/MM/yyyy",
                min: dataDate,  // Example: minimum date
                //max: currentDate
                change: OnchangeDateFrom
            }).data("kendoDatePicker");
        // Set the value
        datePickerFrom.value(options.model[options.field]);
    }
    function dateEndEditor(container, options) {
        var datepickerStart = $("#_effective_date_start").data("kendoDatePicker").value();
        var minDate = new Date(datepickerStart);
        var datePickerEnd = $("<input id='_effective_date_to' name='" + options.field + "'/>")
            .appendTo(container)
            .on('keydown', function (e) {
                e.preventDefault();
            })
            .kendoDatePicker({
                format: "dd/MM/yyyy",
                min: minDate,  // Example: minimum date
                //max: currentDate
                change: OnchangeDateFrom
            }).data("kendoDatePicker");

        // Set the value
        datePickerEnd.value(options.model[options.field]);
    }
    function OnchangeDateFrom() {
        var pickDate = this.value();
        var datepickerStart = $("#_effective_date_start").data("kendoDatePicker").value();
        var minDate = new Date(datepickerStart);
        if (pickDate) {
            //var minDate = new Date(pickDate);
            debugger;
            $("#_effective_date_to").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }
    }
    function passValueColumn(element) {
        var isChecked = $(element).prop("checked");
        console.log(element);
        console.log(element.id);
        var grid = $("#gridAddselect").data("kendoGrid");
        var column = grid.columns.find(c => c.field === element.id);
        if (element.id == "p_Reject_reason") {
            if (isChecked) {
                var chk_symtom_group = document.getElementById("v_symptom_group");
                if (chk_symtom_group.checked) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
                else {
                    var title = "System Information";
                    //var message = "Please checked on Symptom Group";
                    var message = "@M_SELECTED_SYMPNAME";
                    popUpMeassage(title,message);
                    $(element).prop("checked", false);
                }
            }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
            }
        }
        else if (element.id == "v_symptom_group") {
            if (!isChecked) {
                var chk_symtom_name = document.getElementById("p_Reject_reason");
                if (chk_symtom_name.checked) {
                    var title = "System Information";
                    //var message = "Please unchecked on Symptom Name";
                    var message = "@M_UNCHECK_SYMPGROUP";
                    popUpMeassage(title, message);
                    $(element).prop("checked", true);
                }
                else {
                    if (column) {
                        if (column.hidden) {
                            grid.showColumn(element.id);
                        } else {
                            grid.hideColumn(element.id);
                        }
                    }
                }
            }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
            }
        }
        else if (element.id == "v_province") {
            if (!isChecked) {
                var chk_district = document.getElementById("v_district");
                var chk_sub_district = document.getElementById("v_subdistrict");
                if (chk_district.checked || chk_sub_district.checked) {
                    var title = "System Information";
                    //var message = "Please unchecked on District or Sub District too";
                    var message = "@M_UNCHECK_PROVINCE";
                    popUpMeassage(title, message);
                    $(element).prop("checked", true);
                }
                else {
                    if (column) {
                        if (column.hidden) {
                            grid.showColumn(element.id);
                        } else {
                            grid.hideColumn(element.id);
                        }
                    }
                }
            }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
            }
        }
        else if (element.id == "v_district") {
             if (isChecked) {
                 var chk_province = document.getElementById("v_province");
                 if (chk_province.checked) {
                     debugger;
                     if (column.hidden) {
                         grid.showColumn(element.id);
                     } else {
                         grid.hideColumn(element.id);
                     }
                 }
                 else {
                     var title = "System Information";
                     //var message = "Please checked on Province";
                     var message = "@M_CHECKED_DIST";
                     popUpMeassage(title, message);
                     $(element).prop("checked", false);
                 }
             }
             else {
                 var chk_sub_district = document.getElementById("v_subdistrict");
                 if (chk_sub_district.checked) {
                     var title = "System Information";
                     //var message = "Please unchecked on Sub District before";
                     var message = "@M_UNCHECK_DIST";
                     popUpMeassage(title, message);
                     $(element).prop("checked", true);
                 }
                 else {
                     if (column) {
                        if (column.hidden) {
                            grid.showColumn(element.id);
                        } else {
                            grid.hideColumn(element.id);
                        }
                     }
                 }
                 //if (column) {
                 //    if (column.hidden) {
                 //        grid.showColumn(element.id);
                 //    } else {
                 //        grid.hideColumn(element.id);
                 //    }
                 //}
             }
        }
        else if (element.id == "v_subdistrict") {
             if (isChecked) {
                 var chk_province = document.getElementById("v_province");
                 var chk_district = document.getElementById("v_district");
                debugger;
                 if (chk_province.checked && chk_district.checked) {
                    debugger;
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
                else {
                     var title = "System Information";
                     //var message = "Please checked on Province and District";
                     var message = "@M_CHECKED_PROVDIST";
                     popUpMeassage(title, message);
                    $(element).prop("checked", false);
                }
             }
             else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
             }
        }
        else {
             if (isChecked) {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id); //"@p_ORDER_TYPE"
                    }
                }
             }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element.id);
                    } else {
                        grid.hideColumn(element.id);
                    }
                }
             }
        }
    }
    function changeOntopflag(element) {
        var isChecked = $(element).prop("checked");
        var ddlOntop = $("#ddlONTOP").data('kendoMultiSelect');
        if (isChecked) {
            ddlOntop.value([]);
            ddlOntop.enable(false);
        }
        else {
            ddlOntop.enable(true);
        }
    }
    function changeOntopflagEdit(element) {
        var isChecked = $(element).prop("checked");
        var ddlOntop_edit = $("#ddlONTOP_Edit").data('kendoMultiSelect');
        debugger;
        if (isChecked) {
            ddlOntop_edit.value([]);
            ddlOntop_edit.enable(false);
        }
        else {
            ddlOntop_edit.enable(true);
        }
    }
    function valueDropDown(container, options) {
        console.log(options.field);
        var field = options.field;
        var grid = $("#gridAddselect").data("kendoGrid");
        var dataSource = grid.dataSource;

        var row = $(container).closest("tr"); // The row being edited
        var isFirstRow = row.index() === 0;
        var page = dataSource.page() === 1;
        var dataField = null;
        if (field == 'v_symptom_group') {
            var symptomId = '_v_symptom_group';
            if (isFirstRow && page) {
                $('<input  id="' + symptomId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }
            else {
                $('<input id="' + symptomId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        change: onChangeSymptomGroup,
                        valuePrimitive: true,
                        suggest: true
                    });
            }
        }
        else if (field == 'p_Reject_reason') {
            var symptomNameId = '_p_Reject_reason';
            if (isFirstRow && page) { //total > 1
                $('<input  id="' + symptomNameId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }
            else {
                $('<input id="' + symptomNameId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        valuePrimitive: true,
                        suggest: true
                    });
            }

        }
        else if (field == 'v_province') {
            var provinceId = '_v_province';
            if (isFirstRow && page) {
                $('<input  id="' + provinceId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }
            else {
                $('<input id="' + provinceId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        change: onChangeProvince,
                        valuePrimitive: true,
                        suggest: true
                    });
            }
        }
        else if (field == 'v_district') {
            var districtId = '_v_district';
            if (isFirstRow && page) {
                $('<input  id="' + districtId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }
            else {
                $('<input id="' + districtId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        change: onChangeDistrict,
                        valuePrimitive: true,
                        suggest: true
                    });
            }
        }
        else if (field == 'v_subdistrict') {
            var sub_districtId = '_v_subdistrict';
             if (isFirstRow && page) {
                 $('<input  id="' + sub_districtId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                     e.preventDefault();
                 });
             }
             else {
                 $('<input id="' + sub_districtId + '"  data-bind="value:' + options.field + '"/>')
                     .appendTo(container)
                     .kendoDropDownList({
                         autoBind: false,
                         dataTextField: "LovValue1",
                         dataValueField: "LovValue1",
                         dataSource: {
                             transport: {
                                 read: {
                                     url: "/ConfigurationLookup/GetvalueDropDownLov",
                                     data: { 'FieldName': options.field },
                                     dataType: "json"
                                 }
                             },
                             schema: {
                                 model: { id: "id" }
                             }
                         },
                         valuePrimitive: true,
                         suggest: true
                     });
             }
        }
        else {
             if (isFirstRow && page) {
                 $('<input  id="' + options.field + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                     e.preventDefault();
                 });
             }
             else {
                 $('<input id="' + options.field + '" data-bind="value:' + options.field + '"/>')
                     .appendTo(container)
                     .kendoDropDownList({
                         autoBind: false,
                         dataTextField: "LovValue1",
                         dataValueField: "LovValue1",
                         dataSource: {
                             transport: {
                                 read: {
                                     url: "/ConfigurationLookup/GetvalueDropDownLov",
                                     //data: {
                                     //    dataS: data
                                     //},
                                     data: { 'FieldName': options.field },
                                     dataType: "json"
                                 }
                             },
                             schema: {
                                 model: { id: "id" }
                             }
                         },
                         valuePrimitive: true,
                         suggest: true
                     });
             }
        }
    }
    function onSelect(e) {
        var dropdown = e.sender;
        var selectedItem = dropdown.dataItem();
        console.log("Selected Item:", selectedItem);
    }

    function checkFirstRow(container, options) {
        var field = options.field;
        var grid = $("#gridAddselect").data("kendoGrid");
        var dataSource = grid.dataSource;
        var row = $(container).closest("tr");
        var isFirstRow = row.index() === 0;
        var page = dataSource.page() === 1;
        if (isFirstRow && page) {
            $('<input  id="' + options.field + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none" readonly/>').appendTo(container).on('keydown', function (e) {
                e.preventDefault();
            });
        }
        else {
            if (field == "v_over_cost_pm" || field == "v_max_distance") {
                $('<input id="' + options.field + '"  data-bind="value:' + options.field + '" style="width:100%;border:none" maxlength="50" onkeypress="return isNumberKey(event)" />').appendTo(container);
            }
            else {
                $('<input id="' + options.field + '"  data-bind="value:' + options.field + '" style="width:100%;border:none" maxlength="50" />').appendTo(container);
            }
        }

    }
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    function onChangeSymptomGroup(e) {
        var dataSymptom_group = $("#_v_symptom_group").data("kendoDropDownList").text();
        var ddlSymptom_name = $("#_p_Reject_reason").data("kendoDropDownList");
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/GetSymptomName",
            data: {
                FieldData: dataSymptom_group
            },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                    }
                    else {
                        null;
                    }
                }

            },
            failure: function (msg) {
            }
        });
        ddlSymptom_name.value("");
        ddlSymptom_name.dataSource.read();
    }
    function onChangeProvince(e) {
        var dataProvince = $("#_v_province").data("kendoDropDownList").text();
        var ddldistrict = $("#_v_district").data("kendoDropDownList");
        var ddlsub_district = $("#_v_subdistrict").data("kendoDropDownList");
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/GetDistrict",
            data: {
                Province: dataProvince
            },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                    }
                    else {
                        null;
                    }
                }

            },
            failure: function (msg) {
            }
        });
        ddldistrict.value("");
        ddldistrict.dataSource.read();
        ddlsub_district.value("");
        ddlsub_district.dataSource.read();
    }
    function onChangeDistrict(e) {
        var dataProvince = $("#_v_province").data("kendoDropDownList").text();
        var dataDistrict = $("#_v_district").data("kendoDropDownList").text();

        var ddlsub_district = $("#_v_subdistrict").data("kendoDropDownList");
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/GetSubDistrict",
            data: {
                Province: dataProvince, District: dataDistrict
            },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                    }
                    else {
                        null;
                    }
                }

            },
            failure: function (msg) {
            }
        });
        ddlsub_district.value("");
        ddlsub_district.dataSource.read();
    }
    function ConfirmAddLookupDetail() {

        var grid = $("#gridAddselect").data("kendoGrid");
        var isEditing = grid.editable;

        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }

        count_check_param = 0;
        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        var filter_param = [];
        for (var i = 0; i < paramList.length; i++) {
            var value = paramList[i];
            if (value == "base_price" || value == "effective_date_start" || value == "effective_date_to") {
                continue;
            }
            else {
                filter_param.push(value);
            }
        }
        for (var param of paramList) {
            var checkbox = document.getElementById(param);
            var isChecked = checkbox.checked;
            if (!isChecked) {
                count_check_param += 1;
            }
        }
        if (count_check_param == filter_param.length) {
            //alert("Please choose parameter.");
            var title = "System Information";
            //var message = "Please choose parameter"
            var message = "@M_CHECKED_PARAMETER";
            popUpMeassage(title, message);
            return;
        }
        var checkDateSame = validateDates(grid);
        var checkEmptyValue = validateEmptyValue(grid);
        if (!checkDateSame && !checkEmptyValue) {
            var allRowValues = getAllRowValues(grid);
            var data = JSON.stringify(allRowValues);
            console.log(allRowValues);
            console.log(data);
            var chkadd = ValidationAddDataLookup();
            var overlap_date = ValidateDateAdd(grid);//ValidateDate(grid);
        }
        if (chkadd == true && overlap_date == false && allRowValues != null)
        {
            $.ajax({
                type: "POST",
                url: "/ConfigurationLookup/AddNewConfigurationLookupDetails",
                data: {
                    dataS: data
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response.code == "0") {
                            var title = "System Information";
                            showMSG("success", response.msg, title);
                            $("#ConfigCostInsPopup").data("kendoWindow").close();
                            // var grid = $("#gridCostTable1").data("kendoGrid");
                            //_Clear();
                            clearForAdd();
                            //_Search();
                            $("#ddllTableList").data("kendoDropDownList").dataSource.read();
                            $("#ddlONTOP").data("kendoMultiSelect").dataSource.read();
                            var ddl = $('#ddlONTOP').data("kendoMultiSelect");
                            ddl.enable(true);
                            //var grid = getGridName();
                            //grid.dataSource.page(1);
                            $("#ddllTableList").data("kendoDropDownList").value("ALL");
                            $("#gridCostTable1").data('kendoGrid').dataSource.data([]);
                        }
                        else if (response.code == "1")
                        {
                            var title = "System Information";
                            var message = response.msg;
                            popUpMeassage(title, message);
                        }
                        else {
                            $("#ConfigCostInsPopup").data("kendoWindow").close();
                            var title = "System Information";
                            showMSG("error", response.msg, title);
                            clearForAdd();
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }
    }
    function validateDates(grid) {
        var dataItems = grid.dataSource.view();
        var isValid = false;
        var check = 0;
        dataItems.forEach(function (item) {
            var startDateString = kendo.toString(item.effective_date_start, "dd/MM/yyyy");
            var endDateString = kendo.toString(item.effective_date_to, "dd/MM/yyyy");
            if (startDateString === endDateString) {
                check++;
            }
        });
        if (check > 0) {
            // If invalid, you might want to revert the changes or set focus to the field
            //alert("effective_date_start and effective_date_to cannot be the same.");
            var title = "System Information";
            var message = "@M_VALIDATE_EFFECTIVE";
            popUpMeassage(title, message);
            isValid = true;
        }
        return isValid
    }
    function validateEmptyValue(grid) {
        var dataSource = grid.dataSource;
        var dataItems = dataSource.data();
        var columns = grid.columns;

        var param_checkbox = [];

        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        for (var param of paramList) {
            var valueparam = param;
            var checkbox = document.getElementById(valueparam);
            var isChecked = checkbox.checked;
            if (isChecked) {
                param_checkbox.push(valueparam);
            }
            else {
                continue;
            }
        }


        var check = 0;
        var isValid = false;
        for (var i = 0; i < dataItems.length; i++) {
            var item = dataItems[i];
            for (var j = 1; j < columns.length; j++) {
                var field = columns[j].field;
                if (field == "id" || field == "base_price" || field == "effective_date_to" || field == "effective_date_start") {
                    var value = item[field];
                }
                else {
                    var value_field = item[field];
                    var value = value_field  ? value_field.trim() : "";
                }
                for (var k = 0; k < param_checkbox.length; k++) {
                    if (param_checkbox[k] == field) {
                        if ((value == "" || value == null) && param_checkbox[k] !== "effective_date_to")
                        {
                            check++;
                        }
                    }
                }

            }
        }
        if (check > 0) {
            //alert("parameter value not empty.");
            var title = "System Information";
            var message = "@M_VALIDATE_BLANK";
            popUpMeassage(title, message);
            isValid = true;
        }
        return isValid
    }
    function getAllRowValues(grid) {
        var dataSource = grid.dataSource;
        var dataItems = dataSource.data();
        if (dataItems.length === 0) {
            //alert("Please select value");
            var title = "System Information";
            var message = "@M_CHECK_ROW"
            popUpMeassage(title, message);
            return null;
        }
        var columns = grid.columns;
        var lookup_name = $("#_LOOKUP_NAME").val()
        var ontop_flag = "";
        var ddlOntop = $("#ddlONTOP").data('kendoMultiSelect');
        var dataOntop = "";
        var chk_ontop_flag = document.getElementById("E_ONTOP_FLAG");
        var param_checkbox = [];

        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        for (var param of paramList) {
            var valueparam = param;
            var checkbox = document.getElementById(valueparam);
            var isChecked = checkbox.checked;
            if (isChecked) {
                param_checkbox.push(valueparam);
            }
            else {
                continue;
            }
        }

        if (chk_ontop_flag.checked) {
            ontop_flag = "Y";
        }
        else {
            ontop_flag = "N";
            var items = ddlOntop.value();
            if (items.length > 0) {
                for (var i = 0; i < items.length; i++) {
                    var value = items[i];
                    dataOntop += value + "|"
                }
                dataOntop = dataOntop.substr(0, dataOntop.length - 1);
            }
        }
        var lookuplist = { lookup_name: lookup_name, lookup_ontopflag: ontop_flag, lookup_ontop: dataOntop, lookup_header_list: [], user : "@username" };
        var list = [];
        var index = 0;
        for (var i = 0; i < dataItems.length; i++) {
            var item = dataItems[i];
            var rowData = {};
            list = new Array();
            for (var j = 1; j < columns.length; j++) {
                var field = columns[j].field;
                if (field == "id" || field == "base_price" || field == "effective_date_to" || field == "effective_date_start") {
                    var value = item[field];
                }
                else {
                    var value_field = item[field];
                    var value = value_field ? value_field.trim() : "";
                }

                if (value == "" || value == null && (field != "effective_date_to")) {
                    continue;
                }

                else {
                    if (i == 0) {
                        for (var k = 0; k < param_checkbox.length; k++) {
                            if (param_checkbox[k] == field) {
                                if (param_checkbox[k] == "effective_date_start" || param_checkbox[k] == "effective_date_to") {
                                    var datestring = kendo.toString(value, "dd/MM/yyyy");
                                    list.push({ "parameter_name": field, "lookup_flag": "new", "parameter_value": datestring })
                                }
                                else {
                                    list.push({ "parameter_name": field, "lookup_flag": "new", "parameter_value": value })
                                }
                            }
                            else {
                                continue;
                            }
                        }
                    }
                    else {
                        if (field !== "id") {
                            if (field == "effective_date_start" || field == "effective_date_to") {
                                var datestring = kendo.toString(value, "dd/MM/yyyy");
                                list.push({ "parameter_name": field, "lookup_flag": "new", "parameter_value": datestring })
                            }
                            else {
                                list.push({ "parameter_name": field, "lookup_flag": "new", "parameter_value": value })
                            }
                        }

                    }
                }
            }
            lookuplist.lookup_header_list.push(list);
        }
        return lookuplist;
    }
    function ValidationAddDataLookup() {
        debugger;
        var chk = ValidationProcessing("dateselect");
        debugger;
        if (chk) //check blank value
        {
            clearValidateforAdd();
            debugger;
            if ($.trim($("#_LOOKUP_NAME").val()) == '' || $.trim($("#_LOOKUP_NAME").val()) == null) {
                var title = "System Information";
                var message = "@M_REQUIRE_FIELD";
                popUpMeassage(title, message);
                chk = false;
            }
            else {
                var input = $.trim($("#_LOOKUP_NAME").val())
                var check_input = hasSpecialCharacters(input);
                if (check_input) {
                    chk = true;
                }
                else {
                    var title = "System Information";
                    var message = "@M_INVALID_FORMAT";
                    popUpMeassage(title, message);
                    chk = false;
                }
            }
        }
        return chk;
    }
    function hasSpecialCharacters(text) {
        // Regular expression to match special characters
        const regex = /^[A-Za-z0-9-_]+$/;
        return regex.test(text);
    }
    function createRowKey(row) {
        var excludedColumns = ["id","base_price", "effective_date_start", "effective_date_to"];
        var keyParts = [];
        var fields = Object.keys(row).filter(field => !excludedColumns.includes(field));
        fields.forEach(function (field) {
            keyParts.push(row[field]);
        });
        return JSON.stringify(keyParts);
    }

    function ValidateDate(grid) {
        var data = grid.dataSource.view();
        // กำหนดคอลัมน์ที่ไม่ต้องตรวจสอบค่าซ้ำ

        var overlapping = false;
        var checkstartdate_more_than_default = startdate_more_than_default(grid);
        if (checkstartdate_more_than_default) {
            if (data.length > 0) {
                var seenValues = {}; // อ็อบเจกต์เพื่อเก็บค่าที่เห็นแล้วและตำแหน่งของแถว
                var message = ''; // ข้อความที่จะแสดงผลลัพธ์
                var check = 0;
                // วนลูปเริ่มจากแถวที่ 2 เป็นต้นไป (ไม่สนใจแถวแรก)
                for (var i = 1; i < data.length; i++) {
                    var row = data[i].toJSON(); // แปลงข้อมูลแถวเป็น JSON
                    var rowKey = createRowKey(row);
                    var startDate = new Date(row.effective_date_start);
                    startDate.setHours(0, 0, 0, 0);
                    if (row.effective_date_to == null) {
                        var endDate = null;
                    }
                    else {
                        var endDate = new Date(row.effective_date_to);
                        endDate.setHours(0, 0, 0, 0);
                    }
                    var xx = seenValues[rowKey];
                    if (seenValues[rowKey]) {
                        var firstIndex = seenValues[rowKey];
                        var firstRow = data[firstIndex].toJSON();
                        var firstStartDate = new Date(firstRow.effective_date_start);
                        firstStartDate.setHours(0, 0, 0, 0);
                        if (firstRow.effective_date_to == null) {
                            var firstEndDate = null;
                        }
                        else {
                            var firstEndDate = new Date(firstRow.effective_date_to);
                            firstEndDate.setHours(0, 0, 0, 0);
                        }
                        if (firstEndDate != null) {
                            if (firstStartDate <= endDate && startDate <= firstEndDate) {
                                check += 1;
                            }

                            if (startDate < firstStartDate || startDate <= firstEndDate) {
                                check += 1;
                            }
                        }
                        else {
                            debugger;
                            if (firstStartDate <= startDate) {
                                check += 1;
                            }

                            if (startDate < firstStartDate || startDate <= firstEndDate) {
                                check += 1;
                            }
                        }
                    } else {
                        // เก็บค่าที่เห็นแล้วและตำแหน่งของแถว
                        seenValues[rowKey] = i;
                    }

                }
                if (check > 0) {
                    var title = "System Information";
                    var message = "@M_OVERLAP_DATE";
                    popUpMeassage(title, message);
                    overlapping = true;
                }
            }
            else {
                if (!overlapping) {
                    console.log("No overlapping dates found.");
                }
            }
        }
        else {
            overlapping = true;
        }
        return overlapping;
    }
    function ValidateDateAdd(grid) {
        var data = grid.dataSource.view();
        // กำหนดคอลัมน์ที่ไม่ต้องตรวจสอบค่าซ้ำ
        var overlapping = false;
        var checkstartdate_more_than_default = startdate_more_than_default(grid);
        if (checkstartdate_more_than_default) {
            var check = 0;
            var numberOfRowsDefault = countRowsDefaultWithValue("Default");

            var listfilter = [];
            for (var k = numberOfRowsDefault; k < data.length; k++) {
                var value = data[k];
                listfilter.push(value);
            }
            var result = groupData(listfilter);
            if (result.length > 0) {
                for (let i = 0; i < result.length; i++) {
                    var seenValues = {};
                    var count = 0;
                    var inner_result = result[i];
                    inner_result.sort((a, b) => a.id - b.id);
                    for (let j = 0; j < inner_result.length; j++) {
                        var row = inner_result[j].toJSON(); // แปลงข้อมูลแถวเป็น JSON
                        var rowKey = createRowKeyEdit(row);
                        var num = i + 1;
                        var startDate = new Date(row.effective_date_start);
                        startDate.setHours(0, 0, 0, 0);
                        if (row.effective_date_to == null) {
                            var endDate = null;
                        }
                        else {
                            var endDate = new Date(row.effective_date_to);
                            endDate.setHours(0, 0, 0, 0);
                        }
                        if (seenValues[rowKey]) {
                            var firstIndex = seenValues[rowKey];
                            var previousRow = inner_result[count].toJSON();
                            count++;
                            var firstStartDate = new Date(previousRow.effective_date_start);
                            firstStartDate.setHours(0, 0, 0, 0);
                            if (previousRow.effective_date_to == null) {
                                var firstEndDate = null;
                            }
                            else {
                                var firstEndDate = new Date(previousRow.effective_date_to);
                                firstEndDate.setHours(0, 0, 0, 0);
                            }
                            if (firstEndDate != null) {
                                if (firstStartDate <= endDate && startDate <= firstEndDate) {
                                    check += 1;
                                }

                                if (startDate <= firstStartDate || startDate <= firstEndDate) {
                                    check += 1;
                                }
                            }
                            else {
                                if (firstStartDate <= startDate) {
                                    check += 1;
                                }

                                if (startDate <= firstStartDate || startDate <= firstEndDate) {
                                    check += 1;
                                }
                            }

                        } else {
                            // เก็บค่าที่เห็นแล้วและตำแหน่งของแถว
                            seenValues[rowKey] = num;//i
                        }
                    }
                }
                if (check > 0) {
                    debugger;
                    //alert("Overlapping dates found");
                    var title = "System Information";
                    var message = "@M_OVERLAP_DATE";
                    popUpMeassage(title, message);
                    overlapping = true;
                }
            }
            return overlapping;
        }

    }
    function startdate_more_than_default(grid) {
        var dataItems = grid.dataSource.view();
        var count_check = 0;
        var check = true;
        if (dataItems.length > 1) {
            var firstRowStartDate = dataItems[0].effective_date_start;
            firstRowStartDate.setHours(0, 0, 0, 0); // ตั้งเวลาเป็น 00:00:00

            for (var i = 1; i < dataItems.length; i++) {
                var currentRowStartDate = new Date(dataItems[i].effective_date_start);
                currentRowStartDate.setHours(0, 0, 0, 0); // ตั้งเวลาเป็น 00:00:00
                if (currentRowStartDate  < firstRowStartDate) {
                    count_check++;
                    var title = "System Information";
                    var message = "@M_VALIDATE_EFFECTIVE_DEFAULT";
                    popUpMeassage(title, message);
                }
            }
            if (count_check > 0) {
                check = false;
            }
        }
        return check;
    }
    function ValueKeyPress() {
        var element = document.getElementById("_LOOKUP_NAME");
        var value_element = element.value;
        if (value_element == '' || value_element == null) {
            $("#validate-" + "_LOOKUP_NAME").html("");
        }
    }
    function screenLoader_Global() {
        $('<div class="loader-mask"><div class="loader"></div></div>').appendTo('body');
    }

    function remove_screenLoader_Global() {
        $('.loader-mask').remove();
    }
    if (window.performance) {
        //screenLoader_Global();
        console.info("window.performance work's fine on this browser");
    }

    function onAdditionalData() {
        return {
            //text: $("#_VENDORCODE").val()
        };
    }
    function ClearDateEndPopup() {
        $("#DateEndPopup").data("kendoWindow").close();
    }
    function ClearSubConType() {
        $("#_exsubcontype").val("");
        $("#validate-" + "_exsubcontype").html("");
        $("#SUBCONTYPEPopup").data("kendoWindow").close();
        $("#_addtype").val("");

    }
    function ClearTeamID() {
        $("#TeamIDPopup").data("kendoWindow").close();
        $("#_addtype").val("");

    }
    function AddConfigDataType() {
        var dataname = $("#_exsubcontype").val();
        var datatype = $("#_addtype").val();
        console.log(dataname);
        if (dataname != "") {


            $.ajax({
                type: "POST",
                url: "/ConfigurationCostInstallation/AddNewConfigData",
                data: {
                    DataName: dataname,
                    DataType: datatype
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        $("#_exsubcontype").val("");
                        $("#SUBCONTYPEPopup").data("kendoWindow").close();
                        console.log("success");
                        $("#validate-" + "_exsubcontype").html("");
                        $("#_addtype").val("");
                        if (datatype == "SUBCONTRACT_TYPE") { LoadSUBTYPE(); }
                        else { LoadSUBSUBTYPE(); }


                    }

                },
                failure: function (msg) {
                }
            });


        }
        else {
            $("#validate-" + "_exsubcontype").html(ValidationIcon() + "This field is required.");
        }
    }

    function cancelPopup() {
        $("#RULE_ID").show();
        var grid = $("#gridAddselect").data("kendoGrid");
        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }
        clearForAdd();
        clearValidateforAdd();
        $("#ConfigCostInsPopup").data("kendoWindow").close();
    }
    function cancelPopupEdit() {
        $("#RULE_ID").show();
        var grid = $("#gridEditselect").data("kendoGrid");
        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }
        clearForEdit();
        clearValidateforAdd();
        $("#ConfigCostEditPopup").data("kendoWindow").close();
    }

    function getGridName() {
        var name;
        if ($("#ddllTableList").val() === "T1") {

            name = $("#gridCostTable1").data("kendoGrid");
        }
        else if ($("#ddllTableList").val() === "T2") {
            name = $("#gridCostTable2").data("kendoGrid");
        }
        else if ($("#ddllTableList").val() === "T3") {

            name = $("#gridCostTable3").data("kendoGrid");//
        }
        else if ($("#ddllTableList").val() === "T4") {

            name = $("#gridCostTable4").data("kendoGrid");//
        }
        else if ($("#ddllTableList").val() === "T5") {

            name = $("#gridCostTable5").data("kendoGrid");//
        }
        else if ($("#ddllTableList").val() === "T6") {

            name = $("#gridCostTable6").data("kendoGrid");//
        }

        else { name = $("#gridCostTable1").data("kendoGrid"); }


        return name;
    }
    function CheckKeyUps(id, RexStr) {
        var strKey = $("#" + id).val();
        var strBuilder = "";
        var filter = new RegExp(RexStr);
        for (var i = 0; i < strKey.length; i++) {
            if (filter.test(strKey.substr(i, 1))) {
                strBuilder += strKey.substr(i, 1);
            }
        }
        $("#" + id).val(strBuilder);
    }
    function showField() {
        $("#e_ORDER_TYPE").show();
        $("#e_SUBCONTRACT_TYPE").show();
        $("#e_SUBCONTRACT_SUB_TYPE").show();
        $("#e_VENDOR_CODE").show();
        $("#e_TECHNOLOGY").show();
        //$("#e_TOTAL_PRICE").show();
        //$("#e_EVENT_CODE").show();
        //$("#e_ROOM_FLAG").show();
        //$("#e_REUSE_FLAG").show();
        $("#e_DISTANCE_FROM").show();
        $("#e_DISTANCE_TO").show();
        $("#e_INDOOR_PRICE").show();
        $("#e_OUTDOOR_PRICE").show();
        $("#e_INTERNET_PRICE").show();
        $("#e_VOIP_PRICE").show();
        $("#e_PLAYBOX_PRICE").show();
        $("#e_MECH_PRICE").show();
        $("#e_ADDRESS_ID").show();
        $("#e_EVENT_TYPE").show();
        //$("#e_SAME_DAY").show();
        //$("#e_SUBCONTRACT_LOCATION").show();
        $("#e_EXPIRE_DATE").show();
        $("#e_EFFECTIVE_DATE").show();

    }
    function sethideshowgrid() {
        if ($("#ddllTableList").val() === "T1") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").show();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").hide();
        }
        if ($("#ddllTableList").val() === "T2") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").show();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").hide();

        }
        if ($("#ddllTableList").val() === "T3") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").show();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").hide();

        } if ($("#ddllTableList").val() === "T4") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").show();
            $("#List_COMPANY_NAME").show();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").show();
            $("#gridresult5").hide();
            $("#gridresult6").hide();

        } if ($("#ddllTableList").val() === "T5") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").show();
            $("#gridresult6").hide();

        } if ($("#ddllTableList").val() === "T6") {
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").show();
            $("#List_SUBCONTRACT_TYPE").hide();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
        }


    }

    function setDefaultValue(id) {
        $("#" + id).blur(function () {
            var vald = $("#" + id).val();
            if (vald == null || vald == "") {
                $("#" + id).val("0");
            }
            else {
                $("#" + id).val(vald);
            }

        });

    }

    $(document).ready(function () {

        var gridsearch = getGridName();
        $(gridsearch.tbody).on("click", "td", function (e) {
            var row = $(this).closest("tr");
            var curRowIdx = $("tr", gridsearch.tbody).index(row);
            var colIdx = $("td", row).index(this);
            var item = gridsearch.dataItem(row);

            //$("#_ruleselect").val(item.RULEID);
            $("#_lookupname").val(item.LOOKUP_NAME);
            $("#_rulename").val(item.RULE_NAME);

        });

        $(".k-grid").on("mousedown", ".k-button:not(.k-grid-cancel):not(.k-grid-update)", function (e) {
            var grid_select = $(this).closest(".k-grid");
            var editRow = grid_select.find(".k-grid-edit-row");
            var grid = $("#gridAddselect").data("kendoGrid");
            var totalRows = grid.dataSource.total();
            if (editRow.length > 0 && totalRows > 1) {
                alert("@M_ACTIVE_ROW");
                e.preventDefault();

            }

            var gridEdit = $("#gridEditselect").data("kendoGrid");
            var totalRowsEdit = gridEdit.dataSource.total();
            if (editRow.length > 0 && totalRowsEdit > 1) {
                alert("@M_ACTIVE_ROW");
                e.preventDefault();

            }
        });
    });
    function _ExportAll() {

        var model = defaultData()

        window.open("/ConfigurationCostInstallation/_ExportAll?dataS=" + JSON.stringify(model) + "");
    }

    function ExportExcel() {

        var model = defaultData()

        window.open("/ConfigurationCostInstallation/ExportExcel?dataS=" + JSON.stringify(model) + "");
    }
    function ExportDataToExcel() {
        debugger;
        var lookup_name = $('#_lookupname').val();
        window.open("/ConfigurationLookup/ExportDataToExcel?lookupName=" + lookup_name);
    }
    function modalConfirmDeleteShow(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        //id = dataItem.ID;
        //$("#modal003_perorder").attr("data-id", id);

        //idsToSend = [];
        // idsToSend.push(dataItem);

        $("#modal003_perorder").modal("show");

    }
    function ConfirmDelete() {

        $("#modal003_perorder").modal("hide");

        var DataResult = new addDataModel();
        DataResult.LOOKUP_NAME = $('#_lookupname').val();
        DataResult.USER = "@username";
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/DeleteConfigurationLookupName",
            data: { dataS: JSON.stringify(DataResult) },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response.code == "0") {
                        var title = "System Information";
                        showMSG("success", response.msg, title);
                        $("#ConfigCostInsPopup").data("kendoWindow").close();
                        //var grid = $("#gridCostTable1").data("kendoGrid");
                        var grid = getGridName();
                        grid.dataSource.page(1);
                        clearForAdd();
                        $("#ddllTableList").data("kendoDropDownList").dataSource.read();
                        $("#ddllTableList").data("kendoDropDownList").value("ALL");
                    }
                    else {
                        $("#ConfigCostInsPopup").data("kendoWindow").close();
                        var title = "System Information";
                        showMSG("error", response.msg, title);
                    }
                }

            },
            failure: function (msg) {
            }
        });
    }
    function clearForAdd() {
        $("#_saveType").val('');


        //$("#_VENDORCODE").val("");
        $("#_RULE_NAME").val("");
        //$("#_ORDER_TYPE").data('kendoDropDownList').value("ALL");
        //$("#_SUBCONTYPE").data('kendoDropDownList').value("ALL");
        //$("#_SUBCONSUBTYPE").data('kendoMultiSelect').value("ALL");
        //$("#_TECHNOLOGY").data('kendoDropDownList').value("ALL");
        //$("#_EFFDATE").data("kendoDatePicker").value(new Date());
        // $("#_EXPDATE").data("kendoDatePicker").value(new Date());

        //$("#_EVENT_CODE").data('kendoDropDownList').value("ALL");
        //$("#_ROOM_FLAG").data('kendoDropDownList').value("ALL");
        //$("#_REUSE_FLAG").data('kendoDropDownList').value("ALL");
        //$("#_VENDORCODE").val("ALL");

        $("#_INTERNET_PRICE").val("0");


        $("#_DISTANCE_FROM").val("0");
        $("#_DISTANCE_TO").val("0");
        //$("#_TOTAL_PRICE").val("0");
        $("#_INDOOR_PRICE").val("0");
        $("#_ADDRESS_ID").val("");
        $("#_OUTDOOR_PRICE").val("0");
        $("#_EVENT_TYPE").val("");

        $("#_VOIP_PRICE").val("0");
        $("#_PLAYBOX_PRICE").val("0");
        $("#_MECH_PRICE").val("0");
        //$("#_SUBCONTRACT_LOCATION").val("");
        $("#_COMPANY_NAME").val("");
        //$("#_SAME_DAY").data('kendoDropDownList').value("ALL");

        //config lookup
        $("#_LOOKUP_NAME").val("");
        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var filterConfig = columnList.filter(p => p.LovValue2 === 'Configuration')
        for (var i = 0; i < filterConfig.length; i++) {
            var grid = $("#gridAddselect").data("kendoGrid");
            var datafilterConfig = filterConfig[i];
            var checkbox = document.getElementById(datafilterConfig.LovValue1);
            checkbox.checked = true;
            grid.showColumn(datafilterConfig.LovValue1);
        }

        var filterNonConfig = columnList.filter(p => p.LovValue2 !== 'Configuration')
        for (var j = 0; j < filterNonConfig.length; j++) {
            var grid = $("#gridAddselect").data("kendoGrid");
            console.log(filterNonConfig[j]);
            var datafilterNonConfig = filterNonConfig[j];
            var checkbox = document.getElementById(datafilterNonConfig.LovValue1);
            checkbox.checked = false;
            grid.hideColumn(datafilterNonConfig.LovValue1);
        }
        document.getElementById("E_ONTOP_FLAG").checked = false;
        $("#ddlONTOP").data("kendoMultiSelect").value([]);

        var grid = $("#gridAddselect").data("kendoGrid");
        grid.dataSource.data([]);
    }
    function clearForEdit() {
        $("#_saveType").val('');


        //$("#_VENDORCODE").val("");
        $("#_RULE_NAME").val("");
        //$("#_ORDER_TYPE").data('kendoDropDownList').value("ALL");
        //$("#_SUBCONTYPE").data('kendoDropDownList').value("ALL");
        //$("#_SUBCONSUBTYPE").data('kendoMultiSelect').value("ALL");
        //$("#_TECHNOLOGY").data('kendoDropDownList').value("ALL");
        //$("#_EFFDATE").data("kendoDatePicker").value(new Date());
        // $("#_EXPDATE").data("kendoDatePicker").value(new Date());

        //$("#_EVENT_CODE").data('kendoDropDownList').value("ALL");
        //$("#_ROOM_FLAG").data('kendoDropDownList').value("ALL");
        //$("#_REUSE_FLAG").data('kendoDropDownList').value("ALL");
        //$("#_VENDORCODE").val("ALL");

        $("#_INTERNET_PRICE").val("0");


        $("#_DISTANCE_FROM").val("0");
        $("#_DISTANCE_TO").val("0");
        //$("#_TOTAL_PRICE").val("0");
        $("#_INDOOR_PRICE").val("0");
        $("#_ADDRESS_ID").val("");
        $("#_OUTDOOR_PRICE").val("0");
        $("#_EVENT_TYPE").val("");

        $("#_VOIP_PRICE").val("0");
        $("#_PLAYBOX_PRICE").val("0");
        $("#_MECH_PRICE").val("0");
        //$("#_SUBCONTRACT_LOCATION").val("");
        $("#_COMPANY_NAME").val("");
        //$("#_SAME_DAY").data('kendoDropDownList').value("ALL");

        //config lookup
        //$("#_LOOKUP_NAME").val("");
        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var filterConfig = columnList.filter(p => p.LovValue2 === 'Configuration')
        for (var i = 0; i < filterConfig.length; i++) {
            var grid = $("#gridEditselect").data("kendoGrid");
            var datafilterConfig = filterConfig[i];
            var checkbox = document.getElementById("u_" + datafilterConfig.LovValue1);
            checkbox.checked = true;
            checkbox.disabled = false;
            grid.showColumn(datafilterConfig.LovValue1);
        }

        var filterNonConfig = columnList.filter(p => p.LovValue2 !== 'Configuration')
        for (var j = 0; j < filterNonConfig.length; j++) {
            var grid = $("#gridEditselect").data("kendoGrid");
            console.log(filterNonConfig[j]);
            var datafilterNonConfig = filterNonConfig[j];
            var checkbox = document.getElementById("u_" + datafilterNonConfig.LovValue1);
            checkbox.checked = false;
            checkbox.disabled = false;
            grid.hideColumn(datafilterNonConfig.LovValue1);
        }
        document.getElementById("U_ONTOP_FLAG").checked = false;
        $("#ddlONTOP_Edit").data("kendoMultiSelect").value([]);

        var grid = $("#gridEditselect").data("kendoGrid");
        grid.dataSource.data([]);

    }
    function TableListChange() {
        //Loading();
        $("#_ruleselect").val("");
        $("#_tableselect").val("");
        $("#ddllTableList").data("kendoDropDownList").dataSource.read();
        $('#ddlConttype').data('kendoDropDownList').value("ALL");
        $('#ddlORDERTYPE').data('kendoDropDownList').value("ALL");
        $('#ddlTECHNOLOGY').data('kendoDropDownList').value("ALL");

        $("#dtpDateFrom").val("");
        $("#dtpDateTo").val("");
        $("#dtpEXPDateFrom").val("");
        $("#dtpEXPDateTo").val("");
        $("#validate-" + "ddllTableList").html("");
        $("#dtpDateTo").data("kendoDatePicker").enable(false);
        $("#dtpEXPDateTo").data("kendoDatePicker").enable(false);

        $("#gridCostTable1").data('kendoGrid').dataSource.data([]);
        $("#gridCostTable2").data('kendoGrid').dataSource.data([]);
        $("#gridCostTable3").data('kendoGrid').dataSource.data([]);
        $("#gridCostTable4").data('kendoGrid').dataSource.data([]);
        $("#gridCostTable5").data('kendoGrid').dataSource.data([]);
        $("#gridCostTable6").data('kendoGrid').dataSource.data([]);
        //_Clear();

        $("#ddlruleid").data('kendoDropDownList').value("ALL");
        var valtb = $("#ddllTableList").val();
        //LoadRuleID();
        if (valtb == "T1") {

            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").show();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").hide();

        }

        if (valtb == "T2") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").show();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").hide();
        }

        if (valtb == "T3") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").show();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").hide();
        }

        if (valtb == "T4") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").show();
            $("#List_COMPANY_NAME").show();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").show();
            $("#gridresult5").hide();
            $("#gridresult6").hide();
        }

        if (valtb == "T5") {
            $("#List_SUBCONTRACT_TYPE").show();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").show();
            $("#gridresult6").hide();
        }

        if (valtb == "T6") {
            $("#List_SUBCONTRACT_TYPE").hide();
            $("#List_LOCATION_CODE").hide();
            $("#List_COMPANY_NAME").hide();
            $("#gridresult").hide();
            $("#gridresult2").hide();
            $("#gridresult3").hide();
            $("#gridresult4").hide();
            $("#gridresult5").hide();
            $("#gridresult6").show();

        }

        //LoadRuleID();
        //Loading(0);
        var grid = getGridName();

        $(grid.tbody).on("click", "td", function (e) {
            var row = $(this).closest("tr");
            var curRowIdx = $("tr", grid.tbody).index(row);
            var colIdx = $("td", row).index(this);
            var item = grid.dataItem(row);

            $("#_ruleselect").val(item.RULEID);


        });

    }

    function LoadRuleID() {
        var valtb = $("#ddllTableList").val();
        $.ajax({
            cache: false,
            type: "GET",
            async: false,
            data: { table: valtb },
            //url: "/ConfigurationCostInstallation/GetRuleId",
            url: "/ConfigurationLookup/GetRuleId",
            dataType: "json",
            success: function (data) {
                //Add : virtual valueMapper ที่ data มากกว่า 500
                //data : 11/02/2564
                if (data.length > 500) {
                    //#region data > 500 use virtual
                    try {
                        $("#ddlruleid").data({});
                        $("#ddlruleid").kendoDropDownList({
                            dataTextField: "ruleid",
                            dataValueField: "ruleid",
                            filter: "contains",
                            virtual: {
                                itemHeight: 26,
                                valueMapper: function (options) {
                                    var values = convertValues(options.value);
                                    var indices = [];
                                    if (values && values.length > 0) {
                                        for (var j = 0; j < data.length; j++) {
                                            var rule = data[j];
                                            if (values.indexOf(rule.ruleid) > -1) {
                                                indices.push(j);
                                            }
                                        }
                                    }
                                    options.success(indices);
                                }
                            },
                            height: 520,
                            dataSource: {
                                data: data,
                                schema: {
                                    model: {
                                        fields: {
                                            ruleid: { type: "string" },
                                            rule_name: { type: "string" }
                                        }
                                    }
                                },
                                pageSize: 80
                            }

                        });
                    } catch (ex) {
                        console.log(ex);
                    }

                    //#endregion data > 500 use virtual
                } else {
                    //#region data <= 500 not use virtual

                    try {
                        $("#ddlruleid").data({});
                        $("#ddlruleid").kendoDropDownList({
                            dataTextField: "ruleid",
                            dataValueField: "ruleid",
                            filter: "contains",
                            height: 200,
                            dataSource: {
                                data: data,
                                pageSize: 80
                            }
                        });
                    } catch (ex) {
                        console.log(ex);
                    }

                    //#endregion data <= 500 not use virtual

                }

                var widget = $("#ddlruleid").data("kendoDropDownList");

                widget.ul.parent().on("wheel", function (e) {
                    var container = this;

                    if ((container.scrollTop == 0 && e.originalEvent.deltaY < 0) ||
                        (container.scrollTop == container.scrollHeight - container.offsetHeight &&
                            e.originalEvent.deltaY > 0)) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });

            }
        });
    }
    function convertValues(value) {
        var data = [];
        value = $.isArray(value) ? value : [value];
        for (var idx = 0; idx < value.length; idx++) {
            data.push(value[idx]);
        }
        return data;
    }

    function AddnewData() {
        $("#RULE_ID").hide();


        //$("#_SAME_DAY").data('kendoDropDownList').enable(false);
        //$("#_EXPDATE").data("kendoDatePicker").value();
        var minsDate = new Date();
        //$("#_EFFDATE").kendoDatePicker({
        //    min: minsDate,
        //    //  max: maxDate,
        //    format: "dd/MM/yyyy",
        //    parseFormats: ["dd/MM/yyyy"],
        //    change: function () {
        //        onChangeEFFDATE();
        //        var value = this.value();
        //        console.log(value); //value is the selected date in the datepicker
        //    }
        //});
        //$("#_EXPDATE").kendoDatePicker({
        //    min: minsDate,
        //    //  max: maxDate,
        //    format: "dd/MM/yyyy",
        //    parseFormats: ["dd/MM/yyyy"],
        //    change: function () {

        //        var value = this.value();
        //        console.log(value); //value is the selected date in the datepicker
        //    }
        //});


        showField();
        var valtb = $("#ddllTableList").val();
        //clearForAdd();
        $("#_saveType").val('A');
        $(".k-grid-content").height("auto");
        $("#ConfigCostInsPopup").data("kendoWindow").center().open();

        $("#ddlONTOP").data("kendoMultiSelect").dataSource.read();
        //clearForAdd();
        //ColumnGenerationTest();
        $("#_tableselect").val(valtb);
        setFieldInput(valtb);
    }
    function setFieldInput(tb) {

        if (tb == "T1") {

            //$("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table1");
            $("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration Look up Name");
            //  $("#e_ORDER_TYPE").hide();
            //  $("#e_SUBCONTRACT_TYPE").hide();
            //  $("#e_SUBCONTRACT_SUB_TYPE").hide();
            // $("#e_VENDOR_CODE").hide();
            // $("#e_TECHNOLOGY").hide();
            //$("#e_TOTAL_PRICE").hide();
            //$("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            //$("#e_REUSE_FLAG").hide();
            $("#e_DISTANCE_FROM").hide();
            $("#e_DISTANCE_TO").hide();
            $("#e_INDOOR_PRICE").hide();
            $("#e_OUTDOOR_PRICE").hide();
            $("#e_INTERNET_PRICE").hide();
            $("#e_VOIP_PRICE").hide();
            $("#e_PLAYBOX_PRICE").hide();
            $("#e_MECH_PRICE").hide();
            $("#e_ADDRESS_ID").hide();
            $("#e_EVENT_TYPE").hide();
            //$("#e_SAME_DAY").hide();
            //$("#e_SUBCONTRACT_LOCATION").hide();
            $(".tb4_TeamID").hide();
            //
            //

        }
        else if (tb == "T2") {
            $("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table2");
            //  $("#e_ORDER_TYPE").hide();
            //  $("#e_SUBCONTRACT_TYPE").hide();
            $("#e_SUBCONTRACT_SUB_TYPE").hide();
            $("#e_VENDOR_CODE").hide();
            // $("#e_TECHNOLOGY").hide();
            //$("#e_TOTAL_PRICE").hide();
            //$("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            //$("#e_REUSE_FLAG").hide();
            $("#e_DISTANCE_FROM").hide();
            $("#e_DISTANCE_TO").hide();
            $("#e_INDOOR_PRICE").hide();
            $("#e_OUTDOOR_PRICE").hide();
            //$("#e_INTERNET_PRICE").hide();
            // $("#e_VOIP_PRICE").hide();
            //$("#e_PLAYBOX_PRICE").hide();
            // $("#e_MECH_PRICE").hide();
            // $("#e_ADDRESS_ID").hide();
            // $("#e_EVENT_TYPE").hide();
            //  $("#e_SAME_DAY").hide();
            //$("#e_SUBCONTRACT_LOCATION").hide();
            $(".tb4_TeamID").hide();


        }
        else if (tb == "T3") {
            $("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table3");
            //  $("#e_ORDER_TYPE").hide();
            //  $("#e_SUBCONTRACT_TYPE").hide();
            $("#e_SUBCONTRACT_SUB_TYPE").hide();
            $("#e_VENDOR_CODE").hide();
            // $("#e_TECHNOLOGY").hide();
            //$("#e_TOTAL_PRICE").hide();
            //  $("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            //$("#e_REUSE_FLAG").hide();
            $("#e_DISTANCE_FROM").hide();
            $("#e_DISTANCE_TO").hide();
            $("#e_INDOOR_PRICE").hide();
            $("#e_OUTDOOR_PRICE").hide();
            //$("#e_INTERNET_PRICE").hide();
            // $("#e_VOIP_PRICE").hide();
            //$("#e_PLAYBOX_PRICE").hide();
            // $("#e_MECH_PRICE").hide();
            $("#e_ADDRESS_ID").hide();
            $("#e_EVENT_TYPE").hide();
            //$("#e_SUBCONTRACT_LOCATION").hide();
            //  $("#e_SAME_DAY").hide();
            $(".tb4_TeamID").hide();


        }
        else if (tb == "T4") {
            $("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table4");
            // $("#e_ORDER_TYPE").hide();
            //  $("#e_SUBCONTRACT_TYPE").hide();
            $("#e_SUBCONTRACT_SUB_TYPE").hide();
            $("#e_VENDOR_CODE").hide();
            // $("#e_TECHNOLOGY").hide();
            // $("#e_TOTAL_PRICE").hide();
            //$("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            // $("#e_REUSE_FLAG").hide();
            // $("#e_DISTANCE_FROM").hide();
            //$("#e_DISTANCE_TO").hide();
            // $("#e_INDOOR_PRICE").hide();
            // $("#e_OUTDOOR_PRICE").hide();
            $("#e_INTERNET_PRICE").hide();
            $("#e_VOIP_PRICE").hide();
            $("#e_PLAYBOX_PRICE").hide();
            $("#e_MECH_PRICE").hide();
            $("#e_ADDRESS_ID").hide();
            $("#e_EVENT_TYPE").hide();
            //$("#e_SAME_DAY").hide();
            $("#_INDOOR_PRICE").val("0");
            $("#_OUTDOOR_PRICE").val("0");
            $("#_DISTANCE_FROM").val("0");
            $(".tb4_TeamID").show();

        }
        else if (tb == "T5") {
            $("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table5");
            //  $("#e_ORDER_TYPE").hide();
            //  $("#e_SUBCONTRACT_TYPE").hide();
            //$("#e_SUBCONTRACT_SUB_TYPE").hide();
            $("#e_VENDOR_CODE").hide();
            // $("#e_TECHNOLOGY").hide();
            // $("#e_TOTAL_PRICE").hide();
            //$("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            //  $("#e_REUSE_FLAG").hide();
            $("#e_DISTANCE_FROM").hide();
            $("#e_DISTANCE_TO").hide();
            $("#e_INDOOR_PRICE").hide();
            $("#e_OUTDOOR_PRICE").hide();
            $("#e_INTERNET_PRICE").hide();
            $("#e_VOIP_PRICE").hide();
            $("#e_PLAYBOX_PRICE").hide();
            $("#e_MECH_PRICE").hide();
            $("#e_ADDRESS_ID").hide();
            $("#e_EVENT_TYPE").hide();
            //$("#e_SAME_DAY").hide();
            //$("#e_SUBCONTRACT_LOCATION").hide();
            $(".tb4_TeamID").hide();

        }
        else {
            //$("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table6");
            ////  $("#e_ORDER_TYPE").hide();
            //$("#e_SUBCONTRACT_TYPE").hide();
            //$("#e_SUBCONTRACT_SUB_TYPE").hide();
            //$("#e_VENDOR_CODE").hide();
            //// $("#e_TECHNOLOGY").hide();
            ////  $("#e_TOTAL_PRICE").hide();
            //$("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            //$("#e_REUSE_FLAG").hide();
            //$("#e_DISTANCE_FROM").hide();
            //$("#e_DISTANCE_TO").hide();
            //$("#e_INDOOR_PRICE").hide();
            //$("#e_OUTDOOR_PRICE").hide();
            //$("#e_INTERNET_PRICE").hide();
            //$("#e_VOIP_PRICE").hide();
            //$("#e_PLAYBOX_PRICE").hide();
            //$("#e_MECH_PRICE").hide();
            //$("#e_ADDRESS_ID").hide();
            //$("#e_EVENT_TYPE").hide();
            //$("#e_SAME_DAY").hide();
            //$("#e_SUBCONTRACT_LOCATION").hide();
            //$(".tb4_TeamID").hide();

            //$("#ConfigCostInsPopup").prev().find(".k-window-title").text("Configuration CostInstallation Table1");
            $("#ConfigCostInsPopup").prev().find(".k-window-title").text("@H_CONFIG_LOOKUP"); //Configuration Look up Name
            //  $("#e_ORDER_TYPE").hide();
            //  $("#e_SUBCONTRACT_TYPE").hide();
            //  $("#e_SUBCONTRACT_SUB_TYPE").hide();
            // $("#e_VENDOR_CODE").hide();
            // $("#e_TECHNOLOGY").hide();
            //$("#e_TOTAL_PRICE").hide();
            //$("#e_EVENT_CODE").hide();
            //$("#e_ROOM_FLAG").hide();
            //$("#e_REUSE_FLAG").hide();
            $("#e_DISTANCE_FROM").hide();
            $("#e_DISTANCE_TO").hide();
            $("#e_INDOOR_PRICE").hide();
            $("#e_OUTDOOR_PRICE").hide();
            $("#e_INTERNET_PRICE").hide();
            $("#e_VOIP_PRICE").hide();
            $("#e_PLAYBOX_PRICE").hide();
            $("#e_MECH_PRICE").hide();
            $("#e_ADDRESS_ID").hide();
            $("#e_EVENT_TYPE").hide();
            //$("#e_SAME_DAY").hide();
            //$("#e_SUBCONTRACT_LOCATION").hide();
            $(".tb4_TeamID").hide();


        }

    }

    function ConfirmUpdate() {
        var grid = $("#gridAddselect").data("kendoGrid");
        var isEditing = grid.editable;

        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }
        var addmodel = defaultAddData();
        var chkadd = ValidationAddData();
        if (chkadd == true) {
            $.ajax({
                type: "POST",
                url: "/ConfigurationCostInstallation/AddNewCostInstallationDataTable",
                data: {
                    dataS: JSON.stringify(addmodel)
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response.code != "-1") {
                            var title = "System Information";
                            showMSG("success", response.msg, title);
                            $("#ConfigCostInsPopup").data("kendoWindow").close();
                            // var grid = $("#gridCostTable1").data("kendoGrid");
                            var grid = getGridName();
                            grid.dataSource.page(1);
                        }
                        else {
                            $("#ConfigCostInsPopup").data("kendoWindow").close();
                            var title = "System Information";
                            showMSG("error", response.msg, title);
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }
        $("#RULE_ID").show();
    }

    function AddnewRow_Edit() {
        var grid = $("#gridEditselect").data("kendoGrid");
        var dataSource = grid.dataSource;
        var total = dataSource.data().length;
        var id = 0;
        // Find the last index of the row containing 'default'
        var lastDefaultIndex = -1;
        dataSource.view().forEach((row, index) => {
            if (Object.values(row).includes("Default")) {
                lastDefaultIndex = index;
            }
        });

        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }
        // Add a new row after the last default row
        if (lastDefaultIndex > -1) {
            //var newRow = { id: new Date().getTime(), name: "New Row", value: "New Value" };
            id = total + 1;
            var newRow = {
                id: id,
                base_price: null,
                effective_date_start: new Date(new Date().setDate(new Date().getDate() + 1)),
                effective_date_to: null
            };
            dataSource.insert(lastDefaultIndex + 1, newRow);
            var newRowIndex = lastDefaultIndex + 1;
            grid.editRow(grid.tbody.find("tr:eq(" + newRowIndex + ")"));
        }
    }
    function AddDefault_Edit() {
        var grid = $("#gridEditselect").data("kendoGrid");
        var dataSource = grid.dataSource;
        var total = dataSource.data().length;
        var count_row = JSON.stringify(total);
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/getDefaultFirstRow_Edit",
            data: {
                dataS: count_row
            },
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                        var xx = response;
                        var jsonObject = JSON.parse(response);

                        var grid = $("#gridEditselect").data("kendoGrid");
                        var dataSource = grid.dataSource;
                        var currentDate = new Date();
                        if (dataSource.total() > 0) {
                            var data = dataSource.view();
                            var numberOfRowsDefault = countRowsDefaultWithValue("Default");
                            var defaultItems = [];
                            for (var i = 0; i < numberOfRowsDefault && i < data.length; i++) {
                                defaultItems.push(data[i]);
                            }
                            if (defaultItems.length > 0) {
                                var sort_defaultItems = defaultItems.sort((a, b) => a.id - b.id);
                                // หาข้อมูลที่มี id มากที่สุด
                                var maxIdItem = sort_defaultItems.reduce((max, item) => (item.id > max.id ? item : max), data[0]);
                                if (maxIdItem.effective_date_to == null) {
                                    //alert("Please choose effective date to of row before.");
                                    var title = "System Information";
                                    var message = "@M_EFFECTIVE_DATE_END";
                                    popUpMeassage(title, message);
                                    return;
                                }
                                else {
                                    var old_date_to = maxIdItem.effective_date_to;
                                    old_date_to.setHours(0, 0, 0, 0);
                                    var newEffectiveDateStart = new Date(old_date_to);
                                    newEffectiveDateStart.setDate(newEffectiveDateStart.getDate() + 1);
                                    if (newEffectiveDateStart < currentDate) {
                                        var dataDate = new Date(new Date().setDate(new Date().getDate() + 1));
                                        newEffectiveDateStart = dataDate;
                                    }

                                }
                            }
                            else {
                                //alert("Invalid add row Default.");
                                var title = "System Information";
                                var message = "Invalid add row Default";
                                popUpMeassage(title, message);
                                return;
                            }



                        }
                        jsonObject.effective_date_start = new Date(newEffectiveDateStart);
                        var isEditing = grid.editable;

                        if (isEditing) {
                            // If currently editing, show an alert or handle as needed
                            //alert("Please save or cancel the current edit before adding a new row.");
                            var title = "System Information";
                            var message = "@M_ACTIVE_ROW";
                            popUpMeassage(title, message);
                            return;
                        }
                        dataSource.insert(0, jsonObject);
                        dataSource.page(dataSource.totalPages());
                        grid.editRow(grid.tbody.children().first());
                    }
                    else {
                        null;
                    }
                }

            },
            failure: function () {
                console.log(msg);
            }
        });


    }
    var originalValues_edit = {};
    var originalValues_edit_List = [];

    $("#gridEditselect").kendoGrid({
        dataSource: {
            data: [],
            schema: {
                model: {
                    id: "id",
                    fields: {
                        base_price: { type: "string", validation: { maxlength: 50 } },
                        effective_date_start: { type: "date" },
                        effective_date_to: { type: "date" }
                    }
                }
            },
            pageSize: 20
        },
        columns: ColumnGenerationEdit(),
        pageable: true,
        scrollable: true,
        resizable: true,
        editable: "inline",
        dataBound: function (e) {
            var grid = $("#gridEditselect").data("kendoGrid") ;
            var currentDate = new Date();
            grid.tbody.find("tr").each(function () {
                var dataItem = grid.dataItem(this);

                if (dataItem.id !== 9999) {
                    if (dataItem.effective_date_start !== null) {
                        var dateStart = dataItem.effective_date_start;
                        dateStart.setHours(0, 0, 0, 0);
                        //var dateStartTmp = dataItem.effective_date_start;
                        //var tmpArr = dateStartTmp.split('/');
                        //var dateStart = new Date(tmpArr[2], tmpArr[1], tmpArr[0]);
                        //if (dateStart != undefined) {
                        //    //console.log(dateStart)
                        //    dateStart.setHours(0, 0, 0, 0);
                        //}
                    }

                    if (dataItem.effective_date_to !== null) {
                        var dateEnd = dataItem.effective_date_to;
                        dateEnd.setHours(0, 0, 0, 0);
                        //var dateEndTmp = dataItem.effective_date_to;
                        //var tmpArr = dateEndTmp.split('/');
                        //var dateEnd = new Date(tmpArr[2], tmpArr[1], tmpArr[0]);
                        //if (dateEnd != undefined) {
                        //    dateEnd.setHours(0, 0, 0, 0);
                        //}
                    }

                    // Check conditions and hide the delete button
                    if ((dateStart < currentDate && (dateEnd == null || dateEnd == "" || dateEnd > currentDate))) {
                        // Find the delete button in the current row and hide it
                        $(this).find(".k-grid-delete,.k-grid-detail").hide();
                    }
                    if ((dateStart < currentDate) && (dateEnd < currentDate) && (dateEnd !== null)) {
                        $(this).find(".k-grid-edit, .k-grid-delete,.k-grid-detail").hide();
                        $(this).addClass("disabled-row");

                    }
                    if ((dateStart < currentDate) && (dateEnd == null)) {
                        // Find the delete button in the current row and hide it
                        $(this).find(".k-grid-delete,.k-grid-detail").hide();

                    }

                    var numberOfRowsDefault = countRowsDefaultWithValue("Default");
                    var old_value = originalValues_edit;
                    var id = dataItem.id;
                    var defaultItems = [];
                    for (var i = 0; i < numberOfRowsDefault && i < old_value.length; i++) {
                        defaultItems.push(old_value[i]);
                    }
                    var find_default = defaultItems.filter(item => item.id === id);
                    if (find_default.length > 0) {
                        // Find the delete button in the current row and hide it
                        $(this).find(".k-grid-delete,.k-grid-detail").hide();
                    }
                }

            });
        },
        edit: function (e) {
            originalValues_edit_List.push(JSON.parse(JSON.stringify(e.model)));

            //ห้ามแก้ไขคอลลัม lookup id
            var lookupIDInput = e.container.find("input[name='LOOKUP_ID']");
            lookupIDInput.prop("disabled", true);

            var grid = $("#gridEditselect").data("kendoGrid");
            var model = e.model;
            var currentDate = new Date();

            var container = e.container; // The container of the current row
            var startDateParts = model.effective_date_start
            if (startDateParts < currentDate) {
                container.find("input").each(function () {
                    var input = $(this);
                    var name = input.attr("name"); // Get the name attribute of the input
                    // Enable only the input for the "date_end" column
                    if (name !== "effective_date_to") {

                        input.prop("disabled", true);

                        if (input.data("kendoDatePicker")) {
                            input.kendoDatePicker({
                                format: "dd/MM/yyyy",
                                enable: false
                            });
                        }

                        if (input.data("kendoDropDownList")) {
                            input.data("kendoDropDownList").enable(false);
                        }

                    }
                });

            }
        },
        save: function (e) {
            var model = e.model;
            var currentDate = new Date();

            if (!model.base_price) {
                //alert(" Base Price is required field.");
                var title = "System Information";
                var message = "@M_REQUIRE_FIELD";
                popUpMeassage(title, message);
                e.preventDefault(); // ป้องกันการบันทึกข้อมูล
            }
            else {
                var input = model.base_price;
                var checkDecimal = rexDecimal(input);
                if (!checkDecimal) {
                    //alert("Invalid format Base Price ");
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'base_price');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    var message = str_message.replace("{0}", display_val);
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
            }

            if (model.v_max_distance) {
                var input_max_distance = model.v_max_distance;
                var checkDecimal = rexDecimal(input_max_distance);
                if (!checkDecimal && model.v_max_distance !== "Default") {
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'v_max_distance');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    //var message = "Invalid format Max Distance"
                    var message = str_message.replace("{0}", display_val)
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
            }


            if (model.v_over_cost_pm) {
                var input_v_over_cost_pm = model.v_over_cost_pm;
                var checkDecimal = rexDecimal(input_v_over_cost_pm);
                if (!checkDecimal && model.v_over_cost_pm !== "Default") {
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'v_over_cost_pm');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    //var message = "Invalid format Excess Price"
                    var message = str_message.replace("{0}", display_val)
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
            }

            var dateStart = model.effective_date_start;
            dateStart.setHours(0, 0, 0, 0);
            if (model.effective_date_to !== null) {
                var dateEnd = model.effective_date_to;
                dateEnd.setHours(0, 0, 0, 0);
            }

            var str_date_Start = kendo.toString(dateStart, "dd/MM/yyyy");
            var str_date_End = kendo.toString(dateEnd, "dd/MM/yyyy");
            var old_value = originalValues_edit;
            var row_old_value = old_value.filter(item => item.id === model.id);

            if (row_old_value.length == 0)
            {
                var date_start_old_value = null;
            }
            else
            {
                var date_start_old_value = row_old_value[0].effective_date_start;
            }


            if (dateStart < currentDate && date_start_old_value == dateStart) {
                if (str_date_Start == str_date_End) {
                    //alert("effective_date_start and effective_date_to cannot be the same.");
                    var title = "System Information";
                    var message = "@M_VALIDATE_EFFECTIVE";
                    popUpMeassage(title, message);
                    e.preventDefault();
                }
                else {
                    if (dateEnd <= currentDate) {
                        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                        var filterColumnList = columnList.filter(p => p.LovValue1 === 'effective_date_to');
                        var display_val = filterColumnList[0].Text;
                        var str_message = "@M_INVALID_PATTERN";
                        var title = "System Information";
                        //var message = "Invalid effective_date_to"
                        var message = str_message.replace("{0}", display_val);
                        popUpMeassage(title, message);
                        e.preventDefault();
                    }
                }
            }
            else if (dateStart < currentDate && (date_start_old_value > currentDate || date_start_old_value == null)) {
                var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                var filterColumnList = columnList.filter(p => p.LovValue1 === 'effective_date_start');
                var display_val = filterColumnList[0].Text;
                var str_message = "@M_INVALID_PATTERN";
                var title = "System Information";
                //var message = "Invalid effective_date_start"
                var message = str_message.replace("{0}", display_val);
                popUpMeassage(title, message);
                e.preventDefault();
                if (dateStart > dateEnd) {
                    model.set("effective_date_to", null);
                }
            }
            else if (dateStart > currentDate && str_date_Start != str_date_End) {
                if (dateStart > dateEnd) {
                    model.set("effective_date_to", null);
                }
            }
            else if (str_date_Start == str_date_End) {
                var title = "System Information";
                //var message = "effective_date_start and effective_date_to cannot be the same"
                var message = "@M_VALIDATE_EFFECTIVE";
                popUpMeassage(title, message);
                e.preventDefault();
            }

        },
        cancel: function (e) {

            var grid = $("#gridEditselect").data("kendoGrid");

            grid.dataSource.add({ id: 9999 });
            var totalRecords = grid.dataSource.total();
            totalRecords = totalRecords - 1;
            var dataItem = grid.dataSource.at(totalRecords);
            grid.dataSource.remove(dataItem);
            var model = e.model
            if (model.base_price == null) {
                grid.dataSource.remove(model);
            }

            if (originalValues_edit_List !== null) {
                // ดึงข้อมูลจาก dataSource.view()
                var gridselect = $("#gridEditselect").data("kendoGrid");
                var data = gridselect.dataSource.view();
                var page = gridselect.dataSource.page(); // Get the current page number
                var pageSize = gridselect.dataSource.pageSize();
                // Calculate the index of the first row on the current page
                var startIndex = pageSize * (page - 1);

                var result = data.find(item => item.base_price === null);
                if (result != null) {
                    if (page == 1) {
                        var id = result.id;
                        var itemToRemove = gridselect.dataSource.view()[id - 1]; // ดึงข้อมูลของแถวที่ต้องการลบ
                        gridselect.dataSource.remove(itemToRemove); // ลบแถวจาก dataSource
                        // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                        gridselect.dataSource.sync();
                    }
                    else {
                        var id = result.id;
                        var row_index = id - 1 - (startIndex);
                        var itemToRemove = gridselect.dataSource.view()[row_index]; // ดึงข้อมูลของแถวที่ต้องการลบ
                        gridselect.dataSource.remove(itemToRemove); // ลบแถวจาก dataSource
                        // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                        gridselect.dataSource.sync();
                        if (row_index == 0) {
                            gridselect.dataSource.page(page - 1);
                        }
                    }

                }
                else {
                    var rowId = e.model.id;
                    var row_index = rowId - 1 - (startIndex);
                    if (page == 1) {
                        var oldvalueList = originalValues_edit_List.filter(item => item.id === rowId);
                        var lengeOldvalueList = oldvalueList.length;
                        var selectValue = oldvalueList[lengeOldvalueList - 1] //เลือก value ก่อนหน้า
                        var itemGrid = grid.dataSource.get(rowId); // ดึงข้อมูลที่มี id ตรงกัน
                        if (itemGrid) {
                            if (selectValue.base_price == null) {
                                gridselect.dataSource.remove(itemGrid); // itemToRemove ลบแถวจาก dataSource
                                // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                                gridselect.dataSource.sync();
                            }
                            else {
                                // อัปเดตค่าทั้งหมดในอ็อบเจกต์
                                Object.keys(selectValue).forEach(key => {
                                    itemGrid.set(key, selectValue[key]);
                                });
                            }

                        }
                    }
                    else {
                        var row_index = rowId - 1 - (startIndex);
                        var oldvalueList = originalValues_edit_List.filter(item => item.id === rowId);
                        var lengeOldvalueList = oldvalueList.length;
                        var selectValue = oldvalueList[lengeOldvalueList - 1] //เลือก value ก่อนหน้า
                        var itemGrid = grid.dataSource.get(rowId); // ดึงข้อมูลที่มี id ตรงกัน
                        if (itemGrid) {
                            if (selectValue.base_price == null) {
                                gridselect.dataSource.remove(itemGrid); // itemToRemove ลบแถวจาก dataSource
                                // ถ้าต้องการทำการบันทึกการเปลี่ยนแปลง
                                gridselect.dataSource.sync();
                                if (row_index == 0) {
                                    gridselect.dataSource.page(page - 1);
                                }
                            }
                            else {
                                // อัปเดตค่าทั้งหมดในอ็อบเจกต์
                                Object.keys(selectValue).forEach(key => {
                                    itemGrid.set(key, selectValue[key]);
                                });
                            }

                        }

                    }

                }

            }
        }
    });

    function showDeleteConfirmationEditGrid(e) {

        var model = e.model;

        var grid = $("#gridEditselect").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr")); // รับข้อมูลของแถวที่ถูกเลือก
        currentDeleteObject = dataItem;
        currentGridDelete = grid;

        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }

        var title = "System Information";
        $("#ValidatePopupDelete").data("kendoWindow").center().open();
        $("#ValidatePopupDelete").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
        $("#ValidatePopupDelete").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#B7B7B7');

    }

    function ColumnGenerationEdit() {
        column = [];
        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        column.push({
            command: [
                { name: "edit", text: "Edit" },
                { name: "detail", text: "Delete", click: showDeleteConfirmationEditGrid }

            ], title: "@C_ACTION", width: 180
        });
        column.push({ field: "LOOKUP_ID", title: "Lookup ID", width: 280 });
        var filterConfig = columnList.filter(p => p.LovValue2 === 'Configuration')
        for (var i = 0; i < filterConfig.length; i++) {
            console.log(filterConfig[i]);
            var datafilterConfig = filterConfig[i];
            if (datafilterConfig.Text == "Effective Date Start") {
                column.push({ field: "effective_date_start", title: datafilterConfig.Text, format: "{0: dd/MM/yyyy}", editor: dateFromEditor_Edit, width: 280});
            }
            else if (datafilterConfig.Text == "Effective Date End") {
                column.push({ field: "effective_date_to", title: datafilterConfig.Text, format: "{0: dd/MM/yyyy}", editor: dateEndEditor_Edit, width: 280});
            }
            else if (datafilterConfig.Text == "Base Price")
            {
                column.push({ field: "base_price", title: datafilterConfig.Text, width: 280});
            }
            else {
                column.push({ field: datafilterConfig.LovValue1, title: datafilterConfig.Text, width: 280});
            }
        }

        var filterNonConfig = columnList.filter(p => p.LovValue2 !== 'Configuration')
        for (var j = 0; j < filterNonConfig.length; j++) {
            console.log(filterNonConfig[j]);
            var datafilterNonConfig = filterNonConfig[j];
            if (datafilterNonConfig.DefaultValue == "DROPDOWNLIST") {
                column.push({ field: datafilterNonConfig.LovValue1, title: datafilterNonConfig.Text, editor: valueDropDownEdit, hidden: true, width: 280});
            }
            else {
                column.push({ field: datafilterNonConfig.LovValue1, title: datafilterNonConfig.Text, editor: checkFirstRowEdit, hidden: true, width: 280});
            }
        }
        return column;
    }

    //var oldParamValue = [];
    var oldParamValue ;
    var distinct_oldParamValue;


    function EditLookup() {
        $("#MyPopupLoading").data("kendoWindow").open();
        $("#MyPopupLoading").data("kendoWindow").center();

        // Set timeout for loading
        setTimeout(function () {
            EditLookupDetail();
        }, 3000);
    }

    function EditLookupDetail() {
        oldParamValue = [];
        $("#RULE_ID").show();
        //$("#_SAME_DAY").data('kendoDropDownList').enable(true);

        //$('#_SAME_DAY').attr("disabled", false);
        //   $("#_EXPDATE").data("kendoDatePicker").enable(true);
        //showField();
        $("#_saveType").val('E');

        //var selectRULEID = $('#_ruleselect').val();
        var selectLookupname = $('#_lookupname').val();

        var tbselect = $('#_tableselect').val();
        debugger;
        setFieldInput(tbselect);
        clearForEdit();
        //var data;
        var columnArray;
        var ontop_flag;
        var ontop_lookup;
        var ontop_lookup_array = [];
        var lookup_cur = [];

        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/GetEditLookupData",
            data: { lookupName: selectLookupname },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response.code == "0") {
                    columnArray = response.param_name.split(",");
                    ontop_flag = response.ontop_flag;
                    ontop_lookup = response.ontop_lookup;
                    lookup_cur = response.lookup_cur;
                    $("#_U_LOOKUP_NAME").val(selectLookupname);
                    $("#ConfigCostEditPopup").data("kendoWindow").center().open();
                    //console.log(lookup_cur);

                }

            },
            failure: function (msg) {
                $("#MyPopupLoading").data("kendoWindow").close();
            }
        });

        var grid = $("#gridEditselect").data("kendoGrid");
        // checkbox parameter
        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        for (var i = 0; i < paramList.length; i++) {
            var param = paramList[i];
            for (var j = 0; j < columnArray.length; j++) {
                var col = columnArray[j];
                var id = "u_" + col;
                var checkbox = document.getElementById(id);
                if (param == col) {
                    if (col == "base_price" || col == "effective_date_start" || col == "effective_date_to") {
                        if (!checkbox.checked) {
                            checkbox.checked = true;
                        }
                        checkbox.disabled = true;
                    }
                    else {
                        if (!checkbox.checked) {
                            checkbox.checked = true;
                            var column = grid.columns.find(c => c.field === col);
                            if (column) {
                                if (column.hidden) {
                                    grid.showColumn(col);
                                }
                            }
                        }

                    }
                    oldParamValue.push(col);
                }
                else {
                    if (!checkbox.checked) {
                        checkbox.checked = false;
                    }
                }

            }
        }
        distinct_oldParamValue = oldParamValue.filter((value, index, self) => self.indexOf(value) === index);
        //var originalValues_edit = [];

        //ontop flag
        var checkbox_ontop_flag = document.getElementById("U_ONTOP_FLAG");
        var ddlOntop_edit = $("#ddlONTOP_Edit").data('kendoMultiSelect');
        if (ontop_flag == "Y") {
            if (!checkbox_ontop_flag.checked) {
                checkbox_ontop_flag.checked = true;
                ddlOntop_edit.value([]);
                ddlOntop_edit.enable(false);
            }
        }
        else {
            if (!checkbox_ontop_flag.checked) {
                checkbox_ontop_flag.checked = false;
            }
        }

        var grid = $("#gridEditselect").data("kendoGrid");
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/SelectListEditValue",
            dataType: 'json',
            contentType: 'application/json',
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                        var xx = response;
                        var jsonObject = JSON.parse(response);
                        //console.log(jsonObject)
                        const formattedData = processRows(jsonObject);
                        originalValues_edit = formattedData;
                        originalValues_edit.forEach(item => {
                            // push ข้อมูลเข้าไปใน resultList
                            originalValues_edit_List.push(item);
                        });
                        grid.dataSource.data(formattedData);
                        //formattedData.forEach(function (row) {
                        //    grid.dataSource.add(row);
                        //});

                        $("#MyPopupLoading").data("kendoWindow").close();
                    }
                    else {
                        null;
                        $("#MyPopupLoading").data("kendoWindow").close();
                    }
                }

            },
            failure: function () {
                console.log(msg);
                $("#MyPopupLoading").data("kendoWindow").close();
            }
        });

        var check_effective_date_start = 0;
        var currentDate = new Date();
        lookup_cur.forEach(item => {
            var effectiveDate = parseDateString(item.effective_date_start);
            if (effectiveDate < currentDate) {
                check_effective_date_start += 1;
            }
        });

        //clear datasource multiselect
        var old_Ontop_obj_clear;
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/SelectOntop",
            dataType: "json",
            async: false,
            success: function (response) {
                old_Ontop_obj_clear = response;
            },
            failure: function (msg) {
            }
        });

        var ddlONTOP_Edit_clear = $("#ddlONTOP_Edit").data("kendoMultiSelect");
        var ddlONTOP_Edit_clear_datasource = ddlONTOP_Edit_clear.dataSource.view();
        var get_Edit_clear_datasource = ddlONTOP_Edit_clear_datasource.map(item => ({ LOOKUP_NAME: item.LOOKUP_NAME }));
        //convert to list clear
        var old_Ontop_list_clear = Array.from(new Set(old_Ontop_obj_clear.map(item => item.LOOKUP_NAME)));
        var old_get_Edit_clear_datasource = Array.from(new Set(get_Edit_clear_datasource.map(item => item.LOOKUP_NAME)));
        var clear_datasource_list = old_get_Edit_clear_datasource.filter(item => !old_Ontop_list_clear.includes(item));
        if (clear_datasource_list.length > 0) {
            clear_datasource_list.forEach(function (value) {
                var itemsToRemove = ddlONTOP_Edit_clear.dataSource.data().filter(item => item.LOOKUP_NAME === value);
                itemsToRemove.forEach(item => {
                    ddlONTOP_Edit_clear.dataSource.remove(item);
                });
                ddlONTOP_Edit_clear.refresh();
            });

        }



        if (check_effective_date_start > 0) {
            var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
            var paramList = columnList.map(x => x.LovValue1);
            for (var i = 0; i < paramList.length; i++) {
                var id = "u_" + paramList[i];
                var checkbox = document.getElementById(id);
                checkbox.disabled = true;
            }
            var ddlONTOP_Edit = $("#ddlONTOP_Edit").data("kendoMultiSelect");
            ddlONTOP_Edit.value([]);
            if (ontop_lookup !== "" && ontop_lookup !== null && ontop_lookup !== "null") {
                ontop_lookup_array = ontop_lookup.split(',');
                var old_Ontop_list = Array.from(new Set(old_Ontop_obj_clear.map(item => item.LOOKUP_NAME)));
                var include_ontop = ontop_lookup_array.filter(item => !old_Ontop_list.includes(item));
                var result_ontop_obj = Array.from(new Set(include_ontop)).map(lookup => ({ LOOKUP_NAME: lookup }));
                if (result_ontop_obj.length > 0) {
                    result_ontop_obj.forEach(function (value) {
                        ddlONTOP_Edit.dataSource.add(value);
                    });
                }
                ddlONTOP_Edit.value(ontop_lookup_array);
                ddlONTOP_Edit.refresh();
            }

            ddlONTOP_Edit.enable(false);
            var checkbox_ontop_flag = document.getElementById("U_ONTOP_FLAG");
            checkbox_ontop_flag.disabled = true;
        }
        else {
            var _ddlONTOP_Edit = $("#ddlONTOP_Edit").data("kendoMultiSelect");
            _ddlONTOP_Edit.value([]);
            //_ddlONTOP_Edit.dataSource.read();
            _ddlONTOP_Edit.enable(true);


            if (ontop_lookup !== "" && ontop_lookup !== null && ontop_lookup !== "null") {
                ontop_lookup_array = ontop_lookup.split(',');
                var itemsToDisable  = [];
                var _old_Ontop_list = Array.from(new Set(old_Ontop_obj_clear.map(item => item.LOOKUP_NAME)));
                var _include_ontop = ontop_lookup_array.filter(item => !_old_Ontop_list.includes(item));
                var _result_ontop_obj = Array.from(new Set(_include_ontop)).map(lookup => ({ LOOKUP_NAME: lookup }));
                if (_result_ontop_obj.length > 0) {
                    _result_ontop_obj.forEach(function (value) {
                        _ddlONTOP_Edit.dataSource.add(value);
                        var value_map = value.LOOKUP_NAME;
                        itemsToDisable .push(value_map);
                    });
                }
                _ddlONTOP_Edit.value(ontop_lookup_array);
                _ddlONTOP_Edit.refresh();

                if (itemsToDisable.length > 0) {
                    var positions = []; // อาเรย์สำหรับเก็บตำแหน่ง
                    var dataSource = _ddlONTOP_Edit.dataSource.view(); // ดึงข้อมูลจาก dataSource
                    // หาตำแหน่งของ targetValues ใน dataSource
                    itemsToDisable.forEach(function (targetValue) {
                        for (var i = 0; i < dataSource.length; i++) {
                            if (dataSource[i].LOOKUP_NAME === targetValue) {
                                positions.push(i); // เพิ่มตำแหน่งลงในอาเรย์
                            }
                        }
                    });

                    if (positions.length > 0) {
                        positions.forEach(function (index) {
                            var item = _ddlONTOP_Edit.ul.children("li").eq(index);
                            item.hide(); // ซ่อนรายการ
                        });
                    }
                }
            }
            var checkbox_ontop_flag = document.getElementById("U_ONTOP_FLAG");
            checkbox_ontop_flag.disabled = false;
        }
    }
    function parseDateString(dateString) {
        if (dateString != null) {
            var [day, month, year] = dateString.split('/').map(Number);
            var data_date = new Date(year, month - 1, day);
            return data_date;
        }
        else {
            return null
        }

    }
    // Function to process each row and format the date fields
    function processRows(data) {
        return data.map(row => {
            return {
                ...row,
                effective_date_start: parseDateString(row.effective_date_start),
                effective_date_to: parseDateString(row.effective_date_to),
            };
        });
    }

    function dateFromEditor_Edit(container, options) {
        var datePickerFrom = $("<input id='_effective_date_start'  name='" + options.field + "'/>")
            .appendTo(container)
            .on('keydown', function (e) {
                e.preventDefault();
            })
            .kendoDatePicker({
                format: "dd/MM/yyyy",
                //min: dataDate,  // Example: minimum date
                //max: currentDate
                change: OnchangeDateFrom_Edit
            }).data("kendoDatePicker");
        // Set the value
        datePickerFrom.value(options.model[options.field]);
    }
    function dateEndEditor_Edit(container, options) {
        var datepickerStart = $("#_effective_date_start").data("kendoDatePicker").value();
        var minDate = new Date(datepickerStart);
        var datePickerEnd = $("<input id='_effective_date_to' name='" + options.field + "'/>")
            .appendTo(container)
            .on('keydown', function (e) {
                e.preventDefault();
            })
            .kendoDatePicker({
                format: "dd/MM/yyyy",
                min: minDate,  // Example: minimum date
                //max: currentDate
                change: OnchangeDateFrom_Edit
            }).data("kendoDatePicker");

        // Set the value
        datePickerEnd.value(options.model[options.field]);
    }
    function OnchangeDateFrom_Edit(e) {
        var pickDate = this.value();
        if (pickDate) {
            var minDate = new Date(pickDate);
            $("#_effective_date_to").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }
    }

    function passValueColumnEdit(element) {
        var isChecked = $(element).prop("checked");
        console.log(element);
        console.log(element.id);
        var element_edit_id = element.id.slice(2);
        console.log(element.id);
        var grid = $("#gridEditselect").data("kendoGrid");
        var column = grid.columns.find(c => c.field === element_edit_id);
        if (element_edit_id == "p_Reject_reason") {
            if (isChecked) {
                var chk_symtom_group = document.getElementById("u_v_symptom_group");
                if (chk_symtom_group.checked) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
                else {
                    var title = "System Information";
                    //var message = "Please checked on Symptom Group";
                    var message = "@M_SELECTED_SYMPNAME";
                    popUpMeassage(title, message);
                    $(element).prop("checked", false);
                }
            }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
            }
        }
        else if (element_edit_id == "v_symptom_group") {
            if (!isChecked) {
                var chk_symtom_name = document.getElementById("u_p_Reject_reason");
                if (chk_symtom_name.checked) {
                    var title = "System Information";
                    //var message = "Please unchecked on Symptom Name";
                    var message = "@M_UNCHECK_SYMPGROUP";
                    popUpMeassage(title, message);
                    $(element).prop("checked", true);
                }
                else {
                    if (column) {
                        if (column.hidden) {
                            grid.showColumn(element_edit_id);
                        } else {
                            grid.hideColumn(element_edit_id);
                        }
                    }
                }
            }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
            }
        }
        else if (element_edit_id == "v_province") {
            if (!isChecked) {
                var chk_district = document.getElementById("u_v_district");
                var chk_sub_district = document.getElementById("u_v_subdistrict");
                if (chk_district.checked || chk_sub_district.checked) {
                    var title = "System Information";
                    //var message = "Please unchecked on District or Sub District too";
                    var message = "@M_UNCHECK_PROVINCE";
                    popUpMeassage(title, message);
                    $(element).prop("checked", true);
                }
                else {
                    if (column) {
                        if (column.hidden) {
                            grid.showColumn(element_edit_id);
                        } else {
                            grid.hideColumn(element_edit_id);
                        }
                    }
                }
            }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
            }
        }
        else if (element_edit_id == "v_district") {
             if (isChecked) {
                 var chk_province = document.getElementById("u_v_province");
                 if (chk_province.checked) {
                     if (column.hidden) {
                         grid.showColumn(element_edit_id);
                     } else {
                         grid.hideColumn(element_edit_id);
                     }
                 }
                 else {
                     var title = "System Information";
                     //var message = "Please checked on Province";
                     var message = "@M_CHECKED_DIST";
                     popUpMeassage(title, message);
                     $(element).prop("checked", false);
                 }
             }
             else {
                 var chk_sub_district = document.getElementById("u_v_subdistrict");
                 if (chk_sub_district.checked) {
                     var title = "System Information";
                     //var message = "Please unchecked on Sub District before";
                     var message = "@M_UNCHECK_DIST";
                     popUpMeassage(title, message);
                     $(element).prop("checked", true);
                 }
                 else {
                     if (column) {
                        if (column.hidden) {
                            grid.showColumn(element_edit_id);
                        } else {
                            grid.hideColumn(element_edit_id);
                        }
                     }
                 }
             }
        }
        else if (element_edit_id == "v_subdistrict") {
             if (isChecked) {
                 var chk_province = document.getElementById("u_v_province");
                 var chk_district = document.getElementById("u_v_district");
                 if (chk_province.checked && chk_district.checked) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
                else {
                     var title = "System Information";
                     //var message = "Please checked on Province and District";
                     var message = "@M_CHECKED_PROVDIST";
                     popUpMeassage(title, message);
                    $(element).prop("checked", false);
                }
             }
             else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
             }
        }
        else {
             if (isChecked) {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                        var firstRow = grid.dataSource.at(0);
                        firstRow.set(element_edit_id, "Default");
                    } else {
                        grid.hideColumn(element_edit_id); //"@p_ORDER_TYPE"
                    }
                }
             }
            else {
                if (column) {
                    if (column.hidden) {
                        grid.showColumn(element_edit_id);
                    } else {
                        grid.hideColumn(element_edit_id);
                    }
                }
             }
        }
    }

    function checkFirstRowEdit(container, options) {
        var field = options.field;
        var grid = $("#gridEditselect").data("kendoGrid");
        var dataSource = grid.dataSource;
        var row = $(container).closest("tr"); // The row being edited
        var isFirstRow = row.index() === 0;
        var page = dataSource.page() === 1;
        var data = dataSource.view();
        var rowId = options.model.id;
        var numberOfRowsDefault = countRowsDefaultWithValue("Default");
        var listDefault = [];
        for (var i = 0; i < numberOfRowsDefault && i < data.length; i++) {
            var value = data[i];
            listDefault.push(value);
        }
        var fillterDefault = listDefault.filter(item => item.id === rowId);
        if (fillterDefault.length > 0) { //isFirstRow && page
            $('<input  id="' + options.field + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none" readonly/>').appendTo(container).on('keydown', function (e) {
                e.preventDefault();
            });
        }
        else {
            if (field == "v_over_cost_pm" || field == "v_max_distance") {
                $('<input id="' + options.field + '"  data-bind="value:' + options.field + '" style="width:100%;border:none" maxlength="50" onkeypress="return isNumberKeyEdit(' + options.field + ')" />').appendTo(container);
            }
            else {
                $('<input id="' + options.field + '"  data-bind="value:' + options.field + '" style="width:100%;border:none" maxlength="50" />').appendTo(container);
            }
        }

    }

    function isNumberKeyEdit(evt) {
        debugger;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function valueDropDownEdit(container, options) {
        console.log(options.field);
        var field = options.field;
        var grid = $("#gridEditselect").data("kendoGrid");
        var dataSource = grid.dataSource;

        var row = $(container).closest("tr"); // The row being edited
        var isFirstRow = row.index() === 0;

        var data = dataSource.view();
        var rowId = options.model.id;
        var numberOfRowsDefault = countRowsDefaultWithValue("Default");
        var listDefault = [];
        for (var i = 0; i < numberOfRowsDefault && i < data.length; i++) {
            var value = data[i];
            listDefault.push(value);
        }
        var fillterDefault = listDefault.filter(item => item.id === rowId);
        var dataField = null;
        if (field == 'v_symptom_group') {
            var symptomId = '_v_symptom_group';
            if (fillterDefault.length == 0) {
                $('<input id="' + symptomId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        change: onChangeSymptomGroup,
                        valuePrimitive: true,
                        suggest: true
                    });
            }
            else {
                $('<input  id="' + symptomId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });

            }
        }
        else if (field == 'p_Reject_reason') {
            var symptomNameId = '_p_Reject_reason';
            if (fillterDefault.length == 0) {
                $('<input id="' + symptomNameId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        valuePrimitive: true,
                        suggest: true
                    });
            }
            else {
                $('<input  id="' + symptomNameId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }

        }
        else if (field == 'v_province') {
            var provinceId = '_v_province';
            if (fillterDefault.length == 0) {
                $('<input id="' + provinceId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        change: onChangeProvince,
                        valuePrimitive: true,
                        suggest: true
                    });
            }
            else {
                $('<input  id="' + provinceId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }
        }
        else if (field == 'v_district') {
            var districtId = '_v_district';
            if (fillterDefault.length == 0) {
                $('<input id="' + districtId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        change: onChangeDistrict,
                        valuePrimitive: true,
                        suggest: true
                    });
            }
            else {
                $('<input  id="' + districtId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
            }
        }
        else if (field == 'v_subdistrict') {
            var sub_districtId = '_v_subdistrict';
             if (fillterDefault.length == 0) {
                $('<input id="' + sub_districtId + '"  data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        valuePrimitive: true,
                        suggest: true
                    });
             }
            else {
                $('<input  id="' + sub_districtId + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
             }
        }
        else {
             if (fillterDefault.length == 0) {
                $('<input id="' + options.field + '" data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        autoBind: false,
                        dataTextField: "LovValue1",
                        dataValueField: "LovValue1",
                        dataSource: {
                            transport: {
                                read: {
                                    url: "/ConfigurationLookup/GetvalueDropDownLov",
                                    data: { 'FieldName': options.field },
                                    dataType: "json"
                                }
                            },
                            schema: {
                                model: { id: "id" }
                            }
                        },
                        valuePrimitive: true,
                        suggest: true
                    });
             }
            else {
                $('<input  id="' + options.field + '"  data-bind="value:' + options.field + '"  style="width:100%;border:none"  readonly/>').appendTo(container).on('keydown', function (e) {
                    e.preventDefault();
                });
             }
        }
    }

    function ConfirmEditLookupDetail() {
        var grid = $("#gridEditselect").data("kendoGrid");
        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please save or cancel the current edit before adding a new row.");
            var title = "System Information";
            var message = "@M_ACTIVE_ROW";
            popUpMeassage(title, message);
            return;
        }

        var dataSource = grid.dataSource;
        var dataItems = dataSource.data();
        var checkDateSame = validateDatesEdit(grid);
        var checkEmptyValue = validateEmptyValueEdit(grid);
        if (!checkDateSame && !checkEmptyValue && dataItems.length > 0) {
            var allRowValues = getAllRowValuesEdit(grid);
            var data = JSON.stringify(allRowValues);
            console.log(allRowValues);
            console.log(data);
            var chkadd = ValidationEditDataLookup();
            var overlap_date = ValidateDateEdit(grid);
        }
        debugger;
        if (chkadd == true && overlap_date == false) { //&& overlap_date == false
            $.ajax({
                type: "POST",
                url: "/ConfigurationLookup/UpdateConfigurationLookupDetails",
                data: {
                    dataS: data
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response.code == "0") {
                            var title = "System Information";
                            showMSG("success", response.msg, title);
                            $("#ConfigCostEditPopup").data("kendoWindow").close();
                            // var grid = $("#gridCostTable1").data("kendoGrid");
                            //_Clear();
                            clearForEdit();
                            //_Search();
                            //var grid = getGridName();
                            //grid.dataSource.page(1);
                            $("#ddllTableList").data("kendoDropDownList").value("ALL");
                            $("#gridCostTable1").data('kendoGrid').dataSource.data([]);
                        }
                        else if (response.code == "1") {
                            $("#ConfigCostEditPopup").data("kendoWindow").close();
                            var title = "System Information";
                            showMSG("error", response.msg, title);
                            clearForEdit();
                        }
                        else {
                            $("#ConfigCostEditPopup").data("kendoWindow").close();
                            var title = "System Information";
                            showMSG("error", response.msg, title);
                            clearForEdit();
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }
    }

    function validateDatesEdit(grid) {
        var dataItems = grid.dataSource.view();
        var isValid = false;
        var check_date_same = 0;
        var check_date_default = 0;
        var check_date_start = 0;
        dataItems.forEach(function (item) {
            var startDateString = kendo.toString(item.effective_date_start, "dd/MM/yyyy");
            var endDateString = kendo.toString(item.effective_date_to, "dd/MM/yyyy");
            if (startDateString === endDateString) {
                check_date_same++;
            }
        });
        // เช็ค effective_date_start row default ต้องมากกว่า effective_date_to ของ row ก่อนหน้า
        var numberOfRowsDefault = countRowsDefaultWithValue("Default");

        var defaultItems = [];
        for (var i = 0; i < numberOfRowsDefault && i < dataItems.length; i ++) {
            defaultItems.push(dataItems[i]);
        }
        var sort_defaultItems = defaultItems.sort((a, b) => a.id - b.id);
        for (let i = 1; i < sort_defaultItems.length; i++) {
            if (sort_defaultItems[i - 1].effective_date_to !== null) {
                var previousEndDate = sort_defaultItems[i - 1].effective_date_to;
                previousEndDate.setHours(0, 0, 0, 0);
            }
            else {
                var previousEndDate = null;
            }


            var currentStartDate = sort_defaultItems[i].effective_date_start;
            currentStartDate.setHours(0, 0, 0, 0);

            if (previousEndDate !== null) {
                if (currentStartDate <= previousEndDate) {
                    var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                    var filterColumnList = columnList.filter(p => p.LovValue1 === 'effective_date_start');
                    var display_val = filterColumnList[0].Text;
                    var str_message = "@M_INVALID_PATTERN";
                    var title = "System Information";
                    //var message = "Invalid effective_date_start row default"
                    var message = str_message.replace("{0}", display_val + " row default ");
                    popUpMeassage(title, message);
                    check_date_default++;
                    break;
                }
            }
            else {
                var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                var filterColumnList = columnList.filter(p => p.LovValue1 === 'effective_date_to');
                var display_val = filterColumnList[0].Text;
                var str_message = "@M_INVALID_PATTERN";
                var title = "System Information";
                //var message = "Invalid effective_date_to row default"
                var message = str_message.replace("{0}", display_val + " row default ");
                popUpMeassage(title, message);
                check_date_default++;
                break;
            }

        }

        // เช็ค effective_date_start ของ row ปกติต้องมากกว่าวันที่ปัจจุบัน + 1
        for (var i = numberOfRowsDefault; i < dataItems.length; i ++) {
            if (dataItems[i].effective_date_start !== null) {
                var date_start = dataItems[i].effective_date_start;
                date_start.setHours(0, 0, 0, 0);

                var tomorow = new Date(new Date().setDate(new Date().getDate() + 1))
                tomorow.setHours(0, 0, 0, 0);

                var check_old_value = compare_oldvalue(dataItems[i]);
                if (check_old_value) {
                    if (date_start < tomorow) {
                        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
                        var filterColumnList = columnList.filter(p => p.LovValue1 === 'effective_date_start');
                        var display_val = filterColumnList[0].Text;
                        var str_message = "@M_INVALID_PATTERN";
                        var title = "System Information";
                        //var message = "Invalid effective_date_start row"
                        var message = str_message.replace("{0}", display_val);
                        popUpMeassage(title, message);
                        check_date_start++;
                        break;
                    }
                }

            }
        }

        if (check_date_same > 0) {
            var title = "System Information";
            //var message = "effective_date_start and effective_date_to cannot be the same"
            var message = "@M_VALIDATE_EFFECTIVE";
            popUpMeassage(title, message);
            isValid = true;
        }

        if (check_date_default > 0 || check_date_start > 0) {
            isValid = true;
        }

        debugger;
        return isValid
    }

    function compare_oldvalue(data) {
        var result = false;
        var get_id = data.id;
        debugger;
        var matchingItems = originalValues_edit.filter(item => item.id === get_id);
        debugger;
        if (matchingItems.length > 0) {
            if (data.effective_date_start !== null && matchingItems[0].effective_date_start !== null) {
                var current_date_start = data.effective_date_start;
                current_date_start.setHours(0, 0, 0, 0);
                var old_date_start = matchingItems[0].effective_date_start;
                old_date_start.setHours(0, 0, 0, 0);
                if (current_date_start == old_date_start) {
                    result = false;
                }
                else {
                    result = true;
                }

            }
        }
        else {
            result = true;
        }
        debugger;
        return result;
    }


    function getAllRowValuesEdit(grid) {
        var dataSource = grid.dataSource;

        var columns = grid.columns;
        var dataItems = dataSource.data();
        var lookup_name = $("#_U_LOOKUP_NAME").val()
        var ontop_flag = "";
        var ddlOntop = $("#ddlONTOP_Edit").data('kendoMultiSelect');
        var dataOntop = "";
        var chk_ontop_flag = document.getElementById("U_ONTOP_FLAG");
        var param_checkbox = [];
        var param_list = [];

        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        for (var param of paramList) {
            var valueparam = param;
            var checkbox = document.getElementById("u_" + valueparam);
            var isChecked = checkbox.checked;
            if (isChecked) {
                param_checkbox.push("u_" + valueparam);
                param_list.push(valueparam);
            }
            else {
                continue;
            }
        }
        param_list.push("LOOKUP_ID");

        if (chk_ontop_flag.checked) {
            ontop_flag = "Y";
        }
        else {
            ontop_flag = "N";
            var items = ddlOntop.value();
            if (items.length > 0) {
                for (var i = 0; i < items.length; i++) {
                    var value = items[i];
                    dataOntop += value + "|"
                }
                dataOntop = dataOntop.substr(0, dataOntop.length - 1);
            }
        }
        var lookuplist = { lookup_name: lookup_name, lookup_ontopflag: ontop_flag, lookup_ontop: dataOntop, lookup_header_list: [], user : "@username" };
        var list = [];
        var index = 0;
        for (var i = 0; i < dataItems.length; i++) {
            var item = dataItems[i];
            var rowData = {};
            list = new Array();
            for (var j = 1; j < columns.length; j++) {
                var field = columns[j].field;
                if (field == "id" || field == "base_price" || field == "effective_date_to" || field == "effective_date_start") {
                    var value = item[field];
                }
                else {
                    var value_field = item[field];
                    var value = value_field ? value_field.trim() : "";
                }
                var check = param_list.includes(field);
                if (check) {
                    if (field == "LOOKUP_ID" || field == "base_price") {
                        list.push({ "parameter_name": field, "lookup_flag": "", "parameter_value": value })
                    }
                    else if (field == "effective_date_start" || field == "effective_date_to") {
                        var datestring = kendo.toString(value, "dd/MM/yyyy");
                        list.push({ "parameter_name": field, "lookup_flag": "", "parameter_value": datestring })
                    }
                    else {
                        list.push({ "parameter_name": field, "lookup_flag": check_lookup_flag(grid, field), "parameter_value": value })
                    }
                }
                else {
                    var old_param = distinct_oldParamValue.includes(field);
                    debugger;
                    if (old_param) {
                        debugger;
                        list.push({ "parameter_name": field, "lookup_flag": "delete", "parameter_value": value })
                    }
                    else {
                        continue;
                    }
                }
            }

            lookuplist.lookup_header_list.push(list);
        }
        return lookuplist;
    }

    function validateEmptyValueEdit(grid) {
        var dataSource = grid.dataSource;
        var dataItems = dataSource.data();
        var columns = grid.columns;

        var param_checkbox = [];

        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        for (var param of paramList) {
            var valueparam = param;
            var checkbox = document.getElementById('u_' + valueparam);
            var isChecked = checkbox.checked;
            if (isChecked) {
                param_checkbox.push(valueparam);
            }
            else {
                continue;
            }
        }


        var check = 0;
        var isValid = false;
        for (var i = 0; i < dataItems.length; i++) {
            var item = dataItems[i];
            for (var j = 1; j < columns.length; j++) {
                var field = columns[j].field;
                if (field == "id" || field == "base_price" || field == "effective_date_to" || field == "effective_date_start") {
                    var value = item[field];
                }
                else {
                    var value_field = item[field];
                    var value = value_field ? value_field.trim() : "";
                }
                for (var k = 0; k < param_checkbox.length; k++) {
                    if (param_checkbox[k] == field) {
                        if ((value == "" || value == null) && param_checkbox[k] !== "effective_date_to")
                        {
                            check++;
                            debugger;
                        }
                    }
                }

            }
        }

        if (check > 0) {
            //alert("parameter value not empty.");
            var title = "System Information";
            var message = "@M_VALIDATE_BLANK";
            popUpMeassage(title, message);
            isValid = true;
        }
        return isValid
    }

    function check_lookup_flag(grid, field_name) {

        //ดึงค่า paramname จากเบส
        var param_name_from_base = [];
        $.ajax({
            type: "POST",
            url: "/ConfigurationLookup/getListParamNameFromBase",
            dataType: "json",
            async: false,
            success: function (response) {
                param_name_from_base = response;
            },
            failure: function (msg) {
            }
        });

        //ดึง paramname จาก grid
        var columns = grid.columns;
        var flag = "";
        // กรองคอลัมน์ที่ไม่ซ่อน
        var visibleColumns = columns.filter(column => !column.hidden);
        //debugger;
        // ดึงชื่อของคอลัมน์ที่แสดง
        var columnNames = visibleColumns.map(column => column.field);
        var param_name_from_display = [];
        for (var i = 1; i < columnNames.length; i++) {
            if (columnNames[i] !== "" && columnNames[i] !== null) {
                param_name_from_display.push(columnNames[i]);
            }
        }
        debugger;
        var data_param_name_from_base = param_name_from_base.includes(field_name);
        var data_param_name_from_display = param_name_from_display.includes(field_name);
        if (data_param_name_from_base && data_param_name_from_display) {
            debugger;
            flag = "modify"; // เงื่อนไข 1 //modified
        } else if (data_param_name_from_base && !data_param_name_from_display) {
            debugger;
            flag = "delete"; // เงื่อนไข 2
        } else if (!data_param_name_from_base && data_param_name_from_display) {
            debugger;
            flag = "new"; // เงื่อนไข 3
        }
        return flag;

    }
    function ValidationEditDataLookup() {
        var chk = ValidationProcessing("dateselect");
        return chk;
    }
    function ValidateDateEdit(grid) {
        var data = grid.dataSource.view();
        var overlapping = false;
        var check = 0;
        var numberOfRowsDefault = countRowsDefaultWithValue("Default");

        var listfilter = [];
        for (var k = numberOfRowsDefault; k < data.length; k++) {
            var value = data[k];
            listfilter.push(value);
        }
        var result = groupData(listfilter);
        if (result.length > 0) {
            for (let i = 0; i < result.length; i++) {
                var seenValues = {};
                var count = 0;
                var inner_result = result[i];
                inner_result.sort((a, b) => a.id - b.id);
                for (let j = 0; j < inner_result.length; j++) {
                    var row = inner_result[j].toJSON(); // แปลงข้อมูลแถวเป็น JSON
                    var rowKey = createRowKeyEdit(row);
                    var num = i + 1;
                    var startDate = new Date(row.effective_date_start);
                    startDate.setHours(0, 0, 0, 0);
                    if (row.effective_date_to == null) {
                        var endDate = null;
                    }
                    else {
                        var endDate = new Date(row.effective_date_to);
                        endDate.setHours(0, 0, 0, 0);
                    }

                    if (seenValues[rowKey]) {
                        var firstIndex = seenValues[rowKey];
                        var previousRow = inner_result[count].toJSON();
                        count++;
                        var firstStartDate = new Date(previousRow.effective_date_start);
                        firstStartDate.setHours(0, 0, 0, 0);
                        if (previousRow.effective_date_to == null) {
                            var firstEndDate = null;
                        }
                        else {
                            var firstEndDate = new Date(previousRow.effective_date_to);
                            firstEndDate.setHours(0, 0, 0, 0);
                        }
                        if (firstEndDate != null) {
                            debugger;
                            if (firstStartDate <= endDate && startDate <= firstEndDate) {
                                check += 1;
                            }

                            if (startDate <= firstStartDate || startDate <= firstEndDate) {
                                check += 1;
                            }
                        }
                        else {
                            debugger;
                            if (firstStartDate <= startDate) {
                                check += 1;
                            }

                            if (startDate <= firstStartDate || startDate <= firstEndDate) {
                                check += 1;
                            }
                        }

                    } else {
                        // เก็บค่าที่เห็นแล้วและตำแหน่งของแถว
                        seenValues[rowKey] = num;//i
                    }
                }
            }
            if (check > 0) {
                debugger;
                //alert("Overlapping dates found");
                var title = "System Information";
                var message = "@M_OVERLAP_DATE";
                popUpMeassage(title, message);
                overlapping = true;
            }
        }
        debugger;
        return overlapping;
    }

    // ฟังก์ชันเพื่อจัดกลุ่มข้อมูล
    var groupData = (data) => {
        var grouped = {};
        debugger;
        data.forEach(item => {
            // สร้าง key สำหรับการจัดกลุ่มโดยใช้คีย์ทั้งหมด
            const filteredEntries = Object.entries(item).filter(([key, value]) => {
                return key !== 'LOOKUP_ID' && key !== 'LOOKUP_NAME' && key !== 'id' && key !== 'base_price' && key !== 'effective_date_start' &&
                    key !== 'effective_date_to' && key !== '_events' && key !== 'uid' && key !== 'dirty' && key !== 'parent' && (value !== "" && value !== null);
            });


            // หากไม่มีค่าให้ข้ามไป
            if (filteredEntries.length === 0) {
                return;
            }

            // สร้าง key สำหรับกลุ่ม
            const key = JSON.stringify(filteredEntries);

            // ตรวจสอบว่ามีกลุ่มนี้อยู่แล้วหรือไม่
            if (!grouped[key]) {
                grouped[key] = []; // ถ้าไม่มีให้สร้างกลุ่มใหม่
            }

            // เพิ่มข้อมูลเข้าไปในกลุ่ม
            grouped[key].push(item);
        });

        // แปลงจาก object กลับเป็น array
        var result = Object.values(grouped).filter(group => group.length > 1);
        debugger;
        return result
    };

    function ValidateDateEditOld(grid) {
        var data = grid.dataSource.view();
        var overlapping = false;
        var count = 0;
        if (data.length > 0) {
            var seenValues = {}; // อ็อบเจกต์เพื่อเก็บค่าที่เห็นแล้วและตำแหน่งของแถว
            var message = ''; // ข้อความที่จะแสดงผลลัพธ์
            var check = 0;
            var numberOfRowsDefault = countRowsDefaultWithValue("Default");
            data.splice(0, numberOfRowsDefault);
            // เรียงลิสต์ตาม id
            data.sort((a, b) => a.id - b.id);
            for (var i = 0; i < data.length; i++) { //numberOfRowsDefault
                var row = data[i].toJSON(); // แปลงข้อมูลแถวเป็น JSON
                var rowKey = createRowKeyEdit(row);
                var num = i + 1;
                var startDate = new Date(row.effective_date_start);
                startDate.setHours(0, 0, 0, 0);
                if (row.effective_date_to == null) {
                    var endDate = null;
                }
                else {
                    var endDate = new Date(row.effective_date_to);
                    endDate.setHours(0, 0, 0, 0);
                }
                var xx = seenValues[rowKey];
                if (seenValues[rowKey]) {
                    var firstIndex = seenValues[rowKey];
                    var previousRow = data[count].toJSON(); //firstIndex
                    count++;
                    var firstStartDate = new Date(previousRow.effective_date_start);
                    firstStartDate.setHours(0, 0, 0, 0);
                    if (previousRow.effective_date_to == null) {
                        var firstEndDate = null;
                    }
                    else {
                        var firstEndDate = new Date(previousRow.effective_date_to);
                        firstEndDate.setHours(0, 0, 0, 0);
                    }
                    if (firstEndDate != null) {
                        if (firstStartDate <= endDate && startDate <= firstEndDate) {
                            check += 1;
                        }

                        if (startDate <= firstStartDate || startDate <= firstEndDate) {
                            check += 1;
                        }
                    }
                    else {
                        if (firstStartDate <= startDate) {
                            check += 1;
                        }

                        if (startDate <= firstStartDate || startDate <= firstEndDate) {
                            check += 1;
                        }
                    }

                } else
                {
                    // เก็บค่าที่เห็นแล้วและตำแหน่งของแถว
                    seenValues[rowKey] = num;//i
                }

            }
            if (check > 0) {
                var title = "System Information";
                var message = "@M_OVERLAP_DATE";
                popUpMeassage(title, message);
                overlapping = true;
            }
        }
        else {
            if (!overlapping) {
                console.log("No overlapping dates found.");
            }
        }
        return overlapping;
    }

    function createRowKeyEdit(row) {
        var excludedColumns = ["LOOKUP_ID", "LOOKUP_NAME", "id", "base_price", "effective_date_start", "effective_date_to"];
        var keyParts = [];
        var fields = Object.keys(row).filter(field => !excludedColumns.includes(field));
        var param_list = [];

        var columnList = @(Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize((List<LovValueModel>)ViewBag.configscreenAddLookup)));
        var paramList = columnList.map(x => x.LovValue1);
        for (var param of paramList) {
            var valueparam = param;
            var checkbox = document.getElementById("u_" + valueparam);
            var isChecked = checkbox.checked;
            if (isChecked) {
                param_list.push(valueparam);
            }
            else {
                continue;
            }
        }

        fields.forEach(function (field) {
            var check = param_list.includes(field);
            if (check) {
                keyParts.push(row[field]);
            }
        });
        return JSON.stringify(keyParts);
    }


    function countRowsDefaultWithValue(value) {
        // เข้าถึง DataSource ของ Grid
        var dataSource = $("#gridEditselect").data("kendoGrid").dataSource;
        var count = 0;

        // ใช้ forEach เพื่อวนลูปผ่านแต่ละแถว
        dataSource.data().forEach(function (item) {
            for (var key in item) {
                if (item[key] === value) {
                    count++;
                    break; // ถ้าพบคำว่า "Default" ในคอลัมน์ใดคอลัมน์หนึ่งของแถวนี้แล้ว ให้หยุดตรวจสอบต่อในแถวนั้น
                }
            }
        });
        return count;
    }

    function popUpMeassage(title, message) {
        $("#DateEndPopup").data("kendoWindow").center().open();
        document.getElementById('_dInformation').innerHTML = message;
        $("#DateEndPopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
        $("#DateEndPopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
    }

    function onAddSUBCONTYPE() {
        //if (this.dataSource.view().length == 0) {
        //   $("#_SUBCONTYPE").data('kendoDropDownList').dataSource.read();
        //  $("#_exsubcontype").focus();

        $("#_dname").html("SUBCONTRACT TYPE");
        $("#_addtype").val("SUBCONTRACT_TYPE");
        $("#SUBCONTYPEPopup").data("kendoWindow").center().open();
        $("#SUBCONTYPEPopup").prev().find(".k-window-title").text("ADD NEW SUBCONTRACT TYPE");


        // }
    }

    function onAddTeamID() {
        $("#gridteamid").data('kendoGrid').dataSource.data([]);
        $('#_filter_search').data('kendoDropDownList').value("Region");
        $("#_searchPopup").val("");
        $("#TeamIDPopup").data("kendoWindow").center().open();
        $("#TeamIDPopup").prev().find(".k-window-title").text("Add Location Code/Company Name");


        // }
    }

    function LoadSUBTYPE() {

        $.ajax({
            cache: false,
            type: "GET",
            async: false,

            url: "/ConfigurationCostInstallation/GetSUBCONTRACTTYPE",
            dataType: "json",
            success: function (data) {
                try {
                    temp_data_dropdown = data;
                    $("#_SUBCONTYPE").kendoDropDownList({
                        dataTextField: "DISPLAY_VAL",
                        dataValueField: "LOV_VAL1",
                        dataSource: data,

                        filter: "contains",
                        virtual: {
                            itemHeight: 26,
                            valueMapper: function (options) {
                                options.success([options.value || 0]); //return the value <-> item index mapping;
                            }
                        }
                    });
                    //Loading(0);
                } catch (ex) {
                    // Loading(0);
                }
            }
        });


    }
    function onAddSUBCONSUBTYPE() {
        //  if (this.dataSource.view().length == 0) {
        $("#_dname").html("SUBCONTRACT SUB TYPE");
        //   $("#_SUBCONTYPE").data('kendoDropDownList').dataSource.read();
        $("#_addtype").val("SUBCONTRACT_SUB_TYPE");
        $("#_exsubcontype").focus();
        $("#SUBCONTYPEPopup").data("kendoWindow").center().open();
        $("#SUBCONTYPEPopup").prev().find(".k-window-title").text("ADD NEW SUBCONTRACT SUB TYPE");
        //  }
    }
    function LoadSUBSUBTYPE() {


        //   var multiselect = $("#_SUBCONSUBTYPE").data("kendoMultiSelect");

        // multiselect.refresh();
        //$("#_SUBCONSUBTYPE").data('kendoMultiSelect').dataSource.read();
        $.ajax({
            cache: false,
            type: "GET",
            async: false,

            url: "/ConfigurationCostInstallation/GetSUBCONTRACTSUBTYPE",
            dataType: "json",
            success: function (data) {

            }
        });


    }
    function onChangesubsubType() {
        var str = $("#_SUBCONSUBTYPE").data("kendoMultiSelect").value();
        if (str.indexOf("ALL") == 0) {
            str.splice(str.indexOf("ALL"), 1);
            $("#_SUBCONSUBTYPE").data('kendoMultiSelect').value(str);
        } else if (str.indexOf("ALL") > 0) {
            $("#_SUBCONSUBTYPE").data('kendoMultiSelect').value([]);
            $("#_SUBCONSUBTYPE").data('kendoMultiSelect').value(['ALL']);
        }
        else if (str.length == 0 || str == null || str == '') {
            $("#_SUBCONSUBTYPE").data('kendoMultiSelect').value(['ALL']);
        }
    }


    function onChangedtpDateFrom() {
        var pickDate = this.value();
        var datepicker = $("#dtpDateTo").data("kendoDatePicker");
        if (pickDate) {
            datepicker.enable(true);
            var minDate = new Date(pickDate);
            //  var maxDate = new Date(pickDate.setMonth(pickDate.getMonth() + 5));
            //  maxDate = new Date(maxDate.getFullYear(), maxDate.getMonth() + 1, maxDate.getDate() - 1);
            $("#dtpDateTo").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }
        //else {
        //    datepicker.enable(false);
        //}
        datepicker.value(new Date());
        $("#dtpDateTo").val("");
    }
    function onChangedtpDateTo() {

    }

    function onChangedtpEXPDateFrom() {
        var pickDate = this.value();
        var datepicker = $("#dtpEXPDateTo").data("kendoDatePicker");
        if (pickDate) {
            datepicker.enable(true);
            var minDate = new Date(pickDate);
            //  var maxDate = new Date(pickDate.setMonth(pickDate.getMonth() + 5));
            //  maxDate = new Date(maxDate.getFullYear(), maxDate.getMonth() + 1, maxDate.getDate() - 1);
            $("#dtpEXPDateTo").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }
        //else {
        //    datepicker.enable(false);
        //}
        datepicker.value(new Date());
        $("#dtpEXPDateTo").val("");
    }



    function onChangeEFFDATE() {



        var pickDate = $("#_EFFDATE").data("kendoDatePicker").value();
        var datepicker = $("#_EXPDATE").data("kendoDatePicker");
        if (pickDate) {
            //datepicker.value(pickDate);
            datepicker.enable(true);
            var minDate = new Date(pickDate);
            if (datepicker.value()) {
                datepicker.value(pickDate);
            }
            else {
                datepicker.value();
            }
            //$("#_EXPDATE").kendoDatePicker({
            //    min: pickDate,

            //    format: "dd/MM/yyyy",
            //    parseFormats: ["dd/MM/yyyy"]
            //});

        }


    }
    function onChangeEXPDate() {
        //var pickDate = this.value();
        //var datepicker = $("#dtpEXPDateTo").data("kendoDatePicker");
        //if (pickDate) {
        //    datepicker.enable(true);
        //    var minDate = new Date(pickDate);
        //    //  var maxDate = new Date(pickDate.setMonth(pickDate.getMonth() + 5));
        //    //  maxDate = new Date(maxDate.getFullYear(), maxDate.getMonth() + 1, maxDate.getDate() - 1);
        //    $("#dtpEXPDateTo").kendoDatePicker({
        //        min: minDate,
        //        //  max: maxDate,
        //        format: "dd/MM/yyyy",
        //        parseFormats: ["dd/MM/yyyy"]
        //    });

        //}
        //else {
        //    datepicker.enable(false);
        //}
        //   datepicker.value(new Date());
        //  $("#dtpEXPDateTo").val("");
    }

    function onChangedtpEXPDateTo() {

    }
    function _clearPopupData() { }
    var addDataModel = function () {
        COMMAND: "";
        TABLE: "";
        RULD_ID: "";
        RULE_NAME: "";
        ORDER_TYPE: "";
        SUBCONTRACT_TYPE: "";
        SUBCONTRACT_SUB_TYPE: "";
        VENDOR_CODE: "";
        TECHNOLOGY: "";
        TOTAL_PRICE: "";
        EVENT_CODE: "";
        ROOM_FLAG: "";
        REUSE_FLAG: "";
        DISTANCE_FROM: "";
        DISTANCE_TO: "";
        INDOOR_PRICE: "";
        OUTDOOR_PRICE: "";
        TOTAL_PRICE: "";
        INTERNET_PRICE: "";
        VOIP_PRICE: "";
        PLAYBOX_PRICE: "";
        MECH_PRICE: "";
        ADDRESS_ID: "";
        EVENT_TYPE: "";
        EFFECTIVE_DATE: "";
        EXPIRE_DATE: "";
        SAME_DAY: "";
        SUBCONTRACT_LOCATION: "";
        COMPANY_NAME: "";
        LOOKUP_NAME = "";
        USER = "";
    }
    function defaultAddData() {

        var DataResult = new addDataModel();
        DataResult.COMMAND = $('#_saveType').val();
        DataResult.TABLE = $('#_tableselect').val();
        DataResult.RULD_ID = $('#_RULDID').val();
        DataResult.RULE_NAME = $("#_RULE_NAME").val();
        DataResult.ORDER_TYPE = $("#_ORDER_TYPE").val();
        DataResult.SUBCONTRACT_TYPE = $("#_SUBCONTYPE").val();
        DataResult.SUBCONTRACT_SUB_TYPE = $("#_SUBCONSUBTYPE").val();
        //if ($("#_VENDORCODE").val() == "" || $("#_VENDORCODE").val() == null) {
        //    DataResult.VENDOR_CODE = "ALL";
        //}
        //else {
        //    DataResult.VENDOR_CODE = $("#_VENDORCODE").val();
        //}

        DataResult.TECHNOLOGY = $("#_TECHNOLOGY").val();
        //DataResult.TOTAL_PRICE = $("#_TOTAL_PRICE").val();
        //DataResult.EVENT_CODE = $("#_EVENT_CODE").val();
        //DataResult.ROOM_FLAG = $("#_ROOM_FLAG").val();
        //DataResult.REUSE_FLAG = $("#_REUSE_FLAG").val();
        DataResult.DISTANCE_FROM = $("#_DISTANCE_FROM").val();
        DataResult.DISTANCE_TO = $("#_DISTANCE_TO").val();
        DataResult.INDOOR_PRICE = $("#_INDOOR_PRICE").val();
        DataResult.OUTDOOR_PRICE = $("#_OUTDOOR_PRICE").val();

        DataResult.INTERNET_PRICE = $("#_INTERNET_PRICE").val();
        DataResult.VOIP_PRICE = $("#_VOIP_PRICE").val();
        DataResult.PLAYBOX_PRICE = $("#_PLAYBOX_PRICE").val();
        DataResult.MECH_PRICE = $("#_MECH_PRICE").val();
        DataResult.ADDRESS_ID = $("#_ADDRESS_ID").val();
        DataResult.EVENT_TYPE = $("#_EVENT_TYPE").val();
        DataResult.EFFECTIVE_DATE = $("#_EFFDATE").val();
        DataResult.EXPIRE_DATE = $("#_EXPDATE").val();
        //DataResult.SAME_DAY = $("#_SAME_DAY").val();
        //DataResult.SUBCONTRACT_LOCATION = $("#_SUBCONTRACT_LOCATION").val();
        DataResult.COMPANY_NAME = $("#_COMPANY_NAME").val();
        return DataResult;
    }
    var SearchModel = function () {
        //TB_NAME: "";
        //SUBCONTTYPE: "";
        //RULE_ID: "";
        //DATE_FROM: "";
        //DATE_TO: "";
        //ORD_TYPE: "";
        //TECH_TYPE: "";
        //EXPDATE_FROM: "";
        //EXPDATE_TO: "";
        LOOKUP_NAME = "";
        PAGE_INDEX: 1;
        PAGE_SIZE: 20;
        //SUBCONTRACT_LOCATION: "";
        //COMPANY_NAME: "";
    }

    function defaultData() {
        var searchResult = new SearchModel();
        searchResult.LOOKUP_NAME = $("#ddllTableList").val(); //ORDER_NO
        //searchResult.SUBCONTTYPE = $("#ddlConttype").val(); //ACCESS_NO
        //searchResult.RULE_ID = $("#ddlruleid").val(); //ddlProductName
        //searchResult.ORD_TYPE = $("#ddlORDERTYPE").val();
        //searchResult.TECH_TYPE = $("#ddlTECHNOLOGY").val();
        //searchResult.DATE_FROM = $("#dtpDateFrom").val();
        //searchResult.DATE_TO = $("#dtpDateTo").val();
        //searchResult.SUBCONTRACT_LOCATION = $("#ddlLocationCode").val();
        //searchResult.COMPANY_NAME = $("#ddlCompanyName").val();

        //searchResult.EXPDATE_FROM = $("#dtpEXPDateFrom").val();
        //searchResult.EXPDATE_TO = $("#dtpEXPDateTo").val();

        var grid = getGridName();

        searchResult.PAGE_INDEX = grid.dataSource.page();
        searchResult.PAGE_SIZE = grid.dataSource.pageSize();
        //  searchResult.PAGE_INDEX =  1;
        // searchResult.PAGE_SIZE = 20;

        return searchResult;
    }
    function onGridDataBound() {
        //debugger;
        Loading(0);
        $('.k-grid-content').height("auto");
        $('.k-grid-content').css("min-height", "50px");
        $('.k-grid-content').css("max-height", "300px");
        if (this.dataSource.view().length == 0) {

            //var colspan = this.thead.find("th").length;
            //var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";
            //this.tbody.html(emptyRow);
            //insert empty row
            var colspan = this.thead.find("th").length;
            var emptyRow = "<tr style='height:auto; text-align:center' ><td colspan='" + colspan + "'>  </td></tr>";
            this.tbody.html(emptyRow);

            //$("#noData").data("kendoWindow").open();
            //$("#noData").data("kendoWindow").center();
            //this.table.width(800);
            $(".k-grid-content").height(3 * kendo.support.scrollbar());

            //var colspan = e.sender.thead.find("th:visible").length, emptyRow = '<center> No Data Found. </center>';
            //e.sender.tbody.parent().width(e.sender.thead.width()).end().html(emptyRow);
        }
        else {
            $(".k-grid-content").height("auto");
            var grid = $("#gridCostTable1").data("kendoGrid");
            var gridData = grid.dataSource.view();
            debugger;
            var currentDate = new Date();
            var list_onttop = [];
            //debugger;
            //for (var i = 0; i < gridData.length; i++) {
            //    var currentUid = gridData[i].uid;
            //    var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
            //    var lookup_date_start_split = gridData[i].EFFECTIVE_DATE_START.split("/");
            //    var lookup_date_start = new Date(lookup_date_start_split[2], lookup_date_start_split[1] - 1, lookup_date_start_split[0]);
            //    var rule_name = gridData[i].RULE_NAME;
            //    var ontop = gridData[i].ONTOP_LOOKUP;
            //    //debugger;
            //    if (lookup_date_start < currentDate) {
            //        var deleteButton = $(currenRow).find(".k-grid-Delete");
            //        //debugger;
            //        deleteButton.hide();
            //        //debugger;
            //    }
            //    if ((rule_name == null || rule_name == "") && (lookup_date_start < currentDate)) {
            //        var deleteButton = $(currenRow).find(".k-grid-Delete");
            //        //debugger;
            //        deleteButton.hide();
            //        //debugger;
            //    }
            //    if (ontop != "") {
            //        if (ontop.includes(",")) {
            //            var result_ontop = ontop.split(",");
            //            list_onttop.push(result_ontop);
            //            //debugger;
            //        }
            //        else {
            //            list_onttop.push(ontop);
            //            //debugger;
            //        }
            //        //debugger;
            //        var deleteButton = $(currenRow).find(".k-grid-Delete");
            //        //debugger;
            //        deleteButton.hide();
            //        //debugger;
            //    }
            //}

            for (var i = 0; i < gridData.length; i++) {
                var currentUid = gridData[i].uid;
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var lookup_date_start_split = gridData[i].EFFECTIVE_DATE_START.split("/");
                var lookup_date_start = new Date(lookup_date_start_split[2], lookup_date_start_split[1] - 1, lookup_date_start_split[0]);
                var rule_name = gridData[i].RULE_NAME;
                var ontop = gridData[i].ONTOP_LOOKUP;
                var ontop_flag = gridData[i].ONTOP_FLAG;
                var flag_delete = gridData[i].FLAG_DELETE;
                debugger;
                if (lookup_date_start <= currentDate) {
                    var deleteButton = $(currenRow).find(".k-grid-Delete");
                    debugger;
                    deleteButton.hide();
                    //debugger;
                }
                if ((rule_name == null || rule_name == "") && (lookup_date_start < currentDate)) {
                    debugger;
                    var deleteButton = $(currenRow).find(".k-grid-Delete");
                    debugger;
                    deleteButton.hide();
                    //debugger;
                }
                if (rule_name !== "" && rule_name !== null) {  //rule_name !== null ||
                    debugger;
                    var deleteButton = $(currenRow).find(".k-grid-Delete");
                    debugger;
                    deleteButton.hide();
                    debugger;
                }
                if (ontop != "") {
                    if (ontop.includes("</br>")) {
                        var result_ontop = ontop.split("</br>");
                        list_onttop.push(result_ontop);
                        //debugger;
                    }
                    else {
                        list_onttop.push(ontop);
                        //debugger;
                    }
                    //debugger;
                    if (lookup_date_start <= currentDate) {
                        var deleteButton = $(currenRow).find(".k-grid-Delete");
                        //debugger;
                        deleteButton.hide();
                        //debugger;
                    }
                    //else {
                    //    var deleteButton = $(currenRow).find(".k-grid-Delete");
                    //    //debugger;
                    //    deleteButton.show();
                    //    //debugger;
                    //}

                }
                if (ontop_flag == "Ontop" && ontop == "") {  //ontop_flag == "Y"
                    if (lookup_date_start <= currentDate) {
                        var deleteButton = $(currenRow).find(".k-grid-Delete");
                        //debugger;
                        deleteButton.hide();
                    }
                    else {
                        var deleteButton = $(currenRow).find(".k-grid-Delete");
                        //debugger;
                        deleteButton.show();
                    }
                }
                if (ontop_flag == "Ontop" && flag_delete == "N")
                {
                    debugger;
                    var deleteButton = $(currenRow).find(".k-grid-Delete");
                    deleteButton.hide();
                }
            }
            debugger;
            var flat_list_onttop = list_onttop.flat();
            debugger;
            // วนหาชื่อ topup กับ lookup_name ที่ตรงกัน แล้ว hide delete button
            //for (var i = 0; i < gridData.length; i++) {
            //    var currentUid = gridData[i].uid;
            //    var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
            //    var lookup_name = gridData[i].LOOKUP_NAME;
            //    debugger;
            //    for (var j = 0; j < flat_list_onttop.length; j++) {
            //        debugger;
            //        var ontop_value = flat_list_onttop[j];
            //        debugger;
            //        if (lookup_name == ontop_value) {
            //            var deleteButton = $(currenRow).find(".k-grid-Delete");
            //            debugger;
            //            deleteButton.hide();
            //            debugger;
            //        }
            //        else {
            //            continue;
            //        }
            //    }
            debugger;
            for (var i = 0; i < gridData.length; i++) {
                var currentUid = gridData[i].uid;
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var lookup_date_start_split = gridData[i].EFFECTIVE_DATE_START.split("/");
                var lookup_date_start = new Date(lookup_date_start_split[2], lookup_date_start_split[1] - 1, lookup_date_start_split[0]);
                var lookup_name = gridData[i].LOOKUP_NAME;
                debugger;
                for (var j = 0; j < flat_list_onttop.length; j++) {
                    debugger;
                    var ontop_value = flat_list_onttop[j].trim();
                    debugger;
                    if (lookup_name == ontop_value) {
                        var deleteButton = $(currenRow).find(".k-grid-Delete");
                        debugger;
                        deleteButton.hide();
                        debugger;
                    }
                    if (lookup_name == "Standard_Price")
                    {
                        var deleteButton = $(currenRow).find(".k-grid-Delete");
                        debugger;
                        deleteButton.hide();
                        debugger;
                    }
                    else {
                        continue;
                    }
                }
            }
        }
        //Style_Grid();
    }

    function _Search() {
        //$("#_RULE_ID").show();
        //var chk = ValidationSearchData();
        //if (chk == true) {

        //    $("#_ruleselect").val("");
        //    var model = defaultData();
        //    $('#_tableselect').val(model.TB_NAME);
        //    console.log("Table:" + model.TB_NAME);
        //    console.log("RULEID:" + model.RULE_ID);
        //    console.log("SUBCONTRACTTYPE:" + model.SUBCONTTYPE);
        //    console.log("EFFECTIVEDATE:" + model.DATE_FROM);
        //    console.log("EXPIREDATE:" + model.DATE_TO);
        //    temp_model = model;
        //    Loading();
        //    var grid = getGridName();
        //    grid.dataSource.page(1);
        //}



        debugger;
        $("#_RULE_ID").show();
        var model = defaultData();
        $('#_tableselect').val('');
        temp_model = model;
        //Loading();
        var grid = getGridName();
        grid.dataSource.page(1);
        debugger;
    }
    var model;
    function bindingValue() {
        //Loading();
        model = defaultData();
        return {
            dataS: JSON.stringify(model)
        };
    }
    function onChangeORDTYPE() {
        var ordtype = $("#_ORDER_TYPE").val();
        //if (ordtype == null || ordtype == "ALL") {

        //    $("#_SAME_DAY").data('kendoDropDownList').enable(false);

        //}
        //else {

        //    $("#_SAME_DAY").data('kendoDropDownList').enable(true);

        //}
    }
    function _Clear() {

        $("#_ruleselect").val("");
        $("#_tableselect").val("");
        //$("#ddllTableList").data("kendoDropDownList").dataSource.read();
        $("#ddllTableList").data("kendoDropDownList").value("ALL");
        //   $("#ddllTableList").data("kendoDropDownList").select(0);
        //  $('#ddllTableList').data('kendoDropDownList').value("");
        // $("#ddlConttype").data("kendoDropDownList").dataSource.read();
        // $("#ddlConttype").data("kendoDropDownList").select(0);
        //$('#ddlConttype').data('kendoDropDownList').value("ALL");
        //$('#ddlLocationCode').data('kendoDropDownList').value("ALL");
        //$('#ddlCompanyName').data('kendoDropDownList').value("ALL");
        //$("#ddlruleid").data("kendoDropDownList").dataSource.read();
        //$("#ddlruleid").data("kendoDropDownList").value("ALL");
        //$('#ddlruleid').data('kendoDropDownList').value("ALL");
        // console.log("clear");
        //$('#ddlORDERTYPE').data('kendoDropDownList').value("ALL");
        //$('#ddlTECHNOLOGY').data('kendoDropDownList').value("ALL");

        //$("#dtpDateFrom").data("kendoDatePicker").value(null);
        //$("#dtpDateTo").data("kendoDatePicker").value(null);
        //$("#dtpEXPDateFrom").data("kendoDatePicker").value(null);
        //$("#dtpEXPDateTo").data("kendoDatePicker").value(null);
        //$("#validate-" + "ddllTableList").html("");
        //$("#dtpDateTo").data("kendoDatePicker").enable(false);
        //$("#dtpEXPDateTo").data("kendoDatePicker").enable(false);

        //$("#List_COMPANY_NAME").hide();
        //$("#List_LOCATION_CODE").hide();
        //document.getElementById("List_SUBCONTRACT_TYPE").style.display = "";
        //   $("#dtpDateTo").data("kendoDatePicker").enable(false);
        //$("#validate-" + "dtpDateFrom").html("");
        //$("#validate-" + "dtpDateTo").html("");
        //$("#validate-" + "dtpEXPDateFrom").html("");
        //$("#validate-" + "dtpEXPDateTo").html("");
        //$("#validate-" + "_EFFDATE").html("");

        $('#ddllTableList').data('kendoDropDownList').value("T1");
        $("#gridCostTable1").data('kendoGrid').dataSource.data([]);
        debugger;
        //$("#gridCostTable2").data('kendoGrid').dataSource.data([]);
        //$("#gridCostTable3").data('kendoGrid').dataSource.data([]);
        //$("#gridCostTable4").data('kendoGrid').dataSource.data([]);
        //$("#gridCostTable5").data('kendoGrid').dataSource.data([]);
        //$("#gridCostTable6").data('kendoGrid').dataSource.data([]);

        $("#gridresult").show();
        debugger;
        //$("#gridresult1").hide();
        //$("#gridresult2").hide();
        //$("#gridresult3").hide();
        //$("#gridresult4").hide();
        //$("#gridresult5").hide();
        //$("#gridresult6").hide();
        //LoadRuleID();

    }
    function showMSG(type, msg, title) {

        $("#headerMessageFeedback").removeClass();
        $("#headerMessageFeedback").addClass("modal-header");
        if (type === "primary") { $("#headerMessageFeedback").addClass("btn-primary"); }
        else if (type === "success") { $("#headerMessageFeedback").addClass("btn-success"); }
        else if (type === "info") { $("#headerMessageFeedback").addClass("btn-info"); }
        else if (type === "warning") { $("#headerMessageFeedback").addClass("btn-warning"); }
        else if (type === "error") { $("#headerMessageFeedback").addClass("btn-danger"); }
        else { $("#headerMessageFeedback").addClass("btn-default"); }

        if (title !== undefined) $("#MessageFeedbackPopUpLabel").text(title); else $("#MessageFeedbackPopUpLabel").text("Notification");

        $("#lbMessageFeedback").html(msg);

        $("#MessageFeedbackPopUp").modal('show');

    }
    function clearValidatefor() {
        $("#validate-" + "ddllTableList").html("");
        $("#validate-" + "dtpDateFrom").html("");
        $("#validate-" + "dtpDateTo").html("");
        $("#validate-" + "dtpEXPDateFrom").html("");
        $("#validate-" + "dtpEXPDateTo").html("");
    }
    function clearValidateforAdd() {
        //$("#validate-" + "_EFFDATE").html("");
        //$("#validate-" + "_ADDRID").html("");
        $("#validate-" + "_LOOKUP_NAME").html("");
    }
    function ValidationSearchData() {
        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            //var chk = false;
            clearValidatefor();


            if ($.trim($("#dtpDateFrom").val()) != '') {
                if ($.trim($("#dtpDateTo").val()) == '' || $.trim($("#dtpDateTo").val()) == null) {
                    $("#validate-" + "dtpDateTo").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }
                else {
                    chk = true;
                }

            }
            if ($.trim($("#dtpEXPDateFrom").val()) != '') {

                if ($.trim($("#dtpEXPDateTo").val()) == '' || $.trim($("#dtpEXPDateTo").val()) == null) {
                    $("#validate-" + "dtpEXPDateTo").html(ValidationIcon() + "This field is required.");
                    chk = false;

                }
                else {
                    chk = true;

                }

            }
        }
        return chk;
    }


    function ValidationAddData() {
        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            //var chk = false;
            clearValidateforAdd();
            var tb = $("#ddllTableList").val();
            if (tb == "T2") {
                if ($.trim($("#_EFFDATE").val()) == '' || $.trim($("#_EFFDATE").val()) == null) {

                    $("#validate-" + "_EFFDATE").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }
                else {
                    chk = true;
                }
                if ($.trim($("#_ADDRESS_ID").val()) == "" || $.trim($("#_ADDRESS_ID").val()) == null) {
                    $("#validate-" + "_ADDRID").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }
                else {
                    chk = true;
                }

            }
            else {
                if ($.trim($("#_EFFDATE").val()) == '' || $.trim($("#_EFFDATE").val()) == null) {

                    $("#validate-" + "_EFFDATE").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }
                else {
                    chk = true;
                }
            }


        }
        return chk;
    }
</script>

<script src="https://demos.telerik.com/kendo-ui/content/shared/js/products.js"></script>
<script>

    function onClickSearchInPopup() {
        var data;
        var DataResult = new addDataModel();
        DataResult.SUBCONTRACT_LOCATION = $('#_filter_search').val();
        DataResult.COMPANY_NAME = $('#_searchPopup').val();
        $.ajax({
            type: "POST",
            url: "/ConfigurationCostInstallation/GetDataPopup",
            data: { dataS: JSON.stringify(DataResult) },
            dataType: "json",
            async: false,
            success: function (response) {
                data = response;
            },
            failure: function (msg) {
            }
        });
        $("#gridteamid").empty();
        $("#gridteamid").kendoGrid({
            dataSource: {
                data: products,
                schema: {
                    model: {
                        fields: {
                            REGION: {
                                type: "string"
                            },
                            SUBCONTRACT_LOCATION: {
                                type: "string"
                            },
                            SUB_CONTRACTOR_NAME_TH: {
                                type: "string"
                            },
                            TEAM_NAME: {
                                type: "string"
                            },
                            ORG_ID: {
                                type: "string"
                            },
                            //SUBCONTRACT_TYPE: {
                            //    type: "string"
                            //},
                            //SUBCONTRACT_SUB_TYPE: {
                            //    type: "string"
                            //},
                            Discontinued: {
                                type: "boolean"
                            },
                            QuantityPerUnit: {
                                type: "string"
                            }
                        }
                    },
                    parse: function (response) {
                        var products = [];
                        for (var i = 0; i < data.length; i++) {
                            var product = {
                                REGION: data[i].REGION,
                                SUBCONTRACT_LOCATION: data[i].SUBCONTRACT_LOCATION,
                                SUB_CONTRACTOR_NAME_TH: data[i].SUB_CONTRACTOR_NAME_TH,
                                TEAM_NAME: data[i].TEAM_NAME,
                                ORG_ID: data[i].ORG_ID,
                                SUBCONTRACT_TYPE: data[i].SUBCONTRACT_TYPE,
                                SUBCONTRACT_SUB_TYPE: data[i].SUBCONTRACT_SUB_TYPE
                            };
                            products.push(product);
                        }
                        return products;
                    }
                },
                pageSize: 15
            },
            height: 400,
            scrollable: true,
            sortable: true,
            filterable: true,
            pageable: {
                input: true,
                numeric: false
            },
            columns: [{
                field: "REGION",
                template: "<div onclick='cellClick(this)'><a>#if(Discontinued){# #: REGION # #}else{# #: REGION # #}#</a></div>",
                title: "<b>REGION</b>",
                width: "100px"
            },
            {
                field: "SUBCONTRACT_LOCATION",
                title: "LOCATION CODE",
                format: "{0:c}",
                width: "100px"
            },
            {
                field: "SUB_CONTRACTOR_NAME_TH",
                title: "COMPANY NAME",
                width: "100px"
            },
            {
                field: "TEAM_NAME",
                title: "TEAM NAME",
                width: "100px"
            },
            {
                field: "ORG_ID",
                title: "TEAM ID",
                width: "100px"
            }
                ,
            //{
            //    field: "SUBCONTRACT_TYPE",
            //    title: "SUBCONTRACT TYPE",
            //    width: "100px"
            //},
            //{
            //    field: "SUBCONTRACT_SUB_TYPE",
            //    title: "SUBCONTRACT SUB TYPE",
            //    width: "100px"
            //},
            {
                field: "Discontinued",
                hidden: true
            },
            {
                field: "QuantityPerUnit",
                hidden: true
            }
            ]
        });
    }

    //$(document).ready(function () {
    //    $("#gridteamid").kendoGrid({
    //        dataSource: {
    //            data: products,
    //            schema: {
    //                model: {
    //                    fields: {
    //                        ProductName: {
    //                            type: "string"
    //                        },
    //                        UnitPrice: {
    //                            type: "number"
    //                        },
    //                        UnitsInStock: {
    //                            type: "number"
    //                        },
    //                        Discontinued: {
    //                            type: "boolean"
    //                        },
    //                        QuantityPerUnit: {
    //                            type: "string"
    //                        }
    //                    }
    //                },
    //                parse: function (response) {
    //                    var products = [];

    //                    return products;
    //                }
    //            },
    //            pageSize: 15
    //        },
    //        height: 400,
    //        scrollable: true,
    //        sortable: true,
    //        filterable: true,
    //        pageable: {
    //            input: true,
    //            numeric: false
    //        },
    //        columns: [{
    //            field: "ProductName",
    //            template: "<div onclick='cellClick(this)'></div>",
    //            title: "<b>REGION</b>",
    //            width: "100px"
    //        },
    //        {
    //            field: "UnitPrice",
    //            title: "LOCATION CODE",
    //            format: "{0:c}",
    //            width: "100px"
    //        },
    //        {
    //            field: "UnitsInStock",
    //            title: "COMPANY NAME",
    //            width: "100px"
    //        },
    //        {
    //            field: "UnitsInStock",
    //            title: "TEAM NAME",
    //            width: "100px"
    //        },
    //        {
    //            field: "UnitsInStock",
    //            title: "TEAM ID",
    //            width: "100px"
    //        },
    //        //{
    //        //    field: "UnitsInStock",
    //        //    title: "SUBCONTRACT TYPE",
    //        //    width: "100px"
    //        //},
    //        //{
    //        //    field: "UnitsInStock",
    //        //    title: "SUBCONTRACT SUB TYPE",
    //        //    width: "100px"
    //        //},
    //        {
    //            field: "Discontinued",
    //            hidden: true
    //        },
    //        {
    //            field: "QuantityPerUnit",
    //            hidden: true
    //        }
    //        ]
    //    });
    //});

    //We use the discontinued variable to Toggle between properties in cell
    function cellClick(e) {
        var grid = $("#gridteamid").data("kendoGrid");
        var dataItem = grid.dataItem($(e).closest("tr"));
        console.log(dataItem);
        if (dataItem.Discontinued) {
            dataItem.set("Discontinued", false);
            $("#TeamIDPopup").data("kendoWindow").close();
            //$("#_SUBCONTRACT_LOCATION").val(dataItem.SUBCONTRACT_LOCATION);
            $("#_COMPANY_NAME").val(dataItem.SUB_CONTRACTOR_NAME_TH);
        } else {
            dataItem.set("Discontinued", true);
            $("#TeamIDPopup").data("kendoWindow").close();
            //$("#_SUBCONTRACT_LOCATION").val(dataItem.SUBCONTRACT_LOCATION);
            $("#_COMPANY_NAME").val(dataItem.SUB_CONTRACTOR_NAME_TH);
        }
    }

</script>
