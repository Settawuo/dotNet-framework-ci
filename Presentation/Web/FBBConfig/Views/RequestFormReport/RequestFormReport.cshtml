@model WBBEntity.PanelModels.FBBWebConfigModels.RequestFormReportModel
@using WBBEntity.PanelModels;
@{
    string L_DORMITORY_PROVINCE = "Province";
    string L_PAGE_DATE_FROM = "Date From";
    string L_PAGE_DATE_TO = "Date To";
    string L_GRID_NO = "NO";
    string L_GRID_CREATE_DT = "Date";
    string L_GRID_TYPE_CUSTOMER_REQUEST = "Type customer request";
    string L_GRID_CUSTOMER_FIRST_NAME = "First name";
    string L_GRID_CUSTOMER_LAST_NAME = "Last name";
    string L_GRID_CONTRACT_PHONE = "Contact Phone";
    string L_GRID_DORMITORY_NAME = "Dormitory name";
    string L_GRID_TYPE_DORMITORY = "Dormitory type";
    string L_GRID_HOME_NO = "Home No";
    string L_GRID_MOO = "Moo";
    string L_GRID_SOI = "Soi";
    string L_GRID_STREET = "Street";
    string L_GRID_TUMBON = "Tumbon";
    string L_GRID_AMPHUR = "Amphur";
    string L_GRID_PROVINCE = "Province";
    string L_GRID_ZIPCODE = "Zipcode";
    string L_GRID_REGION_CODE = "Region";
    string L_GRID_BUILDING = "Building";
    string L_GRID_UNIT = "Unit";
    string L_GRID_LIVING = "Living";
    string L_GRID_PHONE_CABLE = "Phone Cable";
    string L_GRID_PROBLEM_INTERNET = "Problem internet";
    string L_GRID_UNIT_USE_INTERNET = "Unit use internet";
    string L_GRID_OLD_SYSTEM = "Old Service";
    string L_GRID_OLD_VENDOR_SERVICE = "Old vendor service";
    string L_GRID_SEND_TO_SALE_DT = "Send to sale date";
    string L_GRID_PROCESS_STATUS = "Process status";
    
    string L_PAGE_CANCEL = "Clear";
    string L_PAGE_SEARCH = "Search";
    string L_PAGE_EXPORT = "Export to Excel";
    string L_PAGE_SEARCH_PANEL = "Search Request Form Report";
    string L_PAGE_NAME = "Request Form Report";


    if (ViewBag.configscreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.configscreen;

        //L_DORMITORY_PROVINCE = configscreen.Any(f => f.Name == "L_PROVINCE") ? configscreen.FirstOrDefault(f => f.Name == "L_PROVINCE").LovValue2 : "";
        //L_DORMITORY_PROVINCE = configscreen[0].Text.ToString();
        


        L_GRID_NO = configscreen[0].Text.ToString();
        L_GRID_TYPE_CUSTOMER_REQUEST = configscreen[1].Text.ToString();
        L_GRID_CREATE_DT = configscreen[2].Text.ToString();
        L_GRID_CUSTOMER_FIRST_NAME = configscreen[3].Text.ToString();
        L_GRID_CUSTOMER_LAST_NAME = configscreen[4].Text.ToString();
        L_GRID_CONTRACT_PHONE = configscreen[5].Text.ToString();
        L_GRID_DORMITORY_NAME = configscreen[6].Text.ToString();
        L_GRID_TYPE_DORMITORY = configscreen[7].Text.ToString();
        L_GRID_HOME_NO = configscreen[8].Text.ToString();
        L_GRID_MOO = configscreen[9].Text.ToString();
        L_GRID_SOI = configscreen[10].Text.ToString();
        L_GRID_STREET = configscreen[11].Text.ToString();
        L_GRID_TUMBON = configscreen[12].Text.ToString();
        L_GRID_AMPHUR = configscreen[13].Text.ToString();
        L_GRID_PROVINCE = configscreen[14].Text.ToString();
        L_GRID_ZIPCODE = configscreen[15].Text.ToString();
        L_GRID_REGION_CODE = configscreen[16].Text.ToString();
        L_GRID_BUILDING = configscreen[17].Text.ToString();
        L_GRID_UNIT = configscreen[18].Text.ToString();
        L_GRID_LIVING = configscreen[19].Text.ToString();
        L_GRID_PHONE_CABLE = configscreen[20].Text.ToString();
        L_GRID_PROBLEM_INTERNET =  configscreen[21].Text.ToString();
        L_GRID_UNIT_USE_INTERNET = configscreen[22].Text.ToString();
        L_GRID_OLD_SYSTEM = configscreen[23].Text.ToString();
        L_GRID_OLD_VENDOR_SERVICE = configscreen[24].Text.ToString();
        L_GRID_SEND_TO_SALE_DT = configscreen[25].Text.ToString();
        L_GRID_PROCESS_STATUS = configscreen[26].Text.ToString();

        

        //L_GRID_NO = configscreen.Any(f => f.Text == "NO") ? configscreen.First(f => f.Text == "NO").Text : "";
        //L_GRID_TYPE_CUSTOMER_REQUEST = configscreen.Any(f => f.Name == "TYPE CUSTOMER REQUEST") ? configscreen.First(f => f.Name == "TYPE CUSTOMER REQUEST").LovValue1 : "";
        //L_GRID_CREATE_DT = configscreen.Any(f => f.Name == "DATE") ? configscreen.First(f => f.Name == "DATE").LovValue1 : "";
        //L_GRID_CUSTOMER_FIRST_NAME = configscreen.Any(f => f.Name == "FIRST NAME") ? configscreen.First(f => f.Name == "FIRST NAME").LovValue1 : "";
        //L_GRID_CUSTOMER_LAST_NAME = configscreen.Any(f => f.Name == "LAST NAME") ? configscreen.First(f => f.Name == "LAST NAME").LovValue1 : "";
        //L_GRID_CONTRACT_PHONE = configscreen.Any(f => f.Name == "CONTACT PHONE") ? configscreen.First(f => f.Name == "CONTACT PHONE").LovValue1 : "";
        //L_GRID_DORMITORY_NAME = configscreen.Any(f => f.Name == "DORMITORY NAME") ? configscreen.First(f => f.Name == "DORMITORY NAME").LovValue1 : "";

        //L_GRID_TYPE_DORMITORY = configscreen.Any(f => f.Name == "DORMITORY TYPE") ? configscreen.First(f => f.Name == "DORMITORY TYPE").LovValue1 : "";
        //L_GRID_HOME_NO = configscreen.Any(f => f.Name == "HOME NO") ? configscreen.First(f => f.Name == "HOME NO").LovValue1 : "";
        //L_GRID_MOO = configscreen.Any(f => f.Name == "MOO") ? configscreen.First(f => f.Name == "MOO").LovValue1 : "";
        //L_GRID_SOI = configscreen.Any(f => f.Name == "SOI") ? configscreen.First(f => f.Name == "SOI").LovValue1 : "";
        //L_GRID_STREET = configscreen.Any(f => f.Name == "STREET") ? configscreen.First(f => f.Name == "STREET").LovValue1 : "";
        //L_GRID_TUMBON = configscreen.Any(f => f.Name == "TUMBON") ? configscreen.First(f => f.Name == "TUMBON").LovValue1 : "";
        //L_GRID_AMPHUR = configscreen.Any(f => f.Name == "AMPHUR") ? configscreen.First(f => f.Name == "AMPHUR").LovValue1 : "";

        //L_GRID_PROVINCE = configscreen.Any(f => f.Name == "PROVINCE") ? configscreen.First(f => f.Name == "PROVINCE").LovValue1 : "";
        //L_GRID_ZIPCODE = configscreen.Any(f => f.Name == "ZIPCODE") ? configscreen.First(f => f.Name == "ZIPCODE").LovValue1 : "";
        //L_GRID_REGION_CODE = configscreen.Any(f => f.Name == "REGION") ? configscreen.First(f => f.Name == "REGION").LovValue1 : "";
        //L_GRID_BUILDING = configscreen.Any(f => f.Name == "BUILDING") ? configscreen.First(f => f.Name == "BUILDING").LovValue1 : "";
        //L_GRID_UNIT = configscreen.Any(f => f.Name == "UNIT") ? configscreen.First(f => f.Name == "UNIT").LovValue1 : "";
        //L_GRID_LIVING = configscreen.Any(f => f.Name == "LIVING") ? configscreen.First(f => f.Name == "LIVING").LovValue1 : "";
        //L_GRID_PHONE_CABLE = configscreen.Any(f => f.Name == "PHONE CABLE") ? configscreen.First(f => f.Name == "PHONE CABLE").LovValue1 : "";

        //L_GRID_PROBLEM_INTERNET = configscreen.Any(f => f.Name == "PROBLEM INTERNET") ? configscreen.First(f => f.Name == "PROBLEM INTERNET").LovValue1 : "";
        //L_GRID_UNIT_USE_INTERNET = configscreen.Any(f => f.Name == "UNIT USE INTERNET") ? configscreen.First(f => f.Name == "UNIT USE INTERNET").LovValue1 : "";
        //L_GRID_OLD_SYSTEM = configscreen.Any(f => f.Name == "OLD SERVICE") ? configscreen.First(f => f.Name == "OLD SERVICE").LovValue1 : "";
        //L_GRID_OLD_VENDOR_SERVICE = configscreen.Any(f => f.Name == "OLD VENDOR SERVICE") ? configscreen.First(f => f.Name == "OLD VENDOR SERVICE").LovValue1 : "";
        //L_GRID_SEND_TO_SALE_DT = configscreen.Any(f => f.Name == "SEND TO SALE DATE") ? configscreen.First(f => f.Name == "SEND TO SALE DATE").LovValue1 : "";
        //L_GRID_PROCESS_STATUS = configscreen.Any(f => f.Name == "PROCESS STATUS") ? configscreen.First(f => f.Name == "PROCESS STATUS").LovValue1 : "";

    }

}
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div class="page-header i-header-fit">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <h3 style="margin-top: 0">@L_PAGE_NAME</h3>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12">
            <div class="panel panel-success">
                <div class="panel-heading">
                    <h3 class="panel-title">
                        <span>@L_PAGE_SEARCH_PANEL</span>
                        <a data-toggle="collapse" class="pull-right" href="#SearchPanel2" onclick="onPanelToggle(this);" id="SearchPanelHeader2"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow2"></i></a>
                    </h3>
                </div>
                <div id="SearchPanel2" class="panel-collapse collapse in">
                    <div class="panel-body" style="min-height: 135px;">
                        <div id="dateselect" class="row">
                            <div class="col-sm-6 col-md-6">
                                <label>@L_PAGE_DATE_FROM</label>
                               
                                <div id ="divDateFrom" class="i-fg-data-entry">
                                     @*<input data-type="date" name="date" />*@
                                    @(Html.Kendo().DatePicker().Name("dtpDateFrom").HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                 .Format("dd/MM/yyyy")
                                 .Min(new DateTime(1900, 1, 1))
                                 .Max(new DateTime(2099, 12, 31))
                                 .Events(e => e.Change("Change_dtpDateFrom"))
                                 .ParseFormats(new string[] {"dd/MM/yyyy"})
                              
                                 )

                                    <div class="i-fg-data-entry-validation" id="validatefor-dtpDateFrom"></div>
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-6">
                                <label>@L_PAGE_DATE_TO</label>
                                <div id="divDateTo" class="i-fg-data-entry">
                                    @(Html.Kendo().DatePicker().Name("dtpDateTo")
                                 .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                 .Format("dd/MM/yyyy")
                                 .Min(new DateTime(1900, 1, 1))
                                 .Max(new DateTime(2099, 12, 31))
                                 .Events(e => e.Change("Change_dtpDateTo")))
                                    <div class="i-fg-data-entry-validation" id="validatefor-dtpDateTo"></div>
                                </div>
                            </div>
                        </div> @*end row1*@

                        <div id="SearchRow1" class="row">
                            <div class="col-sm-6 col-md-6">
                                <label>Region</label>
                                @(Html.Kendo().DropDownList()
                                .Name("RegionCode")
                                .DataTextField("DISPLAY_VAL")
                                .DataValueField("LOV_NAME")
                                .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("SelectRegion", "RequestFormReport");
                                    });
                                })
                                .Events(e => e.Change("onRegionChange"))

                                )
                            </div>
                            <div class="col-sm-6 col-md-6">
                                <label>@L_DORMITORY_PROVINCE</label>
                               @(Html.Kendo().DropDownListFor(t => t.P_PROVINCE)
                                                      .Name("Province")
                                              .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                      .DataTextField("Text")
                                                      .DataValueField("LovValue1")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                {
                                                    read.Action("SelectProvinceForSearch", "RequestFormReport");
                                                });
                                            })
                                            .Events(e => e.Change("onProvinceChange"))
                                )
                            </div>
                        </div>
                        <div id="SearchRow2" class="row">
                            <div class="col-sm-6 col-md-6">
                                <label>Process Status</label>
                                @(Html.Kendo().DropDownList()
                                .Name("Status")
                                        .DataTextField("Text")
                                        .DataValueField("LovValue1")
                                .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("SelectStatus", "RequestFormReport");
                                    });
                                })
                                .Events(e => e.Change("onStatusChange"))

                                )
                            </div>
                            <div class="col-sm-6 col-md-6">
                                
                            </div>
                        </div>
                        <div id="row2" class="row i-gap-top-1">
                            <div class="col-sm-6 col-md-6">

                            </div>
                            <div class="col-sm-6 col-md-6 i-text-align-right">
                                <a class="btn btn-default" onclick="_Clear();"><i class="fa fa-ban fa-lg"></i>&nbsp;&nbsp;@L_PAGE_CANCEL</a>
                                <a class="btn btn-info" onclick="_Search();"><i class="fa fa-search fa-lg"></i>&nbsp;&nbsp;@L_PAGE_SEARCH</a>

                            </div>
                        </div> @*end row2*@
                    </div>
                </div> @*end SearchPanel2*@
            </div>
        </div>
    </div>
    <div id="gridresult" class="row">
        <div class="col-sm-12 col-md-12 ">

            @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.ReportRequestFormListDetail>()
                                .Name("gridRequestForm")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.RowNumber).Title("NO.").HtmlAttributes(new { style = "text-align:center;" }).Width(50); 
                            columns.Bound(p => p.TYPE_CUSTOMER_REQUEST).Title(@L_GRID_TYPE_CUSTOMER_REQUEST).HtmlAttributes(new { style = "text-align:left;" }).Width(220);
                            columns.Bound(p => p.CREATED_DT).Title(@L_GRID_CREATE_DT).HtmlAttributes(new { style = "text-align:center;" }).Width(120);
                            columns.Bound(p => p.CUSTOMER_FIRST_NAME).Title(@L_GRID_CUSTOMER_FIRST_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.CUSTOMER_LAST_NAME).Title(@L_GRID_CUSTOMER_LAST_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.CONTRACT_PHONE).Title(@L_GRID_CONTRACT_PHONE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                            columns.Bound(p => p.DORMITORY_NAME).Title(@L_GRID_DORMITORY_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.TYPE_DORMITORY).Title(@L_GRID_TYPE_DORMITORY).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.HOME_NO).Title(@L_GRID_HOME_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.MOO).Title(@L_GRID_MOO).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.SOI).Title(@L_GRID_SOI).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.STREET).Title(@L_GRID_STREET).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.Tumbon).Title(@L_GRID_TUMBON).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                            columns.Bound(p => p.AMPHUR).Title(@L_GRID_AMPHUR).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                            columns.Bound(p => p.province).Title(@L_GRID_PROVINCE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                            columns.Bound(p => p.ZIPCODE).Title(@L_GRID_ZIPCODE).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.Region_Code).Title(@L_GRID_REGION_CODE).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.A_BUILDING).Title(@L_GRID_BUILDING).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.A_UNIT).Title(@L_GRID_UNIT).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.A_LIVING).Title(@L_GRID_LIVING).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                            columns.Bound(p => p.PHONE_CABLE).Title(@L_GRID_PHONE_CABLE).HtmlAttributes(new { style = "text-align:center;" }).Width(120);
                            columns.Bound(p => p.PROBLEM_INTERNET).Title(@L_GRID_PROBLEM_INTERNET).HtmlAttributes(new { style = "text-align:left;" }).Width(300);
                            columns.Bound(p => p.A_UNIT_USE_INTERNET).Title(@L_GRID_UNIT_USE_INTERNET).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.OLD_SYSTEM).Title(@L_GRID_OLD_SYSTEM).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                            columns.Bound(p => p.OLD_VENDOR_SERVICE).Title(@L_GRID_OLD_VENDOR_SERVICE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
                            columns.Bound(p => p.SEND_TO_SALE_DT).Title(@L_GRID_SEND_TO_SALE_DT).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.PROCESS_STATUS).Title(@L_GRID_PROCESS_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(150);


                        })
                        .ToolBar(toolbar => toolbar.Template("" +
                            "<div class='pull-right'><a onclick='_ExportToExcel()' id='btnExport'  class='btn btn-default'><i class='fa fa-reply fa-lg'></i>&nbsp;"
                                 + @L_PAGE_EXPORT + "</a>&nbsp;</div>"))
                            .Scrollable(scrollable => scrollable.Height("auto"))
                            .Pageable(pageable => pageable
                                        //.PageSizes(true)
                                                .Numeric(true)
                                                .PageSizes(new int[] { 20, 50, 100 })
                             )
                            
                            //.Sortable()
                            .AutoBind(false)
                    //.Filterable()
                    
                            .DataSource(dataSource => dataSource
                                
                                        .Ajax()
                                        .PageSize(20)
                                //.Sort(sort => sort.Add(p => p.sale_key_dt).Descending())
                                        .Read(read => read.Action("SearchDataSourceRequest", "RequestFormReport")
                                        
                                        .Data("bindingValue") )
                                        //.Total(50)
                                        
                                        )
                                        
                            .Events(e => e.DataBound("onGridDataBound"))
            )
        </div>
    </div>

    <script type="text/javascript">

        $(document).ready(function () {
            $('#btnExport').attr("disabled", true);

            var todayDate = new Date();
            $("#dtpDateFrom").data("kendoDatePicker").value();
            $("#dtpDateTo").data("kendoDatePicker").value();

            //$("#divDateFrom").kendoValidator({
            //    rules: {
            //        date: function (input) {
            //            var d = kendo.parseDate(input.val(), "dd/mm/yyyy");
            //            return d instanceof Date;
            //        }
            //    }
            //});

            //Kendo DatePicker Validator  
            //$("#dtpDateFrom").kendoValidator({
            //    rules: {
            //        //implement your custom date validation  
            //        dateValidation: function (e) {
            //            console.log("e", e);
            //            var currentDate = Date.parse($(e).val());
            //            //Check if Date parse is successful  
            //            if (!currentDate) {
            //                return false;
            //            }
            //            return true;
            //        }
            //    },
            //    messages: {
            //        dateValidation: " <div class='i-fg-data-entry-validation' id='validatefor-dtpDateTo'>Invalid date format</div>" //"<span class='required'>Invalid date format</span>"
            //    }
            //});

        });

        function _ExportToExcel() {
            var model = new defaultData();
            window.open("/RequestFormReport/ExportExcelRequestForm?dataS=" + JSON.stringify(model) + "");

        }

     
        function ValidationDateValue(model) {

            var chk = ValidationProcessing("dateselect");

            if (chk) //check blank value
            {
                //DateFrom
                if ($("#dtpDateFrom").val() != "") {
                    if (!kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy")) {

                        $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is not correct format. : DD/MM/YYYY");
                        chk = false;
                    }
                }
                else  {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }

                ///DateTo
                if ($("#dtpDateTo").val() != "") {
                    if (!kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy")) {

                        $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is not correct format. : DD/MM/YYYY");
                        chk = false;
                    }

                }
                else  {
                    $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }

            }
            return chk;
        }


        var RequestFormModel = function () {
            P_DATE_FROM: "";
            P_DATE_TO: "";
            P_REGION_CODE: "";
            P_PROVINCE: "";
            P_PROCESS_STATUS: "";
            P_PAGE_INDEX: "";
            P_PAGE_SIZE: "";

            
        }

        function defaultData() {

            var searchModel = new RequestFormModel();
            searchModel.P_DATE_FROM = $("#dtpDateFrom").val();
            searchModel.P_DATE_TO = $("#dtpDateTo").val();
            searchModel.P_REGION_CODE = $("#RegionCode").val();
            searchModel.P_PROVINCE = $("#Province").data("kendoDropDownList").text();
            searchModel.P_PROCESS_STATUS = $("#Status").val();
            searchModel.P_PAGE_INDEX = $("#gridRequestForm").data("kendoGrid").dataSource._page;
            searchModel.P_PAGE_SIZE = $("#gridRequestForm").data("kendoGrid").dataSource._pageSize;

            //alert(searchModel.P_PROCESS_STATUS);

            return searchModel;
        }

        function bindingValue() {
            var model = defaultData();
            return {
                dataS: JSON.stringify(model)
            };
            
        }

        function onGridDataBound() {
            Loading(0);

            $('#btnExport').attr("disabled", false);

            if (this.dataSource.view().length == 0) {
                //insert empty row
                //alert(dataSource.view().length);
                var colspan = this.thead.find("th").length;
                var emptyRow = "<tr><td colspan='" + colspan + "'></td></tr>";
                this.tbody.html(emptyRow);

                //workarounds for IE lt 9
                //this.table.width(800);
                //$(".k-grid-content").width(2 * kendo.support.scrollbar());
                $(".k-grid-content").height(3 * kendo.support.scrollbar());

                $('#btnExport').attr("disabled", true);
            }
            else {
                $(".k-grid-content").height("auto");
            }
        }

        function _Search() {
            var model = defaultData();
            var chk = ValidationDateValue();

            var grid = $("#gridRequestForm").data("kendoGrid");
            var scrollLeft = grid.content[0].scrollTop;
            grid.dataSource.data([]);
            grid.dataSource.pageSize(20);
            grid.content[0].scrollLeft = scrollLeft;
            grid.refresh();

            if (chk) {
                Loading();
                
                grid.dataSource.page(1);
            }
            

            if (kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy")){
                $("#validatefor-" + "dtpDateFrom").html("");
            }
            if(kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy")){
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        function _Clear() {

            var todayDate = new Date();
            $("#dtpDateFrom").data("kendoDatePicker").value('');
            $("#dtpDateTo").data("kendoDatePicker").value('');

            //reset min, max.
            $("#dtpDateFrom").data("kendoDatePicker").max(new Date(2099, 11, 31, 0, 0, 0, 0));
            $("#dtpDateTo").data("kendoDatePicker").min(new Date(1900, 0, 1, 0, 0, 0, 0));

            $("#validatefor-dtpDateTo").html("");
            $("#validatefor-dtpDateFrom").html("");

            $('#btnExport').attr("disabled", true);

           
            var grid = $("#gridRequestForm").data("kendoGrid");
            var scrollLeft = grid.content[0].scrollTop;
            grid.dataSource.data([]);
            grid.dataSource.pageSize(20);
            grid.content[0].scrollLeft = scrollLeft;
            grid.refresh();


            var dropdownlist3 = $("#RegionCode").data("kendoDropDownList");
            dropdownlist3.select(0);
            $("#Province").data("kendoDropDownList").dataSource.read({ regionCode: "" });
            $("#Province").data("kendoDropDownList").select(0);
            $("#Status").data("kendoDropDownList").select(0);


        }




        function Change_dtpDateFrom() {

            var startPicker = $("#dtpDateFrom").data("kendoDatePicker").value();
            var endPicker = $("#dtpDateTo").data("kendoDatePicker").value();
            if (endPicker < startPicker
                && ($("#dtpDateFrom").data("kendoDatePicker").value() != ''
                && (kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy")))) {
                //alert(endPicker);
                $("#dtpDateTo").data("kendoDatePicker").value(startPicker);
            }

        }

        function Change_dtpDateTo() {

            var startPicker = $("#dtpDateFrom").data("kendoDatePicker").value();
            var endPicker = $("#dtpDateTo").data("kendoDatePicker").value();
            //alert($("#dtpDateTo").data("kendoDatePicker").value().text)
            if ((endPicker < startPicker)
                && ($("#dtpDateTo").data("kendoDatePicker").value() != ''
                && (kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy")))
                 ) {
                //alert(endPicker);
                $("#dtpDateFrom").data("kendoDatePicker").value(endPicker);
            }

        }
        function onRegionChange() {

            $("#Province").data("kendoDropDownList").dataSource.read({ regionCode: $("#RegionCode").data("kendoDropDownList").value() });

            $("#Province").data("kendoDropDownList").select(0);
        }

        function onProvinceChange() {
        }
        function onStatusChange() {
        }

        

    </script>
</body>
</html>