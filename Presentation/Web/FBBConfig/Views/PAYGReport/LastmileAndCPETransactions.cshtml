@model WBBEntity.PanelModels.FBBWebConfigModels.LastmileAndCPEReportModel
@using WBBEntity.PanelModels;
@{
    string L_PAGE_CANCEL = "ล้างข้อมูล";
    string L_PAGE_SEARCH = "ค้นหา";
    string L_PAGE_EXPORT = "Export to Excel";
    string L_PAGE_SEARCH_PANEL = "Search Panel";
    string L_PAGE_NAME = "Report Name: Summary Last mile and CPE Transactions";
    string L_GRID_OLT_VENDER = "";
    string L_GRID_PHASE = "";
    string L_GRID_REGION = "";
    string L_GRID_DISTRICT = "";
    string L_GRID_SUB_DISTRICT = "";
    string L_GRID_OLT_NAME = "";
    string L_GRID_REGISTER_DT = "";
    string L_GRID_NO_OF_REG = "";
    string L_GRID_APPROVE = "";
    string L_GRID_TOP_APPROVE = "";
    string L_GRID_PAID_LAST = "";
    string L_GRID_NOTPAID_LAST = "";
    string L_GRID_REM_LAST = "";
    string L_GRID_PAID_ONT = "";
    string L_GRID_NOTPAID_PNT = "";
    string L_GRID_REM_ONT = "";
    string L_GRID_INDOOR = "";
    string L_GRID_OUTDOOR = "";

    string TOPUP_STATUS_WAITING = "";
    string TOPUP_STATUS_PAID = "";
    string TOPUP_STATUS_NOTPAID = "";

    string R_HEADER_product = "";
    string R_HEADER_addresid = "";

    string L_PAGE_DATE_FROM = "Date From";
    string L_PAGE_DATE_TO = "Date To";


    if (ViewBag.configscreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.configscreen;

        L_PAGE_NAME = configscreen.Any(f => f.Name == "LABEL_report_name") ? configscreen.First(f => f.Name == "LABEL_report_name").LovValue1 : "";
        L_GRID_OLT_VENDER = configscreen.Any(f => f.Name == "R_HEADER_olt_vendor") ? configscreen.First(f => f.Name == "R_HEADER_olt_vendor").LovValue1 : "";
        L_GRID_PHASE = configscreen.Any(f => f.Name == "R_HEADER_phase") ? configscreen.First(f => f.Name == "R_HEADER_phase").LovValue1 : "";
        L_GRID_REGION = configscreen.Any(f => f.Name == "R_HEADER_region") ? configscreen.First(f => f.Name == "R_HEADER_region").LovValue1 : "";
        L_GRID_DISTRICT = configscreen.Any(f => f.Name == "R_HEADER_district") ? configscreen.First(f => f.Name == "R_HEADER_district").LovValue1 : "";
        L_GRID_SUB_DISTRICT = configscreen.Any(f => f.Name == "R_HEADER_sub_district") ? configscreen.First(f => f.Name == "R_HEADER_sub_district").LovValue1 : "";
        L_GRID_OLT_NAME = configscreen.Any(f => f.Name == "R_HEADER_olt_name") ? configscreen.First(f => f.Name == "R_HEADER_olt_name").LovValue1 : "";
        L_GRID_REGISTER_DT = configscreen.Any(f => f.Name == "R_HEADER_register_dt") ? configscreen.First(f => f.Name == "R_HEADER_register_dt").LovValue1 : "";
        L_GRID_NO_OF_REG = configscreen.Any(f => f.Name == "R_HEADER_no_of_reg") ? configscreen.First(f => f.Name == "R_HEADER_no_of_reg").LovValue1 : "";
        L_GRID_APPROVE = configscreen.Any(f => f.Name == "R_HEADER_approve") ? configscreen.First(f => f.Name == "R_HEADER_approve").LovValue1 : "";
        L_GRID_TOP_APPROVE = configscreen.Any(f => f.Name == "R_HEADER_tob_approve") ? configscreen.First(f => f.Name == "R_HEADER_tob_approve").LovValue1 : "";
        L_GRID_PAID_LAST = configscreen.Any(f => f.Name == "R_HEADER_paid_last") ? configscreen.First(f => f.Name == "R_HEADER_paid_last").LovValue1 : "";
        L_GRID_NOTPAID_LAST = configscreen.Any(f => f.Name == "R_HEADER_notpaid_last") ? configscreen.First(f => f.Name == "R_HEADER_notpaid_last").LovValue1 : "";
        L_GRID_REM_LAST = configscreen.Any(f => f.Name == "R_HEADER_rem_last") ? configscreen.First(f => f.Name == "R_HEADER_rem_last").LovValue1 : "";
        L_GRID_PAID_ONT = configscreen.Any(f => f.Name == "R_HEADER_paid_ont") ? configscreen.First(f => f.Name == "R_HEADER_paid_ont").LovValue1 : "";
        L_GRID_NOTPAID_PNT = configscreen.Any(f => f.Name == "R_HEADER_notpaid_pnt") ? configscreen.First(f => f.Name == "R_HEADER_notpaid_pnt").LovValue1 : "";
        L_GRID_REM_ONT = configscreen.Any(f => f.Name == "R_HEADER_rem_ont") ? configscreen.First(f => f.Name == "R_HEADER_rem_ont").LovValue1 : "";
        L_GRID_INDOOR = configscreen.Any(f => f.Name == "R_HEADER_indoor") ? configscreen.First(f => f.Name == "R_HEADER_indoor").LovValue1 : "";
        L_GRID_OUTDOOR = configscreen.Any(f => f.Name == "R_HEADER_outdoor") ? configscreen.First(f => f.Name == "R_HEADER_outdoor").LovValue1 : "";
        TOPUP_STATUS_WAITING = configscreen.Any(f => f.Name == "TOPUP_STATUS_waiting") ? configscreen.First(f => f.Name == "TOPUP_STATUS_waiting").LovValue1 : "";
        TOPUP_STATUS_PAID = configscreen.Any(f => f.Name == "TOPUP_STATUS_paid") ? configscreen.First(f => f.Name == "TOPUP_STATUS_paid").LovValue1 : "";
        TOPUP_STATUS_NOTPAID = configscreen.Any(f => f.Name == "TOPUP_STATUS_notpaid") ? configscreen.First(f => f.Name == "TOPUP_STATUS_notpaid").LovValue1 : "";

        R_HEADER_product = configscreen.Any(f => f.Name == "R_HEADER_product") ? configscreen.First(f => f.Name == "R_HEADER_product").LovValue1 : "";
        R_HEADER_addresid = configscreen.Any(f => f.Name == "R_HEADER_addresid") ? configscreen.First(f => f.Name == "R_HEADER_addresid").LovValue1 : "";
        L_PAGE_DATE_FROM = configscreen.Any(f => f.Name == "LABEL_regist_date_fr") ? configscreen.First(f => f.Name == "LABEL_regist_date_fr").LovValue1 : "Regist date from :";
        L_PAGE_DATE_TO = configscreen.Any(f => f.Name == "LABEL_regist_date_to") ? configscreen.First(f => f.Name == "LABEL_regist_date_to").LovValue1 : "To :";

    }

}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <style>
        #gridOverviewStatus .k-grid-content {
            min-height: 100px;
            max-height: 540px;
        }
    </style>
    <script src="~/Scripts/kendo/2014.1.415/jszip.min.js"></script>
</head>
<body>
    <div class="page-header i-header-fit">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <h3 style="margin-top: 0">@L_PAGE_NAME</h3>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12">
            <div class="panel panel-success">
                <div class="panel-heading">
                    <h3 class="panel-title">
                        <span>Criteria Panel</span>
                        <a data-toggle="collapse" class="pull-right" href="#SearchPanel1" onclick="onPanelToggle(this);" id="SearchPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow1"></i></a>
                    </h3>
                </div>
                <div id="SearchPanel1" class="panel-collapse collapse in">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-sm-12 col-md-12">
                                <label>Criteria : <span id="lblCariteris"></span></label>
                                @*<label id="lblCariteris"></label>*@
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 col-md-12">
                                <label>Run report date/time : <span id="lblDate"></span></label>
                                @*<label id="lblDate"></label>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-12 col-md-12">
            <div class="panel panel-success">
                <div class="panel-heading">
                    <h3 class="panel-title">
                        <span>@L_PAGE_SEARCH_PANEL</span>
                        <a data-toggle="collapse" class="pull-right" href="#SearchPanel2" onclick="onPanelToggle(this);" id="SearchPanelHeader2"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow2"></i></a>
                    </h3>
                </div>
                <div id="SearchPanel2" class="panel-collapse collapse in">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-sm-4 col-md-4">
                                <label>@L_GRID_OLT_VENDER</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DropDownList()
                                .Name("ddtOLT")
                                .DataTextField("VALUE")
                                .DataValueField("VALUE")
                                .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("p_get_vendor_brand", "PAYGReport");
                                    });
                                })
                                    )
                                </div>
                            </div>
                            <div class="col-sm-4 col-md-4">
                                <label>@L_GRID_PHASE</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DropDownList()
                                        .Name("ddtPhase")
                                        .DataTextField("VALUE")
                                                .DataValueField("VALUE")
                                        .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("p_get_olt_phase", "PAYGReport");
                                            });
                                        })
                                    )
                                </div>
                            </div>
                            <div class="col-sm-4 col-md-4">
                                <label>@L_GRID_REGION</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DropDownList()
                                    .Name("ddtRegion")
                                    .DataTextField("VALUE")
                                            .DataValueField("VALUE")
                                .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("p_get_region", "PAYGReport");
                                    });
                                }))
                                </div>
                            </div>
                        </div>
                        <div class="row i-gap-top-1">
                            <div class="col-sm-4 col-md-4">
                                <label>@R_HEADER_product</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DropDownList()
                                  .Name("ddlProductName")
                                  .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                  .DataTextField("VALUE")
                                    .DataValueField("VALUE")
                                  .DataSource(source =>
                                  {
                                      source.Read(read =>
                                      {
                                          read.Action("p_get_product", "PAYGReport");
                                      });
                                  })
                                    )
                                </div>
                            </div>

                            <div class="col-sm-4 col-md-4">
                                <label>@L_PAGE_DATE_FROM</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DatePicker().Name("dtpDateFrom")
                                 .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                 .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                 .Format("dd/MM/yyyy")
                                 .Min(new DateTime(1900, 1, 1))
                                 .Max(new DateTime(2099, 12, 31))
                                 .Events(e => e.Change("ChangdtpDateFrom")))
                                </div>
                                <div class="i-fg-data-entry-validation" id="validatefor-dtpDateFrom"></div>
                                <span class="k-invalid-msg" data-for="PickupDate"></span>
                            </div>
                            <div class="col-sm-4 col-md-4">
                                <label>@L_PAGE_DATE_TO</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DatePicker().Name("dtpDateTo")
                                 .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                 .Format("dd/MM/yyyy")
                                 .Min(new DateTime(1900, 1, 1))
                                 .Max(new DateTime(2099, 12, 31))
                                 .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                 .Events(e => e.Change("ChangdtpDateTo")))
                                </div>
                                <div class="i-fg-data-entry-validation" id="validatefor-dtpDateTo"></div>
                            </div>

                            <div class="col-sm-3 col-md-3" style="display:none">
                                <label>@R_HEADER_addresid</label>
                                <div class="i-fg-data-entry" id="div_ddladdressid">
                                    <select id="ddladdressid" multiple="multiple" data-placeholder='All'></select>
                                </div>
                            </div>
                            <div class="col-sm-1 col-md-1" style="display:none">
                                <label>&nbsp;</label>
                                <div class="i-fg-data-entry">
                                    <a style="padding: 3px 6px;" class="btn btn-default" onclick="call_pop_AddressID();"><i class="fa fa-search fa-lg"></i></a>
                                </div>
                            </div>
                        </div>
                        <div id="Row1" class="row i-gap-top-1" style="display:none">
                        </div>
                        @*end row1*@
                        <div id="row3" class="row i-gap-top-1">
                            <div class="col-sm-12 col-md-6">
                                <div class="i-text-align-right">
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-6 i-text-align-right">
                                <a class="btn btn-default" onclick="_Clear();"><i class="fa fa-ban fa-lg"></i>&nbsp;&nbsp;@L_PAGE_CANCEL</a>
                                <a class="btn btn-info" onclick="_Search();"><i class="fa fa-search fa-lg"></i>&nbsp;&nbsp;@L_PAGE_SEARCH</a>
                            </div>
                        </div>

                    </div> @*end SearchPanel2*@
                </div>
            </div>

        </div>
    </div>
    <div id="gridresult" class="row">
        <div class="col-sm-12 col-md-12 ">

            @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.LastmileAndCPEReportList>()
                        .Name("gridOverviewStatus")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.DEVICE_VENDOR).Title(@L_GRID_OLT_VENDER).HtmlAttributes(new { style = "text-align:left;" }).Width(250);
                            columns.Bound(p => p.PHASE_PO).Title(@L_GRID_PHASE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.REGION).Title(@L_GRID_REGION).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.DISTRICT).Title(@L_GRID_DISTRICT).HtmlAttributes(new { style = "text-align:left;" }).Width(250);
                            columns.Bound(p => p.SUB_DISTRICT).Title(@L_GRID_SUB_DISTRICT).HtmlAttributes(new { style = "text-align:left;" }).Width(250);
                            columns.Bound(p => p.OLT_NAME).Title(@L_GRID_OLT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(250).ClientFooterTemplate("TOTALS");
                            columns.Bound(p => p.REGISTER_DT).Title(@L_GRID_REGISTER_DT).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:dd/MM/yyyy}").Width(300);
                            columns.Bound(p => p.TO_BE_APPROVE).Title(@L_GRID_APPROVE).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.APPROVE).Title(@L_GRID_TOP_APPROVE).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.PAID_LASTMILE_IND).Title(@L_GRID_INDOOR).HtmlAttributes(new { style = "text-align:center;" }).Width(100).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.PAID_LASTMILE_OUT).Title(@L_GRID_OUTDOOR).HtmlAttributes(new { style = "text-align:center;" }).Width(100).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.NOT_PAID_LASTMILE_IND).Title(@L_GRID_INDOOR).HtmlAttributes(new { style = "text-align:center;" }).Width(100).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.NOT_PAID_LASTMILE_OUT).Title(@L_GRID_OUTDOOR).HtmlAttributes(new { style = "text-align:center;" }).Width(100).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.REM_PAID_LASTMILE_IND).Title(@L_GRID_INDOOR).HtmlAttributes(new { style = "text-align:center;" }).Width(100).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.REM_PAID_LASTMILE_OUT).Title(@L_GRID_OUTDOOR).HtmlAttributes(new { style = "text-align:center;" }).Width(100).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.PAID_ONT).Title(@L_GRID_PAID_ONT).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.NOT_PAID_ONT).Title(@L_GRID_NOTPAID_PNT).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                            columns.Bound(p => p.REM_PAID_ONT).Title(@L_GRID_REM_ONT).HtmlAttributes(new { style = "text-align:center;" }).Width(200).ClientFooterTemplate("<div style='text-align: center'>#= sum #</div>");
                        })
                            .ToolBar(toolbar => toolbar.Template("" +
                                "<div class='pull-right'><a onclick='_ExportToExcel()' id='btnExport'  class='btn btn-default'><i class='fa fa-reply fa-lg'></i>&nbsp;" + @L_PAGE_EXPORT + "</a>&nbsp;</div>"
                            ))
                            .Scrollable(scrollable => scrollable.Height("auto"))
                            .Pageable(pageable => pageable
                            .Numeric(true)
                            .PageSizes(new int[] { 20, 50, 100 })
                            )
                            .Sortable()
                            .AutoBind(false)
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(20)
                                .Read(read => read.Action("ReadReport01Search", "PAYGReport").Data("bindingValue"))
                                .Aggregates(aggregates =>
                                {
                                    aggregates.Add(p => p.TO_BE_APPROVE).Sum();
                                    aggregates.Add(p => p.APPROVE).Sum();
                                    aggregates.Add(p => p.PAID_LASTMILE_IND).Sum();
                                    aggregates.Add(p => p.PAID_LASTMILE_OUT).Sum();
                                    aggregates.Add(p => p.NOT_PAID_LASTMILE_IND).Sum();
                                    aggregates.Add(p => p.NOT_PAID_LASTMILE_OUT).Sum();
                                    aggregates.Add(p => p.REM_PAID_LASTMILE_IND).Sum();
                                    aggregates.Add(p => p.REM_PAID_LASTMILE_OUT).Sum();
                                    aggregates.Add(p => p.PAID_ONT).Sum();
                                    aggregates.Add(p => p.NOT_PAID_ONT).Sum();
                                    aggregates.Add(p => p.REM_PAID_ONT).Sum();
                                })
                                 .ServerOperation(false)
                                )
                            .Events(e => e.DataBound("onGridDataBound"))

            )
            @(Html.Kendo().Window()
                .HtmlAttributes(new { @class = "i-gap-popup" })
                .Name("PopAddressID")
                .Width(500)
                .Height(500)
                .Draggable()
                .Resizable()
                .Pinned(false)
                .Visible(false)
                .Title(@R_HEADER_addresid)
                .Actions(actions => actions.Close())
                .Content(
                @<text>
                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.FBBPAYG_Dropdown>()
                        .Name("GridAddressID")
                        .Columns(columns =>
                                {
                                    columns.Bound(p => p.VALUE).ClientTemplate("<input type='checkbox'/>").HtmlAttributes(new { style = "text-align:center;" }).Width(30)
                                    .HeaderTemplate("<input type='checkbox' onclick='allcheckbox_change(this)' style='text-align:center;' />").HtmlAttributes(new { style = "text-align:center;" });
                                    columns.Bound(p => p.VALUE).Title(@R_HEADER_addresid).HtmlAttributes(new { style = "text-align:left;" });
                                }
                        )
                        .ToolBar(toolbar => toolbar.Template(
                              "<div class='pull-right'><a onclick='_PopSelect()' id='btnPopSelect'  class='btn btn-default'><i class='fa fa-check-square-o fa-lg'></i>Select</a>&nbsp;</div>"
                            + "<div class='pull-right'><a onclick='_PopSearch()' id='btnPopSearch' class='btn btn-primary'><i class='fa fa-search fa-lg'></i>Select</a>&nbsp;</div>"
                            + "<div class='pull-left col-sm-6 col-md-6'><input id='txtPopSearch' onkeypress= 'return _PopSearchEnter(event)' class='k-textbox form-control' type='text'></div>"

                        ))
                        
                        .Pageable(pageable => pageable
                        .Numeric(true)
                        .PageSizes(new int[] { 20, 50, 100 })
                        )
                        .AutoBind(false)
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                                .Read(read => read.Action("p_get_address_id_Model", "PAYGReport").Data("binding_p_get_address_id"))
                                .ServerOperation(false)
                            )
                        .Events(e => e.DataBound("onGridDataBound"))
                    )
                </text>)
            )
        </div>
    </div><script>
    var rowNumber = 0;
    var criteriaVal = '';
    var dateVal = '';

    ReplaceDateTimeReport();
    $(document).ready(function () {

        $('#btnExport').attr("disabled", true);

        $('#gridOverviewStatus').data().kendoGrid.thead.prepend("<tr class=\"k-link\" style = \"text-align:center;\"><td colspan=1></td><td colspan=1></td><td colspan=1></td><td colspan=1></td><td colspan=1></td>" +
            "<td colspan=1></td><td colspan=1></td><td colspan=2 class=\"k-grid-header\" style=\"background-color:#f2f2f2;\">@L_GRID_NO_OF_REG</td><td colspan=2 class=\"k-grid-header\" style=\"background-color:#f2f2f2;\"> @L_GRID_PAID_LAST </td>" +
            "<td colspan=2 class=\"k-grid-header\" style=\"background-color:#f2f2f2;\">@L_GRID_NOTPAID_LAST</td>" +
            "<td colspan=2 class=\"k-grid-header\" style=\"background-color:#f2f2f2;\">@L_GRID_REM_LAST</td><td colspan=1></td><td colspan=1></td><td colspan=1></td></tr>");

        // border multiselect kendo
        //OnRegionChange();

        $("#ddladdressid").prop("disabled", false);
        $("#ddladdressid").kendoMultiSelect();
        $("#ddladdressid").data("kendoMultiSelect").refresh();
    });

    function post(path, params, method) {

        method = method || "post"; // Set method to post by default if not specified.

        // The rest of this code assumes you are not using a library.
        // It can be made less wordy if you use one.
        var form = document.createElement("form");
        form.setAttribute("method", method);
        form.setAttribute("action", path);

        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", params[key]);

                form.appendChild(hiddenField);
            }
        }

        document.body.appendChild(form);
        form.submit();
    }

    function _ExportToExcel() {
        //var model = new defaultData();
        var model = temp_model;
        var criterModel = new criterData();
        window.open("/PAYGReport/ExportSumLastMileReport?dataS=" + JSON.stringify(model) + "&criteria=" + JSON.stringify(criterModel) + "");
    }

    function onGridDataBound() {
        Loading(0);
        if (this.dataSource.view().length == 0) {
            //insert empty row

            var colspan = this.thead.find("th").length;
            //alert(colspan)
            var emptyRow = "<tr><td colspan='" + colspan + "'></td></tr>";
            this.tbody.html(emptyRow);

            //workarounds for IE lt 9
            //this.table.width(800);
            //$(".k-grid-content").width(2 * kendo.support.scrollbar());
            $(".k-grid-content").height(3 * kendo.support.scrollbar());
        }
        else {
            $(".k-grid-content").height("auto");
        }

        $('#btnExport').attr("disabled", !(this.dataSource.view().length != 0));
    }

    function onRegionChange() {

    }

    function resetRowNumber() {
        rowNumber = 0;
    }
    function renderNumber(data) {
        return ++rowNumber;
    }


    var LastmileAndCPEReportModel = function () {
        oltbrand: "";
        phase: "";
        region: "";
        product: "";
        addressid: "";

        dateFrom: "";
        dateTo: "";
    }

    function defaultData() {
        var phaseVal = $("#ddtPhase").val();
        var returnPhase = '';

        switch (phaseVal.toLowerCase()) {
            case 'all':
                returnPhase = 'ALL';
                break;
            case 'null':
                returnPhase = '';
                break;
            default:
                returnPhase = phaseVal;
                break;
        }

        var searchModelawc = new LastmileAndCPEReportModel();
        searchModelawc.oltbrand = ($("#ddtOLT").val() == 'All') ? 'ALL' : $("#ddtOLT").val();
        searchModelawc.phase = returnPhase;
        searchModelawc.region = ($("#ddtRegion").val() == 'All') ? 'ALL' : $("#ddtRegion").val();
        searchModelawc.product = ($("#ddlProductName").val() == 'All') ? 'ALL' : $("#ddlProductName").val();
        searchModelawc.addressid = GetValue_ddladdressid();

        searchModelawc.dateFrom = kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy");
        searchModelawc.dateTo = kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy");
        return searchModelawc;
    }
    function _Clear() {
        $("#ddtOLT").data("kendoDropDownList").select(0);
        $("#ddtPhase").data("kendoDropDownList").select(0);
        $("#ddtRegion").data("kendoDropDownList").select(0);
        $("#ddlProductName").data("kendoDropDownList").select(0);
        $('#btnExport').attr("disabled", true);
        $("#lblCariteris").empty();
        //$("#lblDate").empty();

        criteriaVal = '';
        dateVal = '';

        $("#gridOverviewStatus").data("kendoGrid").dataSource.data([]);

        $("#dtpDateFrom").data("kendoDatePicker").value("");
        $("#dtpDateTo").data("kendoDatePicker").value("");
        //reset min, max.
        $("#dtpDateFrom").data("kendoDatePicker").max(new Date(2099, 11, 31, 0, 0, 0, 0));
        $("#dtpDateTo").data("kendoDatePicker").min(new Date(1900, 0, 1, 0, 0, 0, 0));
        $("#validatefor-dtpDateTo").html("");
        $("#validatefor-dtpDateFrom").html("");
    }

    function GetValue_ddladdressid() {
        var _ddladdressid = $("#ddladdressid").val()
        var result = "";
        if (_ddladdressid != null) {
            if (_ddladdressid != undefined) {
                for (var i = 0 ; i < _ddladdressid.length; i++) {
                    if (result == "") {
                        result += _ddladdressid[i];
                    } else {
                        result += "," + _ddladdressid[i];
                    }
                }
            }
        }
        if (result == "") result = "ALL";
        return result;
    }

    function GetText_ddladdressid() {
        var result = "";
        $("#ddladdressid option:selected").each(function (i, e) {

            if (result == "") {
                result += e.text;
            }
            else {
                result += "," + e.text;
            }
        });
        if (result == "") result = "ALL";
        return result;
    }

    var temp_model;
    function _Search() {
        var model = defaultData();
        temp_model = model;
        var chk = ValidationDateValue();
        if (chk) {
            if (model.oltbrand == "" && model.phase == "" && model.region == "") {
                showFeedback("warning", "Please choose at least one condition.");
            }
            else {
                Loading();
                $("#gridOverviewStatus").data("kendoGrid").dataSource.data([]);
                var grid = $("#gridOverviewStatus").data("kendoGrid");
                grid.dataSource.page(1);
                //$.ajax({
                //    url: '/PAYGReport/ReadSearchSumLastMileReport',
                //    data: { dataS: JSON.stringify(model) },
                //    dataType: "json",
                //    type: 'POST',
                //    success: function (response) {

                //        if (response) {
                //            if (response.item == "0") {
                //                $('#btnExport').attr("disabled", true);
                //            }
                //            else {
                //                $('#btnExport').attr("disabled", false);
                //            }

                //        }
                //        else {
                //        }
                //    },
                //    failure: function (msg) {
                //    }
                //});

                ReplaceCariteris(model);
            }
        }

    }

    function ReplaceCariteris(model) {
        var olt = "OLT_VENDER";
        var phase = "PHASE";
        var region = "REGION";
        var product = "Product";
        var addressid = "AddressID";

        var dateFrom = '@L_PAGE_DATE_FROM';
        var dateTo = '@L_PAGE_DATE_TO';

        var phaseVal = (model.phase.length == 0) ? 'NULL' : model.phase;

        var text = olt + " : " + model.oltbrand + " and " + phase + " : " + phaseVal + " and " + region + " : " + model.region + " and " +
                   dateFrom + ConvertDateTime(model.dateFrom) + " to " + ConvertDateTime(model.dateTo);
        text += " " + product + " : " + model.product
        //text += " " + addressid + " : " + GetText_ddladdressid();

        $("#lblCariteris").empty();
        $("#lblCariteris").append(text);
        criteriaVal = text;

        ReplaceDateTimeReport();
    }

    function ReplaceDateTimeReport() {
        var currDate = new Date();
        var month = new Array();
        month[0] = "Jan";
        month[1] = "Feb";
        month[2] = "Mar";
        month[3] = "Apr";
        month[4] = "May";
        month[5] = "Jun";
        month[6] = "Jul";
        month[7] = "Aug";
        month[8] = "Sep";
        month[9] = "Oct";
        month[10] = "Nov";
        month[11] = "Dec";

        var dateTxt = currDate.getDate() + ' ' + month[currDate.getMonth()] + ' ' + currDate.getFullYear() + ' ' + currDate.toLocaleTimeString();

        $("#lblDate").empty();
        $("#lblDate").append(dateTxt);
        dateVal = dateTxt;
    }

    function bindingValue() {
        Loading();
        var model = defaultData();
        return {
            dataS: JSON.stringify(model)
        };
    }

    function criterData() {

        var searchCriter = new CriterModel();
        searchCriter.REPORT = '@L_PAGE_NAME';
        searchCriter.CRITERIA = 'Criteria: ' + criteriaVal;
        searchCriter.REPORT_DATE = 'Run report date/time: ' + dateVal;

        return searchCriter;
    }

    var CriterModel = function () {

        REPORT: "";
        CRITERIA: "";
        REPORT_DATE: "";
    }

    function ChangdtpDateFrom() {

        var endPicker = $("#dtpDateTo").data("kendoDatePicker"),
        startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate());
            endPicker.min(startDate);
        }

    }

    function ChangdtpDateTo() {
        var startPicker = $("#dtpDateFrom").data("kendoDatePicker"),
        endDate = this.value();

        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate());
            startPicker.max(endDate);
        }

    }

    function ValidationDateValue() {

        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            if ($.trim($("#dtpDateFrom").val()) == '') {
                $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is required.");
                chk = false;
            }
            else {
                $("#validatefor-" + "dtpDateFrom").html("");
            }

            if ($.trim($("#dtpDateTo").val()) == '') {
                $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is required.");
                chk = false;
            }
            else {
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        if (chk) //check format
        {
            if (!kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy")) {
                if ($("#dtpDateFrom").val() != "") {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is not correct format.");
                    chk = false;
                }
            }
            else {
                $("#validatefor-" + "dtpDateFrom").html("");
            }

            if (!kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy")) {
                if ($("#dtpDateTo").val() != "") {
                    $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is not correct format.");
                    chk = false;
                }
            }
            else {
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        if (chk) //check Date From must be earlier than Date To
        {
            var startPicker = new Date(kendo.parseDate($("#dtpDateFrom").val(), "mm/dd/yyyy"));
            var endPicker = new Date(kendo.parseDate($("#dtpDateTo").val(), "mm/dd/yyyy"));

            if (startPicker > endPicker) {
                if ($("#dtpDateFrom").val() != "") {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "Date From must be earlier than Date To.");
                    chk = false;
                }
                else {
                    $("#validatefor-" + "dtpDateFrom").html("");
                }
            }
        }

        return chk;
    }

    function ConvertDateTime(dateVal) {
        var month = new Array();
        month[0] = "Jan";
        month[1] = "Feb";
        month[2] = "Mar";
        month[3] = "Apr";
        month[4] = "May";
        month[5] = "Jun";
        month[6] = "Jul";
        month[7] = "Aug";
        month[8] = "Sep";
        month[9] = "Oct";
        month[10] = "Nov";
        month[11] = "Dec";

        var dateTxt = dateVal.getDate() + ' ' + month[dateVal.getMonth()] + ' ' + dateVal.getFullYear();

        return dateTxt;
    }

    function OnRegionChange(e) {
        var _ddtRegion = $("#ddtRegion").val();
        if (_ddtRegion == "All" || _ddtRegion == "") _ddtRegion = "ALL";
        $("#ddladdressid").prop("disabled", true);
        $.ajax({
            type: "GET",
            async: true,
            data: { Region: _ddtRegion },
            url: "/PAYGReport/p_get_address_id",
            dataType: "json",
            success: function (data) {
                var _append = "";
                _append += "<select id='ddladdressid' multiple='multiple' data-placeholder='All'>";
                for (var i = 0 ; i < data.length ; i++) {
                    _append += "<option value='" + data[i].VALUE + "'>" + data[i].VALUE + "</option>";
                }
                if (data.length == 0) {
                    _append += "<option value='ALL'>All</option>";
                }
                _append += "</select>";
                $("#div_ddladdressid").html(_append);

                $("#ddladdressid").prop("disabled", false);
                $("#ddladdressid").kendoMultiSelect();
                $("#ddladdressid").data("kendoMultiSelect").refresh();
            }
        });
    }

    function call_pop_AddressID() {
        $("#PopAddressID").data("kendoWindow").center();
        $("#PopAddressID").data("kendoWindow").open();

        Loading();
        $("#GridAddressID").data("kendoGrid").dataSource.data([]);
        $("#GridAddressID").data("kendoGrid").dataSource.page(1);
    }

    function binding_p_get_address_id() {
        Loading();
        var _ddtRegion = $("#ddtRegion").val();
        if (_ddtRegion == "All" || _ddtRegion == "") _ddtRegion = "ALL";
        return { Region: _ddtRegion };
    }

    function _PopSelect() {

    }
    function allcheckbox_change(Input) {
        $('#GridAddressID input:checkbox').each(function (i, e) {
            $(e).prop("checked", $(Input).prop("checked"));
        });
    }

    function _PopSelect() {
        var _data = [];
        $("#ddladdressid option:selected").each(function (i2, e2) {
            //console.log(e2.value + " - " +$(e2).prop("selected"));
            if ($(e2).prop("selected") == true) {
                var Old_data = {
                    "VALUE": e2.value
                };
                _data.push(Old_data);
            }

        });

        var result = "";
        $('#GridAddressID').find("td").find("input:checkbox").each(function (i, e) {
            if ($(e).prop("checked") == true) {
                var item = $(e).parent().parent().children(1).get(1).innerText;
                if (item != undefined) {
                    if (item != "") {
                        var New_data = {
                            "VALUE": item
                        };
                        _data.push(New_data);
                    }
                }
            }
        });
        var GroupBy = _data_GroupBy(_data);
        $.each(GroupBy, function (i, item) {
            result += "<option value='" + GroupBy[i][0].VALUE + "' selected='selected'>" + GroupBy[i][0].VALUE + "</option>";
        });
        _PopSet(result);
    }

    function _data_GroupBy(_data) {
        var result_data = _data.reduce(function (result, current) {
            result[current.VALUE] = result[current.VALUE] || [];
            result[current.VALUE].push(current);
            return result;
        }, {});
        return result_data;
    }

    function _PopSet(Input) {
        var _append = "";
        _append += "<select id='ddladdressid' multiple='multiple' data-placeholder='All'>";
        _append += Input;
        _append += "</select>";
        $("#div_ddladdressid").html(_append);

        $("#ddladdressid").prop("disabled", false);
        $("#ddladdressid").kendoMultiSelect();
        $("#ddladdressid").data("kendoMultiSelect").refresh();
    }

    function _PopSearchEnter(e) {
        if (e.keyCode == 13) {
            _PopSearch();
        }
    }
    
    function _PopSearch() {
        var _txtPopSearch = $("#txtPopSearch").val().trim();
        var grid = $("#GridAddressID").data("kendoGrid");
        if (_txtPopSearch == "") {
            grid.dataSource.filter([]);
        }
        else {
            grid.dataSource.filter({ field: "VALUE", operator: "contains", value: $("#txtPopSearch").val() });
        }
    }

</script>
</body>

</html>