@using WBBEntity.PanelModels.FBBWebConfigModels;
@model WBBEntity.PanelModels.FBBWebConfigModels.ConfigurationRulePriorityView
@{
    ViewBag.Title = "index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
    string L_PAGE_NAME = "Configuration Rule priority";

    //Search-RulePriority
    string H_CONFIG_RULE = "";
    string SH_CONFIG_RULE = "";
    string SH_CONDITION = "";

    string L_LOOKUP_NAME = "";
    string L_SEARCH_RESULT = "";
    string L_RULE_NAME = "";
    string L_PRIORITY = "";
    string L_EFFECTIVE_START = "";
    string L_EFFECTIVE_END = "";

    string C_ACTION = "";
    string C_LOOKUP_NAME = "";
    string C_RULE_NAME = "";
    string C_PRIORITY = "";
    string C_LOOKUP_PARAM = "";
    string C_EFFECTIVE_START = "";
    string C_EFFECTIVE_END = "";

    //UPSERT-RulePriority
    string H_CONFIG_RULE_UPSERT = "";
    string SH_CONFIG_RULE_UPSERT = "";

    string L_LOOKUP_NAME_UPSERT = "";
    string L_SEARCH_RESULT_UPSERT = "";
    string L_RULE_NAME_UPSERT = "";
    string L_PRIORITY_UPSERT = "";
    string L_EFFECTIVE_START_UPSERT = "";
    string L_EFFECTIVE_END_UPSERT = "";

    string C_ACTION_UPSERT = "";
    string C_LOOKUP_NAME_UPSERT = "";
    string C_RULE_NAME_UPSERT = "";
    string C_PRIORITY_UPSERT = "";
    string C_LOOKUP_PARAM_UPSERT = "";
    string C_EFFECTIVE_START_UPSERT = "";
    string C_EFFECTIVE_END_UPSERT = "";

    string C_Field_Name = "";
    string C_Operator = "";
    string C_Value = "";
    //Message
    string M_No_Data_Search = "";
    //string M_Confirm_Delete = "";
    string M_Not_Found_Data = "";

    string M_Invalid_Format = "";
    string M_Invalid_Date = "";
    string M_Invalid_Pattern = "";
    string M_Active_Row = "";
    string M_Duplicated_Message = "";
    string M_Require_Field = "";
    string M_Confirm_Cancel_Edit = "";
    string M_Confirm_Delete = "";
    string M_Check_Row = "";
    string M_Confirm_Cancel = "";
    string M_Selected_SubDist = "";
    string M_Selected_Dist = "";
    string M_Unselect_Dist = "";
    string M_Unselect_Province = "";
    string M_Unselect_SympGroup = "";

    string M_Validate_Blank = "";
    string M_Selected_SympName = "";
    string M_Checked_Parameter = "";

    // Button
    string B_SEARCH = "Search";
    string B_CLEAR = "Clear";
    string B_NEW = "New";
    string B_DELETE = "Delete";
    string B_EDIT = "Edit";
    string B_VIEW = "View";
    string B_SAVE = "Save";
    string B_CANCEL = "Cancel";
    string B_EXPORT = "Export to Excel";
    string B_EXPORTALL = "Export All";
    string username = "";
    if (ViewBag.username != null)
    {
        username = ViewBag.username;
    }

    if (ViewBag.configscreenSearchPriority != null && ViewBag.configscreenUpsertRulePriority != null)
    {
        var configscreenSearchPriority = (List<LovModel>)ViewBag.configscreenSearchPriority;
        var configscreenUpsertRulePriority = (List<LovModel>)ViewBag.configscreenUpsertRulePriority;

        //LOV-SEARCH
        //Header and sub-header
        H_CONFIG_RULE = configscreenSearchPriority.Any(f => f.LOV_NAME == "H_Config_Rule") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "H_Config_Rule").LOV_VAL1 : "";
        SH_CONFIG_RULE = configscreenSearchPriority.Any(f => f.LOV_NAME == "SH_Config_Rule") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "SH_Config_Rule").LOV_VAL1 : "";

        //Label
        L_LOOKUP_NAME = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Lookup_Name") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Lookup_Name").LOV_VAL1 : "";
        L_SEARCH_RESULT = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Search_Result") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Search_Result").LOV_VAL1 : "";
        L_RULE_NAME = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Rule_Name") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Rule_Name").LOV_VAL1 : "";
        L_PRIORITY = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Priority") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Priority").LOV_VAL1 : "";
        L_EFFECTIVE_START = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Effective_Start") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Effective_Start").LOV_VAL1 : "";
        L_EFFECTIVE_END = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Effective_End") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Effective_End").LOV_VAL1 : "";

        //Caption
        C_ACTION = configscreenSearchPriority.Any(f => f.LOV_NAME == "C_Action") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "C_Action").LOV_VAL1 : "";
        C_LOOKUP_NAME = configscreenSearchPriority.Any(f => f.LOV_NAME == "L_Lookup_Name") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "L_Lookup_Name").LOV_VAL1 : "";
        C_RULE_NAME = configscreenSearchPriority.Any(f => f.LOV_NAME == "C_Rule_Name") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "C_Rule_Name").LOV_VAL1 : "";
        C_PRIORITY = configscreenSearchPriority.Any(f => f.LOV_NAME == "C_Priority") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "C_Priority").LOV_VAL1 : "";
        C_LOOKUP_PARAM = configscreenSearchPriority.Any(f => f.LOV_NAME == "C_Lookup_Param") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "C_Lookup_Param").LOV_VAL1 : "";
        C_EFFECTIVE_START = configscreenSearchPriority.Any(f => f.LOV_NAME == "C_Effective_Start") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "C_Effective_Start").LOV_VAL1 : "";
        C_EFFECTIVE_END = configscreenSearchPriority.Any(f => f.LOV_NAME == "C_Effective_End") ? configscreenSearchPriority.FirstOrDefault(f => f.LOV_NAME == "C_Effective_End").LOV_VAL1 : "";

        //LOV-UPSERT
        //Header and sub-header
        H_CONFIG_RULE_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "H_Config_Rule") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "H_Config_Rule").LOV_VAL1 : "";
        SH_CONFIG_RULE_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "SH_Config_Rule") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "SH_Config_Rule").LOV_VAL1 : "";
        SH_CONDITION = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "SH_Condition") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "SH_Condition").LOV_VAL1 : "";

        //Label
        L_LOOKUP_NAME_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Lookup_Name") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Lookup_Name").LOV_VAL1 : "";
        L_SEARCH_RESULT_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Search_Result") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Search_Result").LOV_VAL1 : "";
        L_RULE_NAME_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Rule_Name") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Rule_Name").LOV_VAL1 : "";
        L_PRIORITY_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Priority") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Priority").LOV_VAL1 : "";
        L_EFFECTIVE_START_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Effective_Start") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Effective_Start").LOV_VAL1 : "";
        L_EFFECTIVE_END_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Effective_End") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Effective_End").LOV_VAL1 : "";

        //Caption
        C_ACTION_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Action") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Action").LOV_VAL1 : "";
        C_LOOKUP_NAME_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "L_Lookup_Name") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "L_Lookup_Name").LOV_VAL1 : "";
        C_RULE_NAME_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Rule_Name") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Rule_Name").LOV_VAL1 : "";
        C_PRIORITY_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Priority") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Priority").LOV_VAL1 : "";
        C_LOOKUP_PARAM_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Lookup_Param") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Lookup_Param").LOV_VAL1 : "";
        C_EFFECTIVE_START_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Effective_Start") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Effective_Start").LOV_VAL1 : "";
        C_EFFECTIVE_END_UPSERT = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Effective_End") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Effective_End").LOV_VAL1 : "";

        C_Field_Name = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Filed_Name") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Filed_Name").LOV_VAL1 : "";
        C_Operator = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Operator") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Operator").LOV_VAL1 : "";
        C_Value = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "C_Value") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "C_Value").LOV_VAL1 : "";

        //Message
        M_Invalid_Format = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Invalid_Format") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Format").LOV_VAL1 : "";
        M_Invalid_Date = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Invalid_Date") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Date").LOV_VAL1 : "";
        M_Invalid_Pattern = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Invalid_Pattern") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Invalid_Pattern").LOV_VAL1 : "";
        M_Active_Row = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Active_Row") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Active_Row").LOV_VAL1 : "";
        M_Duplicated_Message = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Duplicated_Message") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Duplicated_Message").LOV_VAL1 : "";
        M_Require_Field = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Require_Field") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Require_Field").LOV_VAL1 : "";
        M_Confirm_Cancel_Edit = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Confirm_Cancel_Edit") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Cancel_Edit").LOV_VAL1 : "";
        M_Confirm_Delete = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Confirm_Delete") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Delete").LOV_VAL1 : "";
        M_Check_Row = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Check_Row") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Check_Row").LOV_VAL1 : "";
        M_Confirm_Cancel = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Confirm_Cancel") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Confirm_Cancel").LOV_VAL1 : "";
        M_Selected_SubDist = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Selected_SubDist") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Selected_SubDist").LOV_VAL1 : "";
        M_Selected_Dist = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Selected_Dist") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Selected_Dist").LOV_VAL1 : "";
        M_Unselect_Dist = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Unselect_Dist") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Unselect_Dist").LOV_VAL1 : "";
        M_Unselect_Province = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Unselect_Province") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Unselect_Province").LOV_VAL1 : "";
        M_Unselect_SympGroup = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Unselect_SympGroup") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Unselect_SympGroup").LOV_VAL1 : "";

        M_Validate_Blank = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Validate_Blank") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Validate_Blank").LOV_VAL1 : "";
        M_Selected_SympName = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Selected_SympName") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Selected_SympName").LOV_VAL1 : "";
        M_Checked_Parameter = configscreenUpsertRulePriority.Any(f => f.LOV_NAME == "M_Checked_Parameter") ? configscreenUpsertRulePriority.FirstOrDefault(f => f.LOV_NAME == "M_Checked_Parameter").LOV_VAL1 : "";
    }
}

<style>
    label.required:after {
        color: red;
        content: " *";
    }

    .k-grid .k-grid-header .k-header .k-link {
        height: auto;
    }

    .k-grid .k-grid-header .k-header {
        white-space: normal;
        vertical-align: top;
    }

    .k-grid td {
        overflow: auto !important;
        text-overflow: initial;
    }

    .TextUpper {
        text-transform: uppercase !important;
    }

    .modal {
        text-align: center;
        padding: 0 !important;
    }

        .modal:before {
            content: '';
            display: inline-block;
            height: 100%;
            vertical-align: middle;
            margin-right: -4px;
        }

    .modal-dialog {
        display: inline-block;
        text-align: left;
        vertical-align: middle;
    }
</style>

<style>
    .loader {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-40%, -50%);
        animation: effect 1s linear infinite;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top-color: #fff;
    }

    @@keyframes effect {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }


    /* position to center */

    .loader {
        position: absolute;
        top: calc(50% - 2.5em);
        left: calc(50% - 2.5em);
    }


    /**
    * disable background
    */

    .loader-mask {
        position: fixed;
        z-index: 9998;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, .5);
        display: table;
        transition: opacity .3s ease;
    }


    .disabled-row {
        background-color: #f0f0f0;
        cursor: not-allowed;
    }

        .disabled-row input,
        .disabled-row .k-dropdown,
        .disabled-row .k-datepicker {
            pointer-events: none;
            background-color: #e0e0e0;
        }

            .disabled-row .k-dropdown .k-dropdown-wrap,
            .disabled-row .k-datepicker .k-datepicker-wrap {
                cursor: not-allowed;
            }

    .disabled-column {
        background-color: #e0e0e0;
        color: #a0a0a0;
        cursor: not-allowed;
    }

    .k-grid td input:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .hidden {
        display: none;
    }
</style>

<div class="page-header i-header-fit">
    <div class="row">
        <div class="col-sm-12 col-md-12">
            <h3 style="margin-top: 0">@H_CONFIG_RULE</h3>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-success">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <span>@SH_CONFIG_RULE</span>
                    <a data-toggle="collapse" class="pull-right" href="#SearchPanel1" onclick="onPanelToggle(this);" id="SearchPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow1"></i></a>
                </h3>
            </div>
            <div id="SearchPanel1" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-sm-12 col-md-4">
                            <label>@L_RULE_NAME</label>
                            <div class="i-fg-data-entry">
                                <input type="text" id="RULE_NAME_D" class="k-textbox form-control" />

                            </div>

                        </div>
                        <div class="col-sm-12 col-md-4">
                            <label>@L_PRIORITY</label>
                            <div class="i-fg-data-entry">
                                @(Html.Kendo().DropDownList()
                                                                                                        .Name("ddlPriorityList")
                                                                                                        //.DataTextField("DISPLAY_VAL")
                                                                                                        //.DataValueField("LOV_VAL1")
                                                                                                        //.DataTextField("DISPLAY_VAL")
                                                                                                        //.DataValueField("LOV_VAL1")
                                                                                                        .OptionLabel("ALL")
                                                                                                        .DataTextField("Value1")
                                                                                                        .DataValueField("Value1")
                                                                                                        .Filter("contains")
                                                                                                        .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                        .DataSource(source =>
                                                                                                        {
                                                                                                            source.Read(read =>
                                                                                                            {
                                                                                                                read.Action("SelectListPriority", "ConfigurationRulePriority");
                                                                                                            });
                                                                                                        })
                                                                                                                .Events(e => e.Change("TableListChange"))
                                                                                                         .SelectedIndex(0)
                                )
                            </div>
                        </div>
                        <div id="List_LOOKUP_NAME" class="col-sm-12 col-md-4">
                            <label>@L_LOOKUP_NAME</label>
                            <div class="i-fg-data-entry">
                                @(Html.Kendo().DropDownList()
                                                                                                        .Name("ddllTableList")
                                                                                                        //.DataTextField("DISPLAY_VAL")
                                                                                                        //.DataValueField("LOV_VAL1")
                                                                                                        //.DataTextField("DISPLAY_VAL")
                                                                                                        //.DataValueField("LOV_VAL1")
                                                                                                        .OptionLabel("ALL")
                                                                                                        .DataTextField("LOOKUP_NAME")
                                                                                                        .DataValueField("LOOKUP_NAME")
                                                                                                        .Filter("contains")
                                                                                                        .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                        .DataSource(source =>
                                                                                                        {
                                                                                                            source.Read(read =>
                                                                                                            {
                                                                                                                read.Action("SelectListLookupName", "ConfigurationRulePriority");
                                                                                                            });
                                                                                                        })
                                                                                                                .Events(e => e.Change("TableListChange"))
                                                                                                         .SelectedIndex(0)


                                )
                            </div>
                        </div>
                    </div>
                    </br>
                    <div class="row">

                        <div class="col-sm-12 col-md-4">
                            <label>@L_EFFECTIVE_START</label>
                            <div class="i-fg-data-entry">

                                @(Html.Kendo().DatePicker().Name("dpkDateFrom")
                                                                                    .HtmlAttributes(new { @class = "form-control i-form-control-extend validate" })
                                                                                              .Format("dd/MM/yyyy")
                                                                       //                  .Min(new DateTime(1900, 1, 1))
                                                                       //                  .Max(new DateTime(2099, 12, 31))
                                                                       //                  .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                                                       .Events(e => e.Change("onChangedtpDateFrom"))
                                )
                            </div>

                        </div>
                        <div class="col-sm-12 col-md-4">
                            <label>@L_EFFECTIVE_END</label>
                            <div class="i-fg-data-entry">

                                @(Html.Kendo().DatePicker().Name("dpkDateTo")
                                                                                        .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                  .Format("dd/MM/yyyy")
                                                                                                  .Enable(false)
                                        //                  .Min(new DateTime(1900, 1, 1))
                                        //                  .Max(new DateTime(2099, 12, 31))
                                        //                  .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                        //                .Events(e => e.Change("onChangedtpDateTo"))
                                )
                            </div>

                        </div>

                    </div>

                    <div class="row">
                        <br />
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-md-4"></div>
                        <div class="col-sm-12 col-md-4"></div>
                        <div class="col-sm-12 col-md-4 i-text-align-right">

                            <a class="btn btn-default" onclick="_Clear();"><i class="fa fa-ban fa-lg"></i>&nbsp;&nbsp;@B_CLEAR</a>
                            <a class="btn btn-info" onclick="_Search();"><i class="fa fa-search fa-lg"></i>&nbsp;&nbsp;@B_SEARCH</a>


                        </div>
                    </div>
                    <div class="row">

                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-success">
            <div class="panel-heading">
                <h3 class="panel-title">
                    <span>Search Result</span>
                    <a data-toggle="collapse" class="pull-right" href="#ResultPanel1" onclick="onPanelToggle(this);" id="ResultPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultPanelHeaderArrow1"></i></a>
                </h3>
            </div>
            <div id="ResultPanel1" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="pull-right">
                        <a onclick="modalNewShow();" id="addnew" class="btn btn-default">
                            <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_NEW
                        </a>&nbsp;
                    </div>
                    <br />
                    <br />
                    <br />
                    <div class="row">
                        <div id="SearchTable1">
                            <div class="col-sm-12 col-md-12 ">
                                <center><div id="validate-GridEmpty" class="i-fg-data-entry-validation"></div></center>
                                <div id="gridresult" class="row">
                                    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.DataConfigRulePriorityTable>()
                                                                                                                                                                                                                                                                                .Name("gridConfigRuleTable1")

                                                                                                                                                                                                                                                                        .Columns(columns =>
                                                                                                                                                                                                                                                                        {


                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.RULE_NAME).Title("RULE NAME").HtmlAttributes(new { style = "text-align:left;" }).Width(130);
                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.PRIORITY).Title("PRIORITY").HtmlAttributes(new { style = "text-align:left;" }).Width(130);
                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.LOOKUP_NAME).Title("LOOK UP NAME").HtmlAttributes(new { style = "text-align:left;" }).Width(130);
                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.LOOKUP_PARAMETER).Title("LOOK UP PARAMETER").HtmlAttributes(new { style = "text-align:left;" }).Width(130);
                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.EFFECTIVE_DATE_START).Title("EFFECTIVE DATE START").HtmlAttributes(new { style = "text-align:left;" }).Width(130);
                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.EFFECTIVE_DATE_END).Title("EFFECTIVE DATE END").HtmlAttributes(new { style = "text-align:left;" }).Width(130);
                                                                                                                                                                                                                                                                                                columns.Command(command =>
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                command.Custom(@B_EDIT).Click("modalEditShow").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");
                                                                                                                                                                                                                                                                                command.Custom(@B_DELETE).Click("modalConfirmDeleteShow").Text("<i class='fa fa-times-circle fa-lg'></i>");
                                                                                                                                                                                                                                                                                command.Custom(@B_VIEW).Click("modalViewShow").Text("<i class='fa fa-eye fa-lg'></i>");
                                                                                                                                                                                                                                                                            }).Title(@C_ACTION).HtmlAttributes(new { style = "text-align:center;" }).Width(200);
                                                                                                                                                                                                                                                                            columns.Bound(p => p.RULE_NAME).Title(@C_RULE_NAME).HtmlAttributes(new { style = "text-align:left;", id = "_rule_name" });
                                                                                                                                                                                                                                                                            columns.Bound(p => p.PRIORITY).Title(@C_PRIORITY).HtmlAttributes(new { style = "text-align:left;", id = "_priority" }).Width(100);
                                                                                                                                                                                                                                                                            columns.Bound(p => p.LOOKUP_NAME).Title(@C_LOOKUP_NAME).HtmlAttributes(new { style = "text-align:left;" });
                                                                                                                                                                                                                                                                                                //columns.Bound(p => p.LOOKUP_PARAMETER).Title(@C_LOOKUP_PARAM).HtmlAttributes(new { style = "text-align:left;" }).Width(180);
                                                                                                                                                                                                                                                                                                columns.Bound(p => p.LOOKUP_PARAMETER_DISPLAY).Title(@C_LOOKUP_PARAM).HtmlAttributes(new { style = "text-align:left;" }).Encoded(false);
                                                                                                                                                                                                                                                                            columns.Bound(p => p.EFFECTIVE_DATE_START).Title(@C_EFFECTIVE_START).HtmlAttributes(new { style = "text-align:left;" });
                                                                                                                                                                                                                                                                            columns.Bound(p => p.EFFECTIVE_DATE_END).Title(@C_EFFECTIVE_END).HtmlAttributes(new { style = "text-align:left;" });


                                                                                                                                                                                                                                                                        })

                                                                                                                                                    .Scrollable(scrollable => scrollable.Height("auto"))

                                                                                                                                                     .Sortable()



                                                                                                                                                    .Resizable(resize => resize.Columns(true))
                                                                                                                                                    .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 20, 50, 100 }))
                                                                                                                                                    .AutoBind(false)
                                                                                                                                                    .DataSource(dataSource => dataSource
                                                                                                                                                        .Ajax()

                                                                                                                                                        .PageSize(20)
                                                                                                                                                        .Read(read => read.Action("getConfigRulePriorityDataTable", "ConfigurationRulePriority").Data("bindingValue"))
                                                                                                                                                        )
                                                                                                                                                    .Events(e => e.DataBound("onGridDataBound"))
                                    )

                                </div>

                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@(Html.Kendo().Window()
                                                                                                                    .Name("AddPriorityRulePopup")
                                                                                                                    .Title("Configuration Rule Priority")
                                                                                                                    .Width(1200)
                                                                                                                    .Height(1000)
                                                                                                                    //.Draggable()
                                                                                                                    .Visible(false)
                                                                                                                    .Modal(true)
                                                                                                                    .Events(e => e.Close("_clearPopupData"))
                                                                                                                    .Content(
                                                                                                                    @<text>

                                                                                                                        <div class="i-no-over" id="AddPopupPanel">
                                                                                                                            <div class="panel-body">
                                                                                                                                <div class="row">

                                                                                                                                    <div class="panel panel-success">
                                                                                                                                        <div class="panel-heading">
                                                                                                                                            <h3 class="panel-title">
                                                                                                                                                <span>@H_CONFIG_RULE</span>
                                                                                                                                                <a data-toggle="collapse" class="pull-right" href="#SearchPanel3" onclick="onPanelToggle(this);" id="SearchPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow1"></i></a>
                                                                                                                                            </h3>
                                                                                                                                        </div>
                                                                                                                                        <div id="SearchPanel3" class="panel-collapse collapse in">
                                                                                                                                            <div class="panel-body">
                                                                                                                                                <div class="row">
                                                                                                                                                    <div class="col-sm-12 col-md-4">
                                                                                                                                                        <label>@L_RULE_NAME <RED_T style="color:red;">*</RED_T></label>
                                                                                                                                                        <div class="i-fg-data-entry">
                                                                                                                                                            <input type="text" id="RULE_NAME_A" placeholder="rule name" class="k-textbox form-control" onfocusout="validateRulenameTextBoxOutFocus()" maxlength="50" />
                                                                                                                                                        </div>
                                                                                                                                                        <div id="validate-RULE_NAME_A" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>
                                                                                                                                                    <div class="col-sm-12 col-md-4">
                                                                                                                                                        <label>@L_PRIORITY <RED_T style="color:red;">*</RED_T></label>
                                                                                                                                                        <div class="i-fg-data-entry">
                                                                                                                                                            @(Html.Kendo().DropDownList()
                                                                                                                                                                                                                                                                            .Name("modalddlAddPriorityList")
                                                                                                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                                                                                                            .OptionLabel("SELECT ALL")
                                                                                                                                                                                                                                                                            .DataTextField("Value1")
                                                                                                                                                                                                                                                                            .DataValueField("Value1")
                                                                                                                                                                                                                                                                            .Filter("contains")
                                                                                                                                                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                                                                                                                                                            .DataSource(source =>
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                            source.Read(read =>
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                    read.Action("SelectListPriority", "ConfigurationRulePriority");
                                                                                                                                                                                                                                                                                                });
                                                                                                                                                                                                                                                                                                                        })
                                                                                                                                                                                                                                                                                    .Events(e => e.Change("TableListChange"))
                                                                                                                                                                                                                                                                             .SelectedIndex(0)
                                                                                                                                                            )
                                                                                                                                                        </div>
                                                                                                                                                        <div id="validate-modalddlAddPriorityList" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>
                                                                                                                                                </div>
                                                                                                                                                <br />
                                                                                                                                                <div class="row">
                                                                                                                                                    <div class="col-sm-12 col-md-4">
                                                                                                                                                        <label>@L_LOOKUP_NAME <RED_T style="color:red;">*</RED_T></label>
                                                                                                                                                        <div class="i-fg-data-entry">
                                                                                                                                                            @(Html.Kendo().DropDownList()
                                                                                                                                                                                                                                                                            .Name("modalddlAddLookupname")
                                                                                                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                                                                                                            //.Events(e => e.Change("onLookupChange"))
                                                                                                                                                                                                                                                                            .OptionLabel("SELECT ALL")
                                                                                                                                                                                                                                                                            .DataTextField("LOOKUP_NAME")
                                                                                                                                                                                                                                                                            .DataValueField("LOOKUP_NAME")
                                                                                                                                                                                                                                                                            .Filter("contains")
                                                                                                                                                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                                                                                                                                                            .DataSource(source =>
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                            source.Read(read =>
                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                            read.Action("SelectListLookupName", "ConfigurationRulePriority");
                                                                                                                                                                                                                                                                        });
                                                                                                                                                                                                                                                                                                                        })
                                                                                                                                                                                                                                                                                    .Events(e => e.Change("onLookupChange"))
                                                                                                                                                                                                                                                                             .SelectedIndex(0)
                                                                                                                                                            )
                                                                                                                                                        </div>
                                                                                                                                                        <div id="validate-modalddlAddLookupname" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>

                                                                                                                                                    <div class="col-sm-12 col-md-4">
                                                                                                                                                        <label>@C_LOOKUP_PARAM <RED_T style="color:red;">*</RED_T></label>
                                                                                                                                                        <div class="i-fg-data-entry">

                                                                                                                                                            @(Html.Kendo().MultiSelect()
                                                                                                                                                                                                                       .Name("modalddlAddLookupParam")
                                                                                                                                                                                                                       .DataTextField("DISPLAY_VAL")
                                                                                                                                                                                                                       .DataValueField("PARAMETER_NAME")
                                                                                                                                                                                                                       .Placeholder("Please select lookup name first...")
                                                                                                                                                                                                                       //.ItemTemplate("<span class=\"\">#= PARAMETER_NAME #</span> #= DISPLAY_VAL #")
                                                                                                                                                                                                                       .ItemTemplate("<span class=\"\"> #= DISPLAY_VAL # </span>")

                                                                                                                                                            )
                                                                                                                                                        </div>
                                                                                                                                                        <div id="validate-modalddlAddLookupParam" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>
                                                                                                                                                </div>
                                                                                                                                                <br />
                                                                                                                                                <div class="row">

                                                                                                                                                    <div class="col-sm-12 col-md-4">
                                                                                                                                                        <label>@L_EFFECTIVE_START</label>
                                                                                                                                                        <div class="i-fg-data-entry">

                                                                                                                                                            @(Html.Kendo().DatePicker().Name("modaldtpAddDateFrom")
                                                                                                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend validate" })
                                                                                                                                                                                                                            .Format("dd/MM/yyyy")
                                                                                                                                                                                                                            .Min(DateTime.Today.AddDays(1))
                                                                                                                                                                                                                            //.Value(DateTime.Today.AddDays(1))
                                                                                                                                                                                                                            .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                                                                                                                                                                                                            .Events(e => e.Change("onChangedtpAddDateFrom"))
                                                                                                                                                            )

                                                                                                                                                        </div>
                                                                                                                                                        <div id="validate-dtpDateFrom" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>
                                                                                                                                                    <div class="col-sm-12 col-md-4">
                                                                                                                                                        <label>@L_EFFECTIVE_END</label>
                                                                                                                                                        <div class="i-fg-data-entry">

                                                                                                                                                            @(Html.Kendo().DatePicker().Name("modaldtpAddDateTo")
                                                                                                                                                                                                                    .HtmlAttributes(new { @class = "form-control i-form-control-extend validate" })
                                                                                                                                                                                                                            .Format("dd/MM/yyyy")
                                                                                                                                                                                                                            .Min(DateTime.Today.AddDays(2))
                                                                                                                                                                    //.Enable(false)
                                                                                                                                                                    //.Value(DateTime.Today.AddDays(1))
                                                                                                                                                            )
                                                                                                                                                        </div>


                                                                                                                                                        <div id="validate-dtpDateTo" class="i-fg-data-entry-validation"></div>
                                                                                                                                                    </div>

                                                                                                                                                    <div class="col-sm-12 col-md-2">
                                                                                                                                                        <br><br>

                                                                                                                                                        <input type="checkbox" id="I_LMR_FLAG_ADD" name="I_LMR_FLAG_ADD_NAME" onchange="" value="LMR Flag">
                                                                                                                                                        <label style="font-weight:lighter;"> LMR Flag </label><br>

                                                                                                                                                    </div>

                                                                                                                                                </div>
                                                                                                                                            </div>

                                                                                                                                        </div>



                                                                                                                                    </div>

                                                                                                                                    <div class="panel panel-success">
                                                                                                                                        <div class="panel-heading">
                                                                                                                                            <h3 class="panel-title">
                                                                                                                                                <span>@SH_CONDITION</span>
                                                                                                                                                <a data-toggle="collapse" class="pull-right" href="#ResultPanel3" onclick="onPanelToggle(this);" id="ResultPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultPanelHeaderArrow1"></i></a>
                                                                                                                                            </h3>
                                                                                                                                        </div>
                                                                                                                                        <div id="ResultPanel3" class="panel-collapse collapse in">
                                                                                                                                            <div class="panel-body">
                                                                                                                                                <div class="pull-right">
                                                                                                                                                    <a onclick="AddnewRow()" id="addnew" class="btn btn-default">
                                                                                                                                                        <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_NEW
                                                                                                                                                    </a>&nbsp;
                                                                                                                                                </div>
                                                                                                                                                <br />
                                                                                                                                                <br />
                                                                                                                                                <br />
                                                                                                                                                <div id="gridAddPriority"></div>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>

                                                                                                                                </div>

                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-3 col-md-3"></div>
                                                                                                                                    <div class="col-sm-5 col-md-5">
                                                                                                                                        <div style="text-align:center">
                                                                                                                                            @*class="pull-left"*@
                                                                                                                                            <a onclick="AddRuleModalClose()" id="btnpop_cancel_add" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                            <a onclick="ConfirmAddRulePriorityConfiguration()" id="btnpop_save_add" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i>&nbsp;@B_SAVE</a>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>

                                                                                                                            </div>

                                                                                                                        </div>
                                                                                                                    </text>))
@(Html.Kendo().Window()
                                                                                                        .Name("MyPopupLoading")
                                                                                                        .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                        .Title(false)
                                                                                                        .Modal(true)
                                                                                                        .Visible(false)
                                                                                                        .Content(
                                                                                                        @<text>
                                                                                                            <div style="margin: 0 80px;"><font size="4">Loading &nbsp;<i class="fa fa-refresh fa-spin"></i></font></div>
                                                                                                        </text>)
)
@(Html.Kendo().Window()
                            .Name("EditPriorityRulePopup")
                            .Title("Configuration Rule Priority")
                            .Width(1200)
                            .Height(1000)
                            //.Draggable()
                            .Visible(false)
                            .Modal(true)
                            .Events(e => e.Close("_clearPopupData"))
                            .Content(
                            @<text>

                                <div class="i-no-over" id="EditPopupPanel">
                                    <div class="panel-body">
                                        <div class="row">

                                            <div class="panel panel-success">
                                                <div class="panel-heading">
                                                    <h3 class="panel-title">
                                                        <span>@H_CONFIG_RULE</span>
                                                        <a data-toggle="collapse" class="pull-right" href="#SearchPanel3" onclick="onPanelToggle(this);" id="SearchPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow1"></i></a>
                                                    </h3>
                                                </div>
                                                <div id="SearchPanel3" class="panel-collapse collapse in">
                                                    <div class="panel-body">
                                                        <div class="row">
                                                            <div class="col-sm-12 col-md-4">

                                                                <label>@L_RULE_NAME <RED_T style="color:red;">*</RED_T></label>
                                                                <div class="i-fg-data-entry">
                                                                    <input type="text" id="RULE_NAME_E" placeholder="rule name" class="k-textbox form-control" onfocusout="validateRulenameTextBoxEditOutFocus()" maxlength="50" disabled />
                                                                </div>
                                                                <div id="validate-RULE_NAME_E" class="i-fg-data-entry-validation"></div>

                                                            </div>
                                                            <div class="col-sm-12 col-md-4">
                                                                <label>@L_PRIORITY <RED_T style="color:red;">*</RED_T></label>
                                                                <div class="i-fg-data-entry">
                                                                    @(Html.Kendo().DropDownList()
                                                                                                                                                                                            .Name("modalddlEditPriorityList")
                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                            .OptionLabel("SELECT ALL")
                                                                                                                                                                                            .DataTextField("Value1")
                                                                                                                                                                                            .DataValueField("Value1")
                                                                                                                                                                                            .Filter("contains")
                                                                                                                                                                                            .Enable(false)
                                                                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                                                                            .DataSource(source =>
                                                                                                                                                                                            {
                                                                                                                                                                                                                                            source.Read(read =>
                                                                                                                                            {
                                                                                                                                                                                                        read.Action("SelectListPriority", "ConfigurationRulePriority");
                                                                                                                                                                                                    });
                                                                                                                                                                                                                                        })
                                                                                                                                                                                                    .Events(e => e.Change("TableListChange"))
                                                                                                                                                                                             .SelectedIndex(0)
                                                                    )
                                                                </div>
                                                                <div id="validate-modalddlEditPriorityList" class="i-fg-data-entry-validation"></div>
                                                            </div>
                                                        </div>
                                                        <br />
                                                        <div class="row">
                                                            <div class="col-sm-12 col-md-4">
                                                                <label>@L_LOOKUP_NAME <RED_T style="color:red;">*</RED_T></label>
                                                                <div class="i-fg-data-entry">
                                                                    @(Html.Kendo().DropDownList()
                                                                                                                                                                                            .Name("modalddlEditLookupname")
                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                            //.DataTextField("DISPLAY_VAL")
                                                                                                                                                                                            //.DataValueField("LOV_VAL1")
                                                                                                                                                                                            .OptionLabel("SELECT ALL")
                                                                                                                                                                                            .DataTextField("LOOKUP_NAME")
                                                                                                                                                                                            .DataValueField("LOOKUP_NAME")
                                                                                                                                                                                            .Filter("contains")
                                                                                                                                                                                            .Enable(false)
                                                                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                                                                                                                                                                            .DataSource(source =>
                                                                                                                                                                                            {
                                                                                                                                                                                                                                            source.Read(read =>
                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                            read.Action("SelectListLookupName", "ConfigurationRulePriority");
                                                                                                                                                                                                                                                                        });
                                                                                                                                                                                                                                        })
                                                                                                                                                                                                    .Events(e => e.Change("onLookupEditChange"))
                                                                                                                                                                                             .SelectedIndex(0)
                                                                    )
                                                                </div>
                                                                <div id="validate-modalddlEditLookupname" class="i-fg-data-entry-validation"></div>
                                                            </div>

                                                            <div class="col-sm-12 col-md-4">
                                                                <label>@C_LOOKUP_PARAM <RED_T style="color:red;">*</RED_T></label>
                                                                <div class="i-fg-data-entry">
                                                                    @(Html.Kendo().MultiSelect()
                                                                                                                                                                                                                                       .Name("modalddlEditLookupParam")
                                                                                                                                                                                                                                       .DataTextField("DISPLAY_VAL")
                                                                                                                                                                                                                                       .DataValueField("PARAMETER_NAME")
                                                                                                                                                                                                                                       .Placeholder("Please select lookup name first...")
                                                                                                                                                                                                                                       //.ItemTemplate("<span class=\"\">#= PARAMETER_NAME #</span> #= DISPLAY_VAL #")
                                                                                                                                                                                                                                       .ItemTemplate("<span class=\"\"> #= DISPLAY_VAL # </span>")

                                                                    )
                                                                </div>
                                                                <div id="validate-modalddlEditLookupParam" class="i-fg-data-entry-validation"></div>
                                                            </div>
                                                        </div>
                                                        <br />
                                                        <div class="row">

                                                            <div class="col-sm-12 col-md-4">
                                                                <label>@L_EFFECTIVE_START</label>
                                                                <div class="i-fg-data-entry">

                                                                    @(Html.Kendo().DatePicker().Name("modaldtpEditDateFrom")
                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend validate" })
                                                                                                                                                                                                                                            .Format("dd/MM/yyyy")
                                                                                                                                                                                                                                            .Min(DateTime.Today.AddDays(1))
                                                                                                                                                                                                                                            //.Value(DateTime.Today.AddDays(1))
                                                                                                                                                                                                                                            .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                                                                                                                                                                                                                            .Events(e => e.Change("onChangedtpEditDateFrom"))
                                                                                                                                                                                                                                            .Enable(false)
                                                                    )
                                                                </div>
                                                                <div id="validate-modaldtpEditDateFrom" class="i-fg-data-entry-validation"></div>
                                                            </div>
                                                            <div class="col-sm-12 col-md-4">
                                                                <label>@L_EFFECTIVE_END</label>
                                                                <div class="i-fg-data-entry">

                                                                    @(Html.Kendo().DatePicker().Name("modaldtpEditDateTo")
                                                                                                                                            .HtmlAttributes(new { @class = "form-control i-form-control-extend validate" })
                                                                                                                                                                                                                                            .Format("dd/MM/yyyy")
                                                                                                                                                                                                                                            .Min(DateTime.Today.AddDays(2))
                                                                                                                                                                                                                                            //.Value(DateTime.Today.AddDays(1))
                                                                                                                                                                                                                                            .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                                                                                                                                                                                                                            .Events(e => e.Change("onChangedtpEditDateTo"))
                                                                                                                                                                                                                                            .Enable(false)
                                                                    )
                                                                </div>


                                                                <div id="validate-modaldtpEditDateTo" class="i-fg-data-entry-validation"></div>
                                                            </div>

                                                            <div class="col-sm-12 col-md-2">
                                                                <br><br>

                                                                <input type="checkbox" id="I_LMR_FLAG_EDIT" name="I_LMR_FLAG_EDIT_NAME" onchange="" value="LMR Flag">
                                                                <label style="font-weight:lighter;"> LMR Flag </label><br>

                                                            </div>

                                                        </div>
                                                    </div>

                                                </div>



                                            </div>

                                            <div class="panel panel-success">
                                                <div class="panel-heading">
                                                    <h3 class="panel-title">
                                                        <span>@SH_CONDITION</span>
                                                        <a data-toggle="collapse" class="pull-right" href="#ResultPanel3" onclick="onPanelToggle(this);" id="ResultPanelHeader1"><i class="fa fa-chevron-circle-down fa-lg" id="ResultPanelHeaderArrow1"></i></a>
                                                    </h3>
                                                </div>
                                                <div id="ResultPanel3" class="panel-collapse collapse in">
                                                    <div class="panel-body">
                                                        <div class="pull-right">
                                                            <a onclick="AddnewEditRow()" id="addnewEdit" class="btn btn-default">
                                                                <i class="fa fa-plus-circle fa-lg"></i>&nbsp;@B_NEW
                                                            </a>&nbsp;
                                                        </div>
                                                        <br />
                                                        <br />
                                                        <br />
                                                        <div id="gridEditPriority"></div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-sm-3 col-md-3"></div>
                                            <div class="col-sm-5 col-md-5">
                                                <div style="text-align:center">
                                                    @*class="pull-left"*@
                                                    <a onclick="EditRuleModalClose()" id="btnpop_cancel_edit" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                    <a onclick="ConfirmEditRulePriorityConfiguration()" id="btnpop_save_edit" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i>&nbsp;@B_SAVE</a>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                </div>
                            </text>))


<div class="modal fade cancel-sm-box" tabindex="-1" id="modal003_perorder" data-id="" role="dialog" aria-labelledby="modal003_perorder_label" style="z-index:14000">
    <div class="modal-dialog modal-sm">
        <div class="modal-content text-center">
            <div class="modal-header" style="padding-bottom: 25px;">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-times-circle"></i></button>
            </div>
            <p class="clearfix"></p>
            <h4 class="text-center">Confirm Delete this Rule</h4>

            <button type="button" id="btndel_cancel" class="btn btn-default" data-dismiss="modal"><i class="fa fa-power-off fa-lg"></i>&nbsp; Cancel &nbsp; </button>
            <button type="button" id="btndel_ok" class="btn btn-success" onclick="ConfirmDelete(); try { $.modal.close(); } catch (ex) { }"><i class="fa fa-check-circle fa-lg"></i>&nbsp; Confirm &nbsp;</button>
            <p class="clearfix"></p>
        </div>
    </div>
</div>

@(Html.Kendo().Window()
                                                                                                                       .Name("PreventMistepFilterPopup")
                                                                                                                      .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                      .Width(500)

                                                                                                                      .Draggable()
                                                                                                                      .Events(e => e.Close("_clearPopupData"))
                                                                                                                      .Visible(false)
                                                                                                                      .Modal(true)
                                                                                                                      .Content(@<text>
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-9">
                                                                                                                                <label id="_dInformation" style="font-weight:lighter"> @M_Selected_SubDist </label>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                        <br />
                                                                                                                        <br />
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-11">
                                                                                                                                <div class="pull-right">
                                                                                                                                    <a onclick="ClearMistepFilterPopup()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                    </text>)
)
@(Html.Kendo().Window()
                                                                                                                       .Name("PreventMistepFilterPopup02")
                                                                                                                      .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                      .Width(500)

                                                                                                                      .Draggable()
                                                                                                                      .Events(e => e.Close("_clearPopupData"))
                                                                                                                      .Visible(false)
                                                                                                                      .Modal(true)
                                                                                                                      .Content(@<text>
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-9">
                                                                                                                                <label id="_dInformation" style="font-weight:lighter"> @M_Selected_SympName </label>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                        <br />
                                                                                                                        <br />
                                                                                                                        <div class="row">
                                                                                                                            <div class="col-sm-11">
                                                                                                                                <div class="pull-right">
                                                                                                                                    <a onclick="ClearMistepFilterPopup02()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </div>
                                                                                                                    </text>)
)
@(Html.Kendo().Window()
                                                                                                                               .Name("ValidatePopup")
                                                                                                                              .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                              .Width(500)

                                                                                                                              .Draggable()
                                                                                                                              .Events(e => e.Close("_clearPopupData"))
                                                                                                                              .Visible(false)
                                                                                                                              .Modal(true)
                                                                                                                              .Content(@<text>
                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-9">
                                                                                                                                        <label id="_dInformationValidate" style="font-weight:lighter"></label>  @*Effective date end cannot be before effective date start*@
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <br />
                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-11">
                                                                                                                                        <div class="pull-right">
                                                                                                                                            <a onclick="ClearDateEndPopup()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i>&nbsp;@B_CANCEL</a>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </text>)
)
@(Html.Kendo().Window()
                                                                                                                               .Name("ValidatePopupDelete")
                                                                                                                              .HtmlAttributes(new { @class = "i-gap-popup" })
                                                                                                                              .Width(500)

                                                                                                                              .Draggable()
                                                                                                                              .Events(e => e.Close("_clearPopupData"))
                                                                                                                              .Visible(false)
                                                                                                                              .Modal(true)
                                                                                                                              .Content(@<text>
                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-9">
                                                                                                                                        <label id="_dInformationValidate" style="font-weight:lighter"> @M_Confirm_Delete </label>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <br />
                                                                                                                                <br />
                                                                                                                                <div class="row">
                                                                                                                                    <div class="col-sm-11">
                                                                                                                                        <div class="pull-right">
                                                                                                                                            <a onclick="ClearDeletecPopup()" id="btnpop_cancel" class="btn btn-default"><i class="fa fa-power-off fa-lg"></i> &nbsp;@B_CANCEL</a>
                                                                                                                                            <a onclick="ConfirmDeletecPopup()" id="btnpop_confirm" class="btn btn-success"><i class="fa fa-check-circle fa-lg"></i> &nbsp; Confirm</a>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </text>)
)

<script>

    function bindingValue() {
        //Loading();
        model = defaultData();
        return {
            dataS: JSON.stringify(model)
        };
    }

    $(document).ready(function () {

        //mousedown-active-row
        $(".k-grid").on("mousedown", ".k-button:not('.k-grid-cancel,.k-grid-update,.k-state-hover')", function (e) {
            var grid = $(this).closest(".k-grid");
            var editRow = grid.find(".k-grid-edit-row");

            if (grid[0].id == "gridAddPriority") {
                var gridTotalrow = $("#gridAddPriority").data("kendoGrid");
                var dataSource = gridTotalrow.dataSource;
            }
            else if (grid[0].id == "gridEditPriority") {
                    var gridTotalrow = $("#gridEditPriority").data("kendoGrid");
                    var dataSource = gridTotalrow.dataSource;
            }
            else
            {
                return;
            }

            //total records
            var totalRecords = dataSource.total();

            if (editRow.length > 0 && totalRecords > 1) {
                alert('@M_Active_Row');
                e.preventDefault();
            }
        });


    });

    $("#dpkDateFrom").on("keydown", function (e) {
        e.preventDefault();
    });

    $("#dpkDateTo").on("keydown", function (e) {
        e.preventDefault();
    });

    $("#modaldtpAddDateFrom").on("keydown", function (e) {
        e.preventDefault();
    });

    $("#modaldtpAddDateTo").on("keydown", function (e) {
        e.preventDefault();
    });

    $("#modaldtpEditDateFrom").on("keydown", function (e) {
        e.preventDefault();
    });

    $("#modaldtpEditDateTo").on("keydown", function (e) {
        e.preventDefault();
    });

    var dataSourcePaygEditConditionTable = new kendo.data.DataSource({
        transport: {
            read: {
                url: "/ConfigurationRulePriority/SelectListEditValue",
                data: {
                    dataS: ""
                },
                dataType: "json"
            }
        }

    });

    var dataSourcePaygValueParameter = new kendo.data.DataSource({
        transport: {
            read: {
                url: "/ConfigurationRulePriority/SelectListValue",
                data: {
                    dataS: ""
                },
                dataType: "json"
            }
        }
    });

    var OperatorModels = [
        { OperatorId: 1, Value1: "=", Value2: "=" },
        { OperatorId: 2, Value1: "in", Value2: "in" },
        { OperatorId: 3, Value1: "not in", Value2: "not in" },
        { OperatorId: 4, Value1: "<>", Value2: "<>" }
    ];

    var CurrentValue = [
        { Id: 1 ,ValueType: 1}
    ];

    let CurrentType = 2;
    let CurrentSTRvalue = null;
    let CurrentOldSelectFieldname = "";
    let currentSelectOperatorValue = 99;
    let currentEditFieldname = "";
    let currentDeleteRuleId = "";
    let pointerAddLastFieldname = "";
    var originalValues = [];
    let cureReturnFieldname = "";
    let pointerSameRow = "";
    let pointerSameEditRefresh = 0;
    var flaghasEditlookupnameInsert = 0;
    var currentDeleteObject = null;
    var currentGridDelete = null;

    function onLookupChange(e) {

        var LookupnameFilter = $("#modalddlAddLookupname").data("kendoDropDownList").value();
        var ddl = $('#modalddlAddLookupParam').data("kendoMultiSelect");

        if (LookupnameFilter != null) {
            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringValueLookupname",
                data: {
                    lookupData: LookupnameFilter
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            ddl.enable(true);
                            ddl.value([]);
                            ddl.setDataSource(response.Data);
                            ddl.refresh();
                        }
                        else {

                            ddl.setDataSource(null);
                            ddl.refresh();
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }
    }

    function onLookupEditChange(e) {

        var LookupnameFilter = $("#modalddlEditLookupname").data("kendoDropDownList").value();
        var ddl = $('#modalddlEditLookupParam').data("kendoMultiSelect");

        if (LookupnameFilter != null) {
            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringValueLookupname",
                data: {
                    lookupData: LookupnameFilter
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            ddl.enable(true);
                            ddl.value([]);
                            ddl.setDataSource(response.Data);
                            ddl.refresh();
                        }
                        else {

                            ddl.setDataSource(null);
                            ddl.refresh();
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }
    }
    function resolveTextFromCode(code) {
        if (code == null) return "";
        var ds = dataSourcePaygValueParameter;
        var data = (typeof ds.data === "function") ? ds.data() :
            (typeof ds.view === "function") ? ds.view() : [];
        for (var i = 0; i < data.length; i++) {
            var d = data[i];
            // เทียบกับ LovValue1 เป็นหลัก
            if ((d.LovValue1 + "") === (code + "")) {
                return (d.Text || d.LovValue1 || "");
            }
        }
        // ถ้าไม่เจอ ให้ fallback เป็นโค้ดเดิม
        return code + "";
    }
    function normalizeToArray(val) {
        if (val == null) return [];
        if (Array.isArray(val)) return val.map(String);
        if (typeof val === "string") {
            if (!val.trim()) return [];
            return val.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
        }
        return [String(val)];
    }
    function normalizeCodes(val) {
        if (val == null) return [];
        if (Array.isArray(val)) {
            return val.map(function (x) {
                if (x == null) return null;
                if (typeof x === "object") {
                    if (x.LovValue1 != null) return String(x.LovValue1);
                    if (x.value != null) return String(x.value);
                    return null;
                }
                return String(x);
            }).filter(Boolean);
        }
        if (typeof val === "string") {
            if (!val.trim()) return [];
            return val.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
        }
        return [String(val)];
    }
    $("#gridAddPriority").kendoGrid({
        dataSource: {
            pageSize: 20,
            data: [],

            schema: {
                model: {
                    id: 'id',
                    fields: {
                        'id': {
                            type: 'number'
                        },
                        'Field_Name': {
                            type: 'string'
                        },
                        'Operator': {
                            type: 'string'
                        },
                        ValueField: { nullable: true, defaultValue: [] },
                        // เก็บข้อความสรุปเพื่อโชว์ในกริด/อินพุต (กัน [object Object])
                        ValueField_Text: { type: "string", defaultValue: "" },
                        // เก็บรหัสจริงจาก MultiSelect (LovValue1)
                        ValueFieldCodes: { defaultValue: [] }
                    }
                }
            },

        },
        pageable: true,
        columns: [
            {
                command: [
                    { name: "edit", text: "Edit" },
                    { name: "detail", text: "Delete", click: showDeleteConfirmationAddGrid }

                ], title: "@C_ACTION"
            },
            {
                field: "Field_Name",
                title: "@C_Field_Name",
                editor: valueFieldNameDropDown
            },
            {
                field: "Operator",
                title: "@C_Operator",
                editor: valueOperaterDropDown
            },
            {
                field: "ValueField",
                title: "@C_Value",
                editor: valueValueDropDown,
                template: function (dataItem) {
                    // ถ้ามีสตริงสรุปแล้ว ใช้อันนี้เร็วสุด
                    if (dataItem.ValueField_Text) {
                        return kendo.htmlEncode(dataItem.ValueField_Text);
                    }

                    var v = dataItem.ValueField;
                    if (v == null) return "";

                    function toText(x) {
                        if (x == null) return "";
                        if (typeof x === "object") {
                            return (x.Text || x.LovValue1 || "");
                        }
                        return (x + "");
                    }

                    var out = "";
                    if (Array.isArray(v)) {
                        out = v.map(toText).filter(Boolean).join(", ");
                    } else if (typeof v === "string") {
                        out = v.indexOf(",") > -1
                            ? v.split(",").map(function (s) { return toText(s.trim()); }).filter(Boolean).join(", ")
                            : toText(v);
                    } else {
                        out = toText(v);
                    }

                    return kendo.htmlEncode(out);
                }
            }
        ],
        editable: "inline",
        dataBound: function (e) {
            var grid = $("#gridAddPriority").data("kendoGrid");

            var list = new Array();

            var dataSource = grid.dataSource;
            var dataItems = dataSource.data();
            var columns = grid.columns;

            var check = 0;
            var isValid = false;
            for (var i = 0; i < dataItems.length; i++) {
                var item = dataItems[i];
                for (var j = 1; j < columns.length; j++) {
                    var field = columns[j].field;
                    if (field == "Field_Name") {

                        var value = item[field];

                        if (value != null) {
                            list.push(value);
                        }

                    }



                }
            }
            console.log("gridAddPriority", list)

            var ListJson = JSON.stringify(list);

            //SendtoAddDupfromGridModel
            if (ListJson != "[]" && ListJson != "[null]") {
                $.ajax({
                    type: "POST",
                    url: "/ConfigurationRulePriority/AddDupfromGridModel",
                    data: {
                        gridFieldnameModel: ListJson
                    },
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        if (response) {
                            if (response != null) {
                                if (response.code == "0") {

                                }
                                else if (response.code == "1") {

                                }
                            }
                            else {

                                //ddl.setDataSource(null);
                                //ddl.refresh();
                            }
                        }

                    },
                    failure: function (msg) {
                    }
                });
            }

        },
 save: function (e) {
    var grid  = $("#gridAddPriority").data("kendoGrid");
    var model = e.model;

    var $row = e.container || $(document);

    // อ่านค่าจากสองช่อง text
    var T1var = ($row.find("#textb_add_r2").val() || "").trim(); // ตัวเลข
    var T2var = ($row.find("#textb_add_r1").val() || "").trim(); // ข้อความ

    // MultiSelect
    var ms = $row.find("#MultiValue_add_r1").data("kendoMultiSelect")
          || $("#MultiValue_add_r1").data("kendoMultiSelect");

    var codes = [];
    var objs  = [];
    var textJoined = "";

    if (ms) {
        codes = ms.value() || [];
        objs  = ms.dataItems() || [];

        // กติกา ALL: เหลือ ALL ตัวเดียว
        if (codes.indexOf("ALL") !== -1) {
            codes = ["ALL"];
            ms.value(codes);
            objs = objs.filter(function (x) { return (x && x.LovValue1 === "ALL"); });
        }

        // รวมข้อความไว้โชว์
        textJoined = objs
            .map(function (x) { return (x.Text || x.LovValue1 || ""); })
            .filter(Boolean)
            .join(", ");
    }

    // ถ้าไม่เลือก MultiSelect และไม่กรอก text ใด ๆ ให้แจ้งเตือน
    var noMulti = !codes || codes.length === 0;
    if (noMulti && T1var === "" && T2var === "") {
        var title = "System Information";
        $("#ValidatePopup").data("kendoWindow").center().open();
        document.getElementById('_dInformationValidate').innerHTML = '@M_Validate_Blank';
        $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
        $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
        e.preventDefault();
        return;
    }

    // ข้อความสุดท้ายสำหรับโชว์
    var finalText = textJoined || T2var || T1var;

    // ------- แยกตามโหมด -------
    if (typeof CurrentType !== "undefined" && CurrentType == 1) {
        // โหมดข้อความ: ValueField = สตริง (ตามโค้ดเดิมที่ input bind ไป field เดียว)
        model.set("ValueField", finalText);      // <<<< ใส่ค่าให้ ValueField
        model.set("ValueField_Text", finalText); // สำหรับ template/โชว์เร็ว
        model.set("ValueFieldCodes", []);        // ไม่ส่งโค้ด
    } else {
        // โหมด MultiSelect (หรือไม่ระบุ CurrentType แต่มีเลือกค่า)
        if (!codes.length && (T1var !== "" || T2var !== "")) {
            // fallback: ถ้าไม่ได้เลือก MultiSelect แต่มี text ให้เก็บแบบข้อความ
            model.set("ValueField", finalText);
            model.set("ValueField_Text", finalText);
            model.set("ValueFieldCodes", []);
        } else {
            // ปกติ MultiSelect
            model.set("ValueField", objs);         // ออบเจ็กต์ไว้ให้ template สร้างข้อความ
            model.set("ValueField_Text", textJoined);
            model.set("ValueFieldCodes", codes);   // โค้ดไว้ส่ง backend
        }
    }
},

 edit: function (e) {

    var grid = e.sender;
    var $row = $(e.container).closest("tr");
    var model = e.model;

    // ==== เดิม: หาชื่อฟิลด์ที่แก้ ====
    var idToEdit = "";
    if (grid.dataItem(e.container).Field_Name) {
        idToEdit = grid.dataItem(e.container).Field_Name;
    }
    if (idToEdit !== "") {
        currentEditFieldname = idToEdit;
    }

    // ==== เดิม: ยิงไปเก็บ CurrentType บน server ====
    if (currentEditFieldname != null && currentEditFieldname !== "") {
        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/StoringValueLookupOperator",
            data: { lookupData: currentEditFieldname },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response && response.code) {
                    if (response.code == "2") CurrentType = 2;
                    else if (response.code == "1") CurrentType = 1;
                }
            }
        });
    }

    // ==== ดึง widget แบบอิงแถว (เลิกใช้ selector global) ====
    var DDL1 = $row.find("#ddloperator_add_r1").data("kendoDropDownList") || null;
    var DDL2 = $row.find("#MultiValue_add_r1").data("kendoMultiSelect")   || null;
    var $txt = $row.find("#textb_add_r1");

    // กัน textb_add_r1 โผล่ซ้ำ
    if ($txt.length > 1) { $txt.slice(1).remove(); $txt = $row.find("#textb_add_r1"); }

    // ==== helper: สร้างค่าที่ต้อง preselect ให้ MultiSelect ====
    function normalizeCodesFromModel(m) {
        // พยายามเอาจาก ValueFieldCodes ก่อน, ถ้าไม่มี ค่อย fallback
        if (Array.isArray(m.ValueFieldCodes) && m.ValueFieldCodes.length) {
            return m.ValueFieldCodes.map(String);
        }
        if (Array.isArray(m.ValueField)) {
            return m.ValueField.map(function (x) {
                if (x == null) return null;
                if (typeof x === "object") {
                    if (x.LovValue1 != null) return String(x.LovValue1);
                    if (x.value    != null)  return String(x.value);
                    return null;
                }
                return String(x);
            }).filter(Boolean);
        }
        if (typeof m.ValueField === "string") {
            if (!m.ValueField.trim()) return [];
            return m.ValueField.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
        }
        if (typeof m.ValueField_Text === "string" && m.ValueField_Text.trim()) {
            return m.ValueField_Text.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
        }
        if (m.ValueField != null) {
            return [String(m.ValueField)];
        }
        return [];
    }

    // ==== ปรับ maxSelectedItems ตาม operator โดย "ไม่" refresh ====
    if (DDL1 && DDL2) {
        var opText = (DDL1.text() || "").toLowerCase();
        var cap = (opText === "in" || opText === "not in") ? 99 : 1;
        if (typeof DDL2.setOptions === "function") {
            DDL2.setOptions({ maxSelectedItems: cap });
        } else {
            DDL2.options.maxSelectedItems = cap;
        }
    }

    // ==== ฟังก์ชัน: อ่าน datasource แล้ว "restore ค่าเดิมทันทีหลังอ่านเสร็จ" ====
    function readAndRestore(ms, codes) {
        if (!ms || !ms.dataSource) return;

        // ถ้ายังไม่ต้องอ่าน (มีข้อมูลแล้วและ field เดิม) ก็ใส่ค่าได้เลย
        if (ms.dataSource.view().length && ms._boundFieldName === currentEditFieldname) {
            ms.value(codes);
            return;
        }

        // อ่านใหม่ และ restore ค่าหลังอ่าน (ครั้งเดียว)
        var applied = false;
        var apply = function () {
            if (applied) return;
            ms.value(codes);
            applied = true;
            ms._boundFieldName = currentEditFieldname; // จดว่า DS นี้ถูกโหลดให้ field นี้แล้ว
        };
        ms.dataSource.one("change", apply);
        ms.dataSource.one("requestEnd", apply);
        ms.dataSource.read(); // << จำเป็นต้องอ่านรอบแรก เพื่อให้ DS ตรงกับ Field ที่เพิ่งเลือก
    }

    // ==== PRESELECT รอบแรกแบบหนึบ ๆ ====
    if (DDL2) {
        var initCodes = normalizeCodesFromModel(model);
        readAndRestore(DDL2, initCodes);
    }

    // ==== Toggle การแสดงผลตาม CurrentType ====
    if (CurrentType == 2) {
        if (DDL2) { DDL2.enable(true); DDL2.wrapper.show(); }
        if ($txt.length) { $txt.hide(); }
    } else if (CurrentType == 1) {
        if (DDL2) { DDL2.enable(false); DDL2.wrapper.hide(); }
        if ($txt.length) { $txt.show().prop("disabled", false); }
    }

    // ==== อย่า refresh/read โดยไม่จำเป็น (จะทำให้ค่าเดิมหาย) ====
    // ลบทิ้งของเดิมพวก:
    // DDL1.dataSource.read();
    // DDL2.dataSource.read();   // เราอ่านเฉพาะผ่าน readAndRestore() แล้ว
    // DDL2.refresh();
    // grid.refresh();

    // ==== ของเดิม: ตรวจ Province/Symptom Group ====
    if (e.model.Field_Name) {
        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/CheckCaseStepGridModel",
            data: { gridFieldnameModel: e.model.Field_Name },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response && response.code) {
                    if (response.code == "99") {

                        var title = "System Information";
                        $("#ValidatePopup").data("kendoWindow").center().open();
                        document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Province';
                        $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                        $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

                        e.preventDefault();

                        var grid2 = $("#gridEditPriority").data("kendoGrid");
                        grid2.dataSource.add({ id: 99999, Field_Name: "", Operator: "", ValueField: "" });

                        var totalRecords = grid2.dataSource.total() - 1;
                        var dataItem = grid2.dataSource.at(totalRecords);
                        grid2.dataSource.remove(dataItem);
                        return;
                    }
                    else if (response.code == "98") {

                        var title = "System Information";
                        $("#ValidatePopup").data("kendoWindow").center().open();
                        document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_SympGroup';
                        $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                        $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

                        e.preventDefault();

                        var grid3 = $("#gridEditPriority").data("kendoGrid");
                        grid3.dataSource.add({ id: 99999, Field_Name: "", Operator: "", ValueField: "" });

                        var totalRecords2 = grid3.dataSource.total() - 1;
                        var dataItem2 = grid3.dataSource.at(totalRecords2);
                        grid3.dataSource.remove(dataItem2);
                        return;
                    }
                }
            }
        });
    }

    // ==== ของเดิม: เก็บ originalValues ====
    var result = originalValues.filter(item => item.id !== e.model.id);
    originalValues = result;
    originalValues.push(JSON.parse(JSON.stringify(e.model)));
},


        
        remove: function (e) {
            var model = e.model;


        },
        cancel: function (e) {
            var grid = $("#gridAddPriority").data("kendoGrid");

            if (originalValues !== null && e.model.id) {
                // ดึงข้อมูลจาก dataSource.view()
                var data = grid.dataSource.view();

                var oldvalueList = originalValues.filter(item => item.id === e.model.id);
                var lengeOldvalueList = oldvalueList.length;
                //removecurrentrow
                var rowId = e.model.id
                var resultTemp = originalValues.filter(item => item.id === e.model.id);

                var lengeOldvalueList = resultTemp.length;
                var selectValue = oldvalueList[lengeOldvalueList - 1]
                //originalValues.remove(result)
                var itemGrid = grid.dataSource.get(rowId);

                if (selectValue.Field_Name) {

                    Object.keys(selectValue).forEach(key => {
                        itemGrid.set(key, selectValue[key]);
                    });

                    grid.dataSource.sync();
                }

            }

            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/ClearDuplicateValue",
                data: { param: "Clear" },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {

                    }
                },
                failure: function (msg) {
                }
            });
        }
    });

    // ฟังก์ชันเพื่อแสดง popup ยืนยันการลบ
    function showDeleteConfirmationAddGrid(e) {
        var model = e.model;
        //e.preventDefault(); // ป้องกันการทำงานของปุ่มลบปกติ
        var grid = $("#gridAddPriority").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr")); // รับข้อมูลของแถวที่ถูกเลือก

        var isEditing = grid.editable;
        if (isEditing) {

            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;

        }


        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/CheckCaseStepGridModel",
            data: {
                gridFieldnameModel: dataItem.Field_Name
            },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                        if (response.code == "99") {

                            if (dataItem.Field_Name == "Province") {

                                var title = "System Information";
                                $("#ValidatePopup").data("kendoWindow").center().open();
                                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Province';
                                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                                return;
                            }
                            else if (dataItem.Field_Name == "District") {
                                var title = "System Information";
                                $("#ValidatePopup").data("kendoWindow").center().open();
                                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Dist';
                                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                                return;
                            }

                        }
                        else if (response.code == "98") {

                            var title = "System Information";
                            $("#ValidatePopup").data("kendoWindow").center().open();
                            document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_SympGroup';
                            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                            return;
                        }
                        else if (response.code == "0")
                        {

                            currentDeleteObject = dataItem;
                            currentGridDelete = grid;

                            var title = "System Information";
                            $("#ValidatePopupDelete").data("kendoWindow").center().open();
                            $("#ValidatePopupDelete").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                            $("#ValidatePopupDelete").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#B7B7B7');

                        }




                    }

                }

            },
            failure: function (msg) {
            }
        });


    }

    //Edit
    $("#gridEditPriority").kendoGrid({
        dataSource: {
            data: [],
            schema: {
                model: {
                    id: 'id',
                    fields: {
                        'id': {
                            type: 'number'
                        },
                        'Field_Name': {
                            type: 'string'
                        },
                        'Operator': {
                            type: 'string'
                        },
                        ValueField: { nullable: true, defaultValue: [] },
                        // เก็บข้อความสรุปเพื่อโชว์ในกริด/อินพุต (กัน [object Object])
                        ValueField_Text: { type: "string", defaultValue: "" },
                        // เก็บรหัสจริงจาก MultiSelect (LovValue1)
                        ValueFieldCodes: { defaultValue: [] }
                    }
                }
            },
            pageSize: 20
        },
        pageable: true,

        columns: [
            {
                command: [
                    { name: "edit", text: "Edit" },
                    { name: "detail", text: "Delete", click: showDeleteConfirmationEditGrid }
                ], title: "@C_ACTION"
            },
            {
                field: "Field_Name",
                title: "@C_Field_Name",
                editor: valueFieldNameDropDown
            },
            {
                field: "Operator",
                title: "@C_Operator",
                editor: valueOperaterDropDown
            },
            {
                field: "ValueField",
                title: "@C_Value",
                editor: valueValueDropDown,
                template: function (dataItem) {
                    // ถ้ามีสตริงสรุปแล้ว ใช้อันนี้เร็วสุด
                    if (dataItem.ValueField_Text) {
                        return kendo.htmlEncode(dataItem.ValueField_Text);
                    }

                    var v = dataItem.ValueField;
                    if (v == null) return "";

                    function toText(x) {
                        if (x == null) return "";
                        if (typeof x === "object") {
                            return (x.Text || x.LovValue1 || "");
                        }
                        return (x + "");
                    }

                    var out = "";
                    if (Array.isArray(v)) {
                        out = v.map(toText).filter(Boolean).join(", ");
                    } else if (typeof v === "string") {
                        out = v.indexOf(",") > -1
                            ? v.split(",").map(function (s) { return toText(s.trim()); }).filter(Boolean).join(", ")
                            : toText(v);
                    } else {
                        out = toText(v);
                    }

                    return kendo.htmlEncode(out);
                }
            }
        ],
        editable: "inline",
        dataBound: function (e) {
            var grid = $("#gridEditPriority").data("kendoGrid");

            var list = new Array();

            var dataSource = grid.dataSource;
            var dataItems = dataSource.data();
            var columns = grid.columns;

            var check = 0;
            var isValid = false;
            for (var i = 0; i < dataItems.length; i++) {
                var item = dataItems[i];
                for (var j = 1; j < columns.length; j++) {
                    var field = columns[j].field;
                    if (field == "Field_Name") {

                        var value = item[field];

                        if (value != null) {
                            list.push(value);
                        }

                    }



                }
            }

            console.log("gridEditPriority", list)

            var ListJson = JSON.stringify(list);
            //SendtoAddDupfromGridModel
            if (ListJson != "[]" && ListJson != "[null]") {
                $.ajax({
                    type: "POST",
                    url: "/ConfigurationRulePriority/AddDupfromGridModel",
                    data: {
                        gridFieldnameModel: ListJson
                    },
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        if (response) {
                            if (response != null) {
                                if (response.code == "0") {

                                }
                                else if (response.code == "1") {

                                }
                            }
                            else {

                                //ddl.setDataSource(null);
                                //ddl.refresh();
                            }
                        }

                    },
                    failure: function (msg) {
                    }
                });
            }

        },
        cancel: function (e) {

            var grid = $("#gridEditPriority").data("kendoGrid");

            if (originalValues !== null && e.model.id) {
                // ดึงข้อมูลจาก dataSource.view()
                var data = grid.dataSource.view();

                var oldvalueList = originalValues.filter(item => item.id === e.model.id);
                var lengeOldvalueList = oldvalueList.length;
                //removecurrentrow
                var rowId = e.model.id
                var resultTemp = originalValues.filter(item => item.id === e.model.id);

                var lengeOldvalueList = resultTemp.length;
                var selectValue = oldvalueList[lengeOldvalueList - 1]
                //originalValues.remove(result)
                var itemGrid = grid.dataSource.get(rowId);

                if (selectValue.Field_Name) {

                    Object.keys(selectValue).forEach(key => {
                        itemGrid.set(key, selectValue[key]);
                    });

                    grid.dataSource.sync();
                }

            }

            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/ClearDuplicateValue",
                data: { param: "Clear" },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {

                    }
                },
                failure: function (msg) {
                }
            });
        },
edit: function (e) {

    var grid = e.sender;
    var $row = $(e.container).closest("tr");
    var model = e.model;

    // ==== เดิม: หาชื่อฟิลด์ที่แก้ ====
    var idToEdit = "";
    if (grid.dataItem(e.container).Field_Name) {
        idToEdit = grid.dataItem(e.container).Field_Name;
    }
    if (idToEdit !== "") {
        currentEditFieldname = idToEdit;
    }

    // ==== เดิม: ยิงไปเก็บ CurrentType บน server ====
    if (currentEditFieldname != null && currentEditFieldname !== "") {
        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/StoringValueLookupOperator",
            data: { lookupData: currentEditFieldname },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response && response.code) {
                    if (response.code == "2") CurrentType = 2;
                    else if (response.code == "1") CurrentType = 1;
                }
            }
        });
    }

    // ==== ดึง widget แบบอิงแถว (เลิกใช้ selector global) ====
    var DDL1 = $row.find("#ddloperator_add_r1").data("kendoDropDownList") || null;
    var DDL2 = $row.find("#MultiValue_add_r1").data("kendoMultiSelect")   || null;
    var $txt = $row.find("#textb_add_r1");

    // กัน textb_add_r1 โผล่ซ้ำ
    if ($txt.length > 1) { $txt.slice(1).remove(); $txt = $row.find("#textb_add_r1"); }

    // ==== helper: สร้างค่าที่ต้อง preselect ให้ MultiSelect ====
    function normalizeCodesFromModel(m) {
        // พยายามเอาจาก ValueFieldCodes ก่อน, ถ้าไม่มี ค่อย fallback
        if (Array.isArray(m.ValueFieldCodes) && m.ValueFieldCodes.length) {
            return m.ValueFieldCodes.map(String);
        }
        if (Array.isArray(m.ValueField)) {
            return m.ValueField.map(function (x) {
                if (x == null) return null;
                if (typeof x === "object") {
                    if (x.LovValue1 != null) return String(x.LovValue1);
                    if (x.value    != null)  return String(x.value);
                    return null;
                }
                return String(x);
            }).filter(Boolean);
        }
        if (typeof m.ValueField === "string") {
            if (!m.ValueField.trim()) return [];
            return m.ValueField.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
        }
        if (typeof m.ValueField_Text === "string" && m.ValueField_Text.trim()) {
            return m.ValueField_Text.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
        }
        if (m.ValueField != null) {
            return [String(m.ValueField)];
        }
        return [];
    }

    // ==== ปรับ maxSelectedItems ตาม operator โดย "ไม่" refresh ====
    if (DDL1 && DDL2) {
        var opText = (DDL1.text() || "").toLowerCase();
        var cap = (opText === "in" || opText === "not in") ? 99 : 1;
        if (typeof DDL2.setOptions === "function") {
            DDL2.setOptions({ maxSelectedItems: cap });
        } else {
            DDL2.options.maxSelectedItems = cap;
        }
    }

    // ==== ฟังก์ชัน: อ่าน datasource แล้ว "restore ค่าเดิมทันทีหลังอ่านเสร็จ" ====
    function readAndRestore(ms, codes) {
        if (!ms || !ms.dataSource) return;

        // ถ้ายังไม่ต้องอ่าน (มีข้อมูลแล้วและ field เดิม) ก็ใส่ค่าได้เลย
        if (ms.dataSource.view().length && ms._boundFieldName === currentEditFieldname) {
            ms.value(codes);
            return;
        }

        // อ่านใหม่ และ restore ค่าหลังอ่าน (ครั้งเดียว)
        var applied = false;
        var apply = function () {
            if (applied) return;
            ms.value(codes);
            applied = true;
            ms._boundFieldName = currentEditFieldname; // จดว่า DS นี้ถูกโหลดให้ field นี้แล้ว
        };
        ms.dataSource.one("change", apply);
        ms.dataSource.one("requestEnd", apply);
        ms.dataSource.read(); // << จำเป็นต้องอ่านรอบแรก เพื่อให้ DS ตรงกับ Field ที่เพิ่งเลือก
    }

    // ==== PRESELECT รอบแรกแบบหนึบ ๆ ====
    if (DDL2) {
        var initCodes = normalizeCodesFromModel(model);
        readAndRestore(DDL2, initCodes);
    }

    // ==== Toggle การแสดงผลตาม CurrentType ====
    if (CurrentType == 2) {
        if (DDL2) { DDL2.enable(true); DDL2.wrapper.show(); }
        if ($txt.length) { $txt.hide(); }
    } else if (CurrentType == 1) {
        if (DDL2) { DDL2.enable(false); DDL2.wrapper.hide(); }
        if ($txt.length) { $txt.show().prop("disabled", false); }
    }

    // ==== อย่า refresh/read โดยไม่จำเป็น (จะทำให้ค่าเดิมหาย) ====
    // ลบทิ้งของเดิมพวก:
    // DDL1.dataSource.read();
    // DDL2.dataSource.read();   // เราอ่านเฉพาะผ่าน readAndRestore() แล้ว
    // DDL2.refresh();
    // grid.refresh();

    // ==== ของเดิม: ตรวจ Province/Symptom Group ====
    if (e.model.Field_Name) {
        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/CheckCaseStepGridModel",
            data: { gridFieldnameModel: e.model.Field_Name },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response && response.code) {
                    if (response.code == "99") {

                        var title = "System Information";
                        $("#ValidatePopup").data("kendoWindow").center().open();
                        document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Province';
                        $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                        $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

                        e.preventDefault();

                        var grid2 = $("#gridEditPriority").data("kendoGrid");
                        grid2.dataSource.add({ id: 99999, Field_Name: "", Operator: "", ValueField: "" });

                        var totalRecords = grid2.dataSource.total() - 1;
                        var dataItem = grid2.dataSource.at(totalRecords);
                        grid2.dataSource.remove(dataItem);
                        return;
                    }
                    else if (response.code == "98") {

                        var title = "System Information";
                        $("#ValidatePopup").data("kendoWindow").center().open();
                        document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_SympGroup';
                        $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                        $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

                        e.preventDefault();

                        var grid3 = $("#gridEditPriority").data("kendoGrid");
                        grid3.dataSource.add({ id: 99999, Field_Name: "", Operator: "", ValueField: "" });

                        var totalRecords2 = grid3.dataSource.total() - 1;
                        var dataItem2 = grid3.dataSource.at(totalRecords2);
                        grid3.dataSource.remove(dataItem2);
                        return;
                    }
                }
            }
        });
    }

    // ==== ของเดิม: เก็บ originalValues ====
    var result = originalValues.filter(item => item.id !== e.model.id);
    originalValues = result;
    originalValues.push(JSON.parse(JSON.stringify(e.model)));
},


 save: function (e) {
    var grid  = $("#gridAddPriority").data("kendoGrid");
    var model = e.model;

    var $row = e.container || $(document);

    // อ่านค่าจากสองช่อง text
    var T1var = ($row.find("#textb_add_r2").val() || "").trim(); // ตัวเลข
    var T2var = ($row.find("#textb_add_r1").val() || "").trim(); // ข้อความ

    // MultiSelect
    var ms = $row.find("#MultiValue_add_r1").data("kendoMultiSelect")
          || $("#MultiValue_add_r1").data("kendoMultiSelect");

    var codes = [];
    var objs  = [];
    var textJoined = "";

    if (ms) {
        codes = ms.value() || [];
        objs  = ms.dataItems() || [];

        // กติกา ALL: เหลือ ALL ตัวเดียว
        if (codes.indexOf("ALL") !== -1) {
            codes = ["ALL"];
            ms.value(codes);
            objs = objs.filter(function (x) { return (x && x.LovValue1 === "ALL"); });
        }

        // รวมข้อความไว้โชว์
        textJoined = objs
            .map(function (x) { return (x.Text || x.LovValue1 || ""); })
            .filter(Boolean)
            .join(", ");
    }

    // ถ้าไม่เลือก MultiSelect และไม่กรอก text ใด ๆ ให้แจ้งเตือน
    var noMulti = !codes || codes.length === 0;
    if (noMulti && T1var === "" && T2var === "") {
        var title = "System Information";
        $("#ValidatePopup").data("kendoWindow").center().open();
        document.getElementById('_dInformationValidate').innerHTML = '@M_Validate_Blank';
        $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
        $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
        e.preventDefault();
        return;
    }

    // ข้อความสุดท้ายสำหรับโชว์
    var finalText = textJoined || T2var || T1var;

    // ------- แยกตามโหมด -------
    if (typeof CurrentType !== "undefined" && CurrentType == 1) {
        // โหมดข้อความ: ValueField = สตริง (ตามโค้ดเดิมที่ input bind ไป field เดียว)
        model.set("ValueField", finalText);      // <<<< ใส่ค่าให้ ValueField
        model.set("ValueField_Text", finalText); // สำหรับ template/โชว์เร็ว
        model.set("ValueFieldCodes", []);        // ไม่ส่งโค้ด
    } else {
        // โหมด MultiSelect (หรือไม่ระบุ CurrentType แต่มีเลือกค่า)
        if (!codes.length && (T1var !== "" || T2var !== "")) {
            // fallback: ถ้าไม่ได้เลือก MultiSelect แต่มี text ให้เก็บแบบข้อความ
            model.set("ValueField", finalText);
            model.set("ValueField_Text", finalText);
            model.set("ValueFieldCodes", []);
        } else {
            // ปกติ MultiSelect
            model.set("ValueField", objs);         // ออบเจ็กต์ไว้ให้ template สร้างข้อความ
            model.set("ValueField_Text", textJoined);
            model.set("ValueFieldCodes", codes);   // โค้ดไว้ส่ง backend
        }
    }
},
        remove: function (e) {
            var model = e.model;

        }
    });

    // ฟังก์ชันเพื่อแสดง popup ยืนยันการลบ
    function showDeleteConfirmationEditGrid(e) {
        var model = e.model;
        //e.preventDefault(); // ป้องกันการทำงานของปุ่มลบปกติ
        var grid = $("#gridEditPriority").data("kendoGrid");
        var dataItem = grid.dataItem($(e.currentTarget).closest("tr")); // รับข้อมูลของแถวที่ถูกเลือก

        var isEditing = grid.editable;
        if (isEditing) {
            //alert("Please complete the editing operation before editing another row");

            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            //e.preventDefault();
            return;

        }

        var districtFlag = 0;
        var SubFlag = 0;
        var symtomFlag = 0;
        var dataSource = grid.dataSource;
        var dataItemsSoruce = dataSource.data();
        var columns = grid.columns;

        for (var i = 0; i < dataItemsSoruce.length; i++) {
            var item = dataItemsSoruce[i];
            for (var j = 1; j < columns.length; j++) {
                var field = columns[j].field;
                if (field == "Field_Name") {

                    var value = item[field];
                    if (value == "District") {
                        //list.push(value);
                        districtFlag = 1;
                    }

                    if (value == "Sub District") {
                        //list.push(value);
                        SubFlag = 1;
                    }

                    if (value == "Symptom Name") {
                        symtomFlag = 1;
                    }

                }



            }
        }

        if (dataItem.Field_Name == "Province") {

            if (SubFlag == 1 || districtFlag == 1) {
                var title = "System Information";
                $("#ValidatePopup").data("kendoWindow").center().open();
                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Province';
                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                return;
            }
        }
        else if (dataItem.Field_Name == "District") {
            if (SubFlag == 1) {
                var title = "System Information";
                $("#ValidatePopup").data("kendoWindow").center().open();
                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Dist';
                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                return;
            }
        }
        else if (dataItem.Field_Name == "Symptom Group") {
            if (symtomFlag == 1) {
                var title = "System Information";
                $("#ValidatePopup").data("kendoWindow").center().open();
                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_SympGroup';
                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                return;
            }
        }


        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/CheckCaseStepGridModel",
            data: {
                gridFieldnameModel: dataItem.Field_Name
            },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response != null) {
                        if (response.code == "99") {

                            if (dataItem.Field_Name == "Province") {

                                var title = "System Information";
                                $("#ValidatePopup").data("kendoWindow").center().open();
                                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Province';
                                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                                return;
                            }
                            else if (dataItem.Field_Name == "District") {
                                var title = "System Information";
                                $("#ValidatePopup").data("kendoWindow").center().open();
                                document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_Dist';
                                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                                return;
                            }

                        }
                        else if (response.code == "98") {

                            var title = "System Information";
                            $("#ValidatePopup").data("kendoWindow").center().open();
                            document.getElementById('_dInformationValidate').innerHTML = '@M_Unselect_SympGroup';
                            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                            return;
                        }
                        else if (response.code == "0")
                        {

                            currentDeleteObject = dataItem;
                            currentGridDelete = grid;

                            var title = "System Information";
                            $("#ValidatePopupDelete").data("kendoWindow").center().open();
                            $("#ValidatePopupDelete").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                            $("#ValidatePopupDelete").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#B7B7B7');

                        }

                    }

                }

            },
            failure: function (msg) {
            }
        });


        // แสดง popup dialog
        //$("#deleteConfirmation").open()

    }

    function AddnewRow(e) {

        var grid = $("#gridAddPriority").data("kendoGrid");
        var isEditing = grid.editable;
        if (isEditing) {
            //alert("Please complete the editing operation before editing another row");

            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;

        }

        var dataSource = grid.dataSource;
        var total = dataSource.data().length;
        var KGid = 1;
        KGid = KGid += total;

        var dataSource = grid.dataSource;
        var newItem = dataSource.insert({ id: KGid });
        var newRow = grid.items().filter("[data-uid='" + newItem.uid + "']");
        pointerSameRow = "";
        grid.editRow(newRow);

    }

    function AddnewEditRow(e) {

        var gridEdit = $("#gridEditPriority").data("kendoGrid");
        //var dataRow = { EFFECTIVE_DATE_START: new Date(new Date().setDate(new Date().getDate() + 1)) };
        var isEditing = gridEdit.editable;
        if (isEditing) {
            //alert("Please complete the editing operation before editing another row");

            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;

        }

        var dataSource = gridEdit.dataSource;
        var total = dataSource.data().length;
        var KGid = 1;
        KGid = KGid += total;

        var dataSource = gridEdit.dataSource;
        var newItem = dataSource.insert({ id: KGid });
        var newRow = gridEdit.items().filter("[data-uid='" + newItem.uid + "']");
        pointerSameRow = "";
        gridEdit.editRow(newRow);

    }
    function valueFieldNameDropDown(container, options) {
        // input + binding ตามเดิม
        $('<input id="ddlFieldname_add_r1" data-bind="value:' + options.field + '" required name="Field Name"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "Text",
                dataValueField: "Text",
                dataSource: {
                    transport: {
                        read: {
                            url: "/ConfigurationRulePriority/GetvalueDropDown",
                            data: {
                                dataS: "Field_Name",
                                option: "" + (options.model.Field_Name || "") + ""
                            },
                            dataType: "json"
                        }
                    }
                },
                valuePrimitive: true,
                suggest: true,

                // handler เดิมของคุณ (ถ้ามี)
                select: typeof onConditionChange === "function" ? onConditionChange : null,

                // เมื่อผู้ใช้เปลี่ยนค่า Field_Name ให้ส่งผลไปที่ MultiSelect ของ Value
                change: function (e) {
                    // เรียก handler เดิมของคุณก่อน (ถ้ามี)
                    if (typeof onConditionChangeDone === "function") {
                        onConditionChangeDone.call(this, e);
                    }

                    var selected = (this.value() || "").trim().toLowerCase();
                    var tf = (selected === "province") ? "LovValue1" : "Text";

                    // อัปเดต MultiSelect ของคอลัมน์ Value (ใช้ id เดิมของคุณ)
                    var ms = $("#MultiValue_add_r1").data("kendoMultiSelect");
                    if (ms) {
                        // เปลี่ยน field แสดงผล + กันแท็กว่างด้วย template
                        ms.setOptions({
                            dataTextField: tf,
                            tagTemplate: function (d) { return kendo.htmlEncode(d[tf] || d.Text || d.LovValue1 || ""); },
                            itemTemplate: function (d) { return kendo.htmlEncode(d[tf] || d.Text || d.LovValue1 || ""); }
                        });
                        ms.refresh(); // รีเฟรชหน้าตา
                    }
                },

                dataBound: function () {
                    if (options.model.Field_Name) {
                        this.value(options.model.Field_Name);
                    }
                }
            });
    }


    //function valueValueDropDown(container, options) {
    //    function getFieldName() {
    //        var fromModel = (options.model && typeof options.model.get === "function")
    //            ? (options.model.get("Field_Name") || "")
    //            : (options.model && options.model.Field_Name) || "";

    //        if (fromModel) return fromModel;

    //        var ddl = $("#ddlFieldname_add_r1").data("kendoDropDownList");
    //        return ddl ? (ddl.value() || "") : "";
    //    }

    //    var fieldName = (getFieldName() + "").trim().toLowerCase();
    //    var textField = (fieldName === "province") ? "LovValue1" : "Text";
    //    console.log("textField", textField);
    //    $('<select id="MultiValue_add_r1" multiple="multiple" data-value-field="LovValue1" data-bind="value:' + options.field + '"/>')
    //        .appendTo(container)
    //        .kendoMultiSelect({
    //            autoBind: true,
    //            dataTextField: textField,
    //            dataValueField: "LovValue1",
    //            dataSource: dataSourcePaygValueParameter,

    //            tagTemplate: function (d) { return kendo.htmlEncode(d[textField] || d.Text || d.LovValue1 || ""); },
    //            itemTemplate: function (d) { return kendo.htmlEncode(d[textField] || d.Text || d.LovValue1 || ""); },

    //            change: onMultiValueChange,
    //            open: onOpen,
    //            close: onClose,
    //            valuePrimitive: false,
    //            suggest: true,
    //            wrapper: true,
    //            enable: false,
    //            maxSelectedItems: currentSelectOperatorValue
    //        });

    //    $('<input id="textb_add_r2"  data-bind="value:' + options.field + '" style="width:100%" maxlength="50" disabled="disabled" onkeypress="return event.charCode >= 48 && event.charCode <= 57" />').appendTo(container);
    //    $('<input id="textb_add_r1"  data-bind="value:' + options.field + '" style="width:100%" disabled="disabled" maxlength="50" />').appendTo(container);

    //    $("#textb_add_r2").hide();
    //    $("#textb_add_r1").hide();
    //}






    function valueValueDropDown(container, options) {
        function getFieldName() {
            var fromModel = (options.model && typeof options.model.get === "function")
                ? (options.model.get("Field_Name") || "")
                : (options.model && options.model.Field_Name) || "";
            if (fromModel) return fromModel;
            var ddl = $("#ddlFieldname_add_r1").data("kendoDropDownList");
            return ddl ? (ddl.value() || "") : "";
        }
        var fieldName = (getFieldName() + "").trim().toLowerCase();
        var textField = (fieldName === "province") ? "LovValue1" : "Text";

        // ---- สร้างค่าที่ต้องเลือกไว้ล่วงหน้า (เอาจาก model) ----
        function toCodes(m) {
            if (Array.isArray(m.ValueFieldCodes) && m.ValueFieldCodes.length) return m.ValueFieldCodes.map(String);
            if (Array.isArray(m.ValueField)) {
                return m.ValueField.map(function (x) {
                    if (x == null) return null;
                    if (typeof x === "object") {
                        if (x.LovValue1 != null) return String(x.LovValue1);
                        if (x.value != null) return String(x.value);
                        return null;
                    }
                    return String(x);
                }).filter(Boolean);
            }
            if (typeof m.ValueField === "string" && m.ValueField.trim())
                return m.ValueField.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
            if (typeof m.ValueField_Text === "string" && m.ValueField_Text.trim())
                return m.ValueField_Text.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
            if (m.ValueField != null) return [String(m.ValueField)];
            return [];
        }
        var initCodes = toCodes(options.model); // << ค่าที่ต้องแสดงตั้งแต่ครั้งแรก

        // ---- MultiSelect ----
        var $ms = $('<select id="MultiValue_add_r1" multiple="multiple"></select>').appendTo(container);
        $ms.kendoMultiSelect({
            autoBind: false,                      // กันอ่านทันที (จะไม่ล้างค่า)
            dataTextField: textField,
            dataValueField: "LovValue1",
            dataSource: dataSourcePaygValueParameter, // ของเดิม
            valuePrimitive: true,
            value: initCodes,                     // << ใส่ค่าเริ่มต้นตั้งแต่สร้าง
            valueMapper: function (opts) {        // << ให้ Kendo แปลงค่าได้ทันที
                opts.success(opts.value || []);
            },
            tagTemplate: function (d) { return kendo.htmlEncode(d[textField] || d.Text || d.LovValue1 || ""); },
            itemTemplate: function (d) { return kendo.htmlEncode(d[textField] || d.Text || d.LovValue1 || ""); },
            maxSelectedItems: window.currentSelectOperatorValue || 1,
            change: function (e) {
                // sync กลับ model
                var codes = (this.value() || []).map(String);
                var items = this.dataItems() || [];
                var txt = items.map(function (x) { return (x && (x[textField] || x.Text || x.LovValue1 || "")); })
                    .filter(Boolean).join(", ");
                options.model.set("ValueFieldCodes", codes);
                options.model.set("ValueField_Text", txt);
                options.model.set("ValueField", items); // เก็บออบเจ็กต์ไว้ใช้ template
            }
        });





        // ---- ช่อง text (โหมด CurrentType == 1) สร้างแค่ 1 อัน ----
        $('<input id="textb_add_r1" data-bind="value:ValueField_Text" style="width:100%" maxlength="50" />')
            .appendTo(container).hide();

        kendo.bind(container, options.model);
    }


    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function onMultiValueChange(e) {

        var strValuefromMulti;
        var multiselect = $("#MultiValue_add_r1").data("kendoMultiSelect");
        var selectedData = [];
        var items = multiselect.value();

        for (var i = 0; i < items.length; i++) {
            selectedData.push(items[i]);

            if (items[i] == "ALL") {
                multiselect.value([]);
                multiselect.value(["ALL"]);
                selectedData = [];
                selectedData.push(items[i]);
            }
            //selectedData.toString()
        }
        var strValuefromMulti = selectedData.toString();

        var FlagTextProvince = $("#ddlFieldname_add_r1").data("kendoDropDownList").value();

        if (strValuefromMulti != null) {
            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringProvinceandDistrict",
                data: {
                    flagProvince: FlagTextProvince,
                    stringProvinceAndDistrictData: strValuefromMulti
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {

                        }
                        else {

                            //ddl.setDataSource(null);
                            //ddl.refresh();
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }

        CurrentSTRvalue = strValuefromMulti;

    }

    function onOpen(e) {
        //nothingfornow
    }

    function onClose(e) {
        //nothingfornow
    }

    function valueOperaterDropDown(container, options) {

        $('<input id="ddloperator_add_r1" required name="' + options.field + '"/>')

            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "Value1",
                dataValueField: "Value1",
                dataSource: {
                    transport: {
                        read: {
                            url: "/ConfigurationRulePriority/GetvalueDropDown",
                            data: {
                                dataS: "Operator"
                            },
                            dataType: "json"
                        }
                    },
                    schema: {
                        model: { id: "id" }
                    }
                },
                select: onOperatorChange,
                change: onOperatorChangeDone,
                valuePrimitive: true,
                enable: false,
                suggest: true
            });
    }

    function onOperatorChange(e) {

        var DDL2 = $("#MultiValue_add_r1").data("kendoMultiSelect");
        DDL2.enable(true);
        $('#textb_add_r1').prop('disabled', false);
        $('#textb_add_r2').prop('disabled', false);
    }

    function onOperatorChangeDone(e) {

        var currentselectOperator = $("#ddloperator_add_r1").data("kendoDropDownList").text();
        var DDL2 = $("#MultiValue_add_r1").data("kendoMultiSelect");
        DDL2.enable(true);
        $('#textb_add_r1').prop('disabled', false);
        $('#textb_add_r2').prop('disabled', false);

        if (currentselectOperator == "in") {
            currentSelectOperatorValue = 99;
            DDL2.options.maxSelectedItems = currentSelectOperatorValue;
            DDL2.value("");
            DDL2.refresh();
            DDL2.value("");
        }
        else if (currentselectOperator == "not in") {
            currentSelectOperatorValue = 99;
            DDL2.options.maxSelectedItems = currentSelectOperatorValue;
            DDL2.value("");
            DDL2.refresh();
            DDL2.value("");
        }
        else if (currentselectOperator != "in" && currentselectOperator != "not in") {
            currentSelectOperatorValue = 1;
            DDL2.options.maxSelectedItems = currentSelectOperatorValue;
            DDL2.value("");
            DDL2.refresh();
            DDL2.value("");
        }

    }

    function onConditionChange(e) {

        cureReturnFieldname = $("#ddlFieldname_add_r1").data("kendoDropDownList").text();
        pointerAddLastFieldname = $("#ddlFieldname_add_r1").data("kendoDropDownList").text();

    }

    function onConditionChangeDone(e) {

        var DDLF = $("#ddlFieldname_add_r1").data("kendoDropDownList");
        var DDLFieldName = $("#ddlFieldname_add_r1").data("kendoDropDownList").text();
        var DDL1 = $("#ddloperator_add_r1").data("kendoDropDownList");
        var DDL2 = $("#MultiValue_add_r1").data("kendoMultiSelect");


        if (pointerAddLastFieldname == "Province" || pointerAddLastFieldname == "District" || pointerAddLastFieldname == "Sub District" || pointerAddLastFieldname == "Symptom Name" || pointerAddLastFieldname == "Symptom Group") {
            var model = e.model;
            var CheckNistepflaggCase = 0;
            if (DDLFieldName == "District") {
                //ChkcurrentMistepState = 99;
                $("#PreventMistepFilterPopup").data("kendoWindow").center().open();
                $("#PreventMistepFilterPopup").prev().find(".k-window-title").text("System Information").css('color', '#FFFFFF');
                $("#PreventMistepFilterPopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                //var DDL1 = $("#ddlFieldname_add_r1").data("kendoDropDownList");
                //DDL1.value("");
                //DDL1.refresh();
                CheckNistepflaggCase = 99;
                //return;
            }
            else if (DDLFieldName == "Sub District") {
                //ChkcurrentMistepState = 99;
                $("#PreventMistepFilterPopup").data("kendoWindow").center().open();
                $("#PreventMistepFilterPopup").prev().find(".k-window-title").text("System Information").css('color', '#FFFFFF');
                $("#PreventMistepFilterPopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                //var DDL1 = $("#ddlFieldname_add_r1").data("kendoDropDownList");
                //DDL1.value("");
                //DDL1.refresh();
                CheckNistepflaggCase = 99;
                //return;
            }
            else if (DDLFieldName == "Symptom Name") {
                //ChkcurrentMistepState = 98;
                $("#PreventMistepFilterPopup02").data("kendoWindow").center().open();
                $("#PreventMistepFilterPopup02").prev().find(".k-window-title").text("System Information").css('color', '#FFFFFF');
                $("#PreventMistepFilterPopup02").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

                CheckNistepflaggCase = 99;

            }


            if (CheckNistepflaggCase == 99) {

                $.ajax({
                    type: "POST",
                    url: "/ConfigurationRulePriority/ReturnMistepcaseDuplicateFieldname",
                    data: {
                        FieldnameData: pointerAddLastFieldname
                    },
                    dataType: "json",
                    async: false,
                    success: function (response) {
                        if (response) {
                            if (response != null) {
                                if (response.code == "1") {

                                }
                                else if (response.code == "99") {

                                }
                            }
                            else {

                            }
                        }

                    },
                    failure: function (msg) {
                    }
                });

                var DDLFieldNameA = $("#ddlFieldname_add_r1").data("kendoDropDownList");
                DDLFieldNameA.dataSource.read();

                $("#ddlFieldname_add_r1").data('kendoDropDownList').value(cureReturnFieldname);

                $("#ddlFieldname_add_r1").val(pointerAddLastFieldname);

                return;
            }
        }

            //storeFilterFieldname
            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringValueDuplicateFieldname",
                data: {
                    FieldnameData: DDLFieldName,
                    OldFieldnameDate: CurrentOldSelectFieldname
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            if (response.code == "99") {

                                ChkcurrentMistepState = 99;
                                $("#PreventMistepFilterPopup").data("kendoWindow").center().open();
                                $("#PreventMistepFilterPopup").prev().find(".k-window-title").text("System Information").css('color', '#FFFFFF');
                                $("#PreventMistepFilterPopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                                var DDL1 = $("#ddlFieldname_add_r1").data("kendoDropDownList");
                                DDL1.value("");
                                DDL1.refresh();

                            }
                            else if (response.code == "98") {

                                ChkcurrentMistepState = 98;
                                $("#PreventMistepFilterPopup02").data("kendoWindow").center().open();
                                $("#PreventMistepFilterPopup02").prev().find(".k-window-title").text("System Information").css('color', '#FFFFFF');
                                $("#PreventMistepFilterPopup02").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                                var DDL1 = $("#ddlFieldname_add_r1").data("kendoDropDownList");
                                DDL1.value("");
                                DDL1.refresh();

                            }
                            else if (response.code == "1") {
                                ChkcurrentMistepState = 1;
                            }
                            else if (response.code == "0") {
                                ChkcurrentMistepState = 1;
                            }
                        }
                        else {

                        }
                    }

                },
                failure: function (msg) {
                }
            });

            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringValueLookupOperator",
                data: {
                    lookupData: DDLFieldName
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            if (response.code == "2") {
                                CurrentType = 2;
                            }
                            else if (response.code == "1") {
                                CurrentType = 1;
                            }
                            else if (response.code == "99") {

                            }
                        }
                        else {

                        }
                    }

                },
                failure: function (msg) {
                }
            });

            if (DDL1 && DDL1.dataSource && DDL2 && DDL2.dataSource) {

                DDL1.refresh();
                DDL1.text("");
                DDL2.refresh();
                DDL2.value([]);
                $("#textb_add_r1").text("");
                $("#textb_add_r1").val('');
                $("#textb_add_r1").val(null);
                $("#textb_add_r2").text("");
                $("#textb_add_r2").val('');
                $("#textb_add_r2").val(null);

                DDL1.dataSource.read();
                DDL2.dataSource.read();
            }

            if (CurrentType == 2) {
                //DDL2.enable = true;
                //DDL2.value([]);
                DDL2.value([]);
                DDL2.refresh();
                DDL2.wrapper.show();

                $("#textb_add_r1").text("");
                $("#textb_add_r1").val('');
                $("#textb_add_r1").val(null);
                $("#textb_add_r1").hide();

                $("#textb_add_r2").text("");
                $("#textb_add_r2").val('');
                $("#textb_add_r2").val(null);
                $("#textb_add_r2").hide();

            }
            else if (CurrentType == 1) {

                DDL2.value([]);
                DDL2.wrapper.hide();

                    var DDLFieldName = $("#ddlFieldname_add_r1").data("kendoDropDownList").text();

                        $("#textb_add_r2").text("");
                        $("#textb_add_r2").val('');
                        $("#textb_add_r2").val(null);
                        $("#textb_add_r2").hide();

                        $("#textb_add_r1").show();
                        $("#textb_add_r1").text("");
                        $("#textb_add_r1").val('');
                        $("#textb_add_r1").val(null);

            }

        DDL1.enable(true);
        DDL2.enable(false);
        $('#textb_add_r1').prop('disabled', true);
        $('#textb_add_r2').prop('disabled', true);

        DDL1.dataSource.read();
        DDL2.dataSource.read();

        if (CurrentType == 2) {
            //DDL2.enable = true;
            //DDL2.value([]);
            DDL2.wrapper.show();
            //$("#textb_add_r1").hide();
            //DDL3.enable = false;
        }
        else if (CurrentType == 1) {
            //DDL2.value([]);
            DDL2.wrapper.hide();
            //$("#textb_add_r1").show();
            //DDL3.enable = true;
        }

        if (typeof DDL2 !== "undefined" && typeof DDL1 !== "undefined" && DDL2 !== null && DDL1 !== null) {

            if (DDL2.value() != "") {

                DDL2.enable(true);
            }

            if (CurrentType == 2) {
                if (DDL1.value() != "" && DDL2.value() == "") {
                    grid.refresh();
                }
            }


            if (DDL1.value() != "") {

                DDL1.enable(true);

                $('#textb_add_r1').prop('disabled', false);
                $('#textb_add_r2').prop('disabled', false);
            }
        }

        //preventsamerowmistake

        pointerSameRow = $("#ddlFieldname_add_r1").data("kendoDropDownList").text();

            var ddl = $("#ddlFieldname_add_r1").data("kendoDropDownList");

            var oldData = ddl.dataSource.data();
            if (pointerSameRow == "Province") {
                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Sub District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Symptom Name") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }
            }
            else if (pointerSameRow == "District") {
                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Sub District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Province") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Symptom Name") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }
            }
            else if (pointerSameRow == "Symptom Group") {
                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Symptom Name") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Sub District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }
            }
            else if (pointerSameRow == "Symptom Name") {
                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Symptom Group") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }

                for (var x = 0; x < oldData.length; x++) {
                    if (oldData[x].Text == "Sub District") {
                        //removes item
                        ddl.dataSource.remove(oldData[x]);
                        //selects first item
                        //ddl.select(0);
                    }
                }
            }


    }

    function ConfirmAddRulePriorityConfiguration() {

        var grid = $("#gridAddPriority").data("kendoGrid");

        var isEditing = grid.editable;
        if (isEditing) {
            // If currently editing, show an alert or handle as needed
            //alert("Please complete the editing operation before Svaing.");
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
            return;
        }

        var RULE_NAME_A = $("#RULE_NAME_A").val();
        var modalddlAddLookupname = $("#modalddlAddLookupname").data('kendoDropDownList').value();

        var modalddlAddPriorityList = $("#modalddlAddPriorityList").data('kendoDropDownList').value();

        if (modalddlAddPriorityList == '') {
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Require_Field Priority';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
            return;
        }

        var multiselect = $("#modalddlAddLookupParam").data("kendoMultiSelect");
        var answerParamMulti = "";
        var selectedData = [];
        var items = multiselect.value();
        for (var i = 0; i < items.length; i++) {
            selectedData.push(items[i]);
        }
        var answerParamMulti = selectedData.toString();

        if (answerParamMulti == "") {
            // If currently editing, show an alert or handle as needed
            //alert("Please complete the editing operation before Svaing.");
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Checked_Parameter';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
            return;
        }

        //var grid = $("#gridAddPriority").data("kendoGrid");
        var allRowValues = getAllRowValues(grid);
        var data = JSON.stringify(allRowValues);

        var modalddlAddLookupParam = multiselect.value();

        var modaldtpAddDateFrom = $("#modaldtpAddDateFrom").data("kendoDatePicker");
        //var dataDateFrom = modaldtpAddDateFrom.value();
        //var fdataDateFrom = kendo.toString(modaldtpAddDateFrom.value() - 1, "dd/MM/yyyy");
        var fdataDateFrom = modaldtpAddDateFrom._oldText;
        var modaldtpAddDateTo = $("#modaldtpAddDateTo").data("kendoDatePicker");
        //var dataDateTo = modaldtpAddDateTo.value();
        var fdataDateTo = kendo.toString(modaldtpAddDateTo.value(), "dd/MM/yyyy");

        //LMR
        var LMRisChecked = "";
        var checkbox = document.getElementById("I_LMR_FLAG_ADD");
        var isChecked = checkbox.checked;
        if (isChecked) {
            LMRisChecked = "YES";
        }

        //var data = JSON.stringify(allRowValues);
        //console.log(allRowValues);
        console.log(data);
        var chkadd = ValidationAddDataRulePriority();
        //var chkadd = true;
        //var input = $.trim($("#_LOOKUP_NAME").val())
        var check_input = hasSpecialCharacters(RULE_NAME_A);

        if (check_input) {

            chkadd = true;
        }
        else {


            //$("#validate-" + "_LOOKUP_NAME").html(ValidationIcon() + "This field not allow special characters.");
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Invalid_Format';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            chkadd = false;
        }

        if (data == "[]") {

            //$("#validate-" + "_LOOKUP_NAME").html(ValidationIcon() + "This field not allow special characters.");
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Check_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            chkadd = false;
        }

        if (chkadd == true) {

            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/AddNewRulePriorityConfiguration",
                data: {
                    Rule_id: "",
                    Rule_name: RULE_NAME_A,
                    Priority: modalddlAddPriorityList,
                    Lookup_name: modalddlAddLookupname,
                    Lookup_param_list: answerParamMulti,
                    effective_start: fdataDateFrom,
                    effective_end: fdataDateTo,
                    Lmr_flag: LMRisChecked,
                    Condition_list: data,
                    Create_by: "TestUser",
                    Modified_by:""
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response.code == "0") {
                            var title = "System Information";
                            showMSG("success", response.msg, title);
                            $("#AddPriorityRulePopup").data("kendoWindow").close();
                            _Clear();
                            //_Search();
                        }
                        else{
                            //$("#AddPriorityRulePopup").data("kendoWindow").close();
                            //var title = "System Information";
                            //showMSG("error", response.msg, title);

                            var title = "System Information";
                            $("#ValidatePopup").data("kendoWindow").center().open();
                            //document.getElementById('_dInformationValidate').innerHTML = 'Plase set Rule Priority condition at least one.';
                            document.getElementById('_dInformationValidate').innerHTML = response.msg;
                            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                        }
                    }

                },
                failure: function (msg) {
                    var title = "System Information";
                    showMSG("error", response.msg, title);
                }
            });
        }
        else {
            //var title = "System Information";
            //showMSG("error", response.msg, title);
        }
    }

    function ConfirmEditRulePriorityConfiguration() {


        var grid = $("#gridEditPriority").data("kendoGrid");

        var editingFlag = 0;
        var paramFlag = 0;

        var isEditing = grid.editable;
        if (isEditing) {
            editingFlag = 99;
            // If currently editing, show an alert or handle as needed
            //alert("Please complete the editing operation before Svaing.");
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;
        }

        ////Edit-Grid-calling
        //var grid = $("#gridEditPriority").data("kendoGrid");
        //var allRowValues = getAllRowValues(grid);
        //var data = JSON.stringify(allRowValues);

        //rulename_edit
        var RULE_NAME_E = $("#RULE_NAME_E").val();
        //lookupname_edit
        var modalddlAddLookupname = $("#modalddlEditLookupname").data('kendoDropDownList').value();
        //prioritylist_edit
        var modalddlAddPriorityList = $("#modalddlEditPriorityList").data('kendoDropDownList').value();

        if (modalddlAddPriorityList == '') {
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Require_Field Priority';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
            return;
        }
        //lookupparam_edit
        var multiselect = $("#modalddlEditLookupParam").data("kendoMultiSelect");
        var answerParamMulti = "";

        var selectedData = [];
        var items = multiselect.value();
        for (var i = 0; i < items.length; i++) {
            selectedData.push(items[i]);
        }
        var answerParamMulti = selectedData.toString();

        if (answerParamMulti == "") {
            paramFlag = 99;
            // If currently editing, show an alert or handle as needed
            //alert("Please complete the editing operation before Svaing.");
            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Checked_Parameter';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;
        }
        //Date_edit
        //Edit-Grid-calling
        //var grid = $("#gridEditPriority").data("kendoGrid");
        var allRowValues = getAllRowValues(grid);
        var data = JSON.stringify(allRowValues);

        var fdataDateFrom = $("#modaldtpEditDateFrom").val();

        var LMRisChecked = "";
        var checkbox = document.getElementById("I_LMR_FLAG_EDIT");
        var isChecked = checkbox.checked;
        if (isChecked) {
            LMRisChecked = "YES";
        }

        var fdataDateTo = $("#modaldtpEditDateTo").val();

        //Validate-Edit
        var chkadd = ValidationEditDataRulePriority();

        var check_input = hasSpecialCharacters(RULE_NAME_E);

        if (check_input) {

            chkadd = true;
        }
        else {

            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Invalid_Format';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            chkadd = false;
        }

        if (data == "[]") {

            var title = "System Information";
            $("#ValidatePopup").data("kendoWindow").center().open();
            document.getElementById('_dInformationValidate').innerHTML = '@M_Check_Row';
            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            chkadd = false;
        }

        if (chkadd == true && paramFlag == 0 && editingFlag == 0) {

            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/EditRulePriorityConfiguration",
                data: {
                    Rule_id: "",
                    Rule_name: RULE_NAME_E,
                    Priority: modalddlAddPriorityList,
                    Lookup_name: modalddlAddLookupname,
                    Lookup_param_list: answerParamMulti,
                    effective_start: fdataDateFrom,
                    effective_end: fdataDateTo,
                    Lmr_flag: LMRisChecked,
                    Condition_list: data,
                    Create_by: "TestUser",
                    Modified_by: ""
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response.code == "0") {
                            var title = "System Information";
                            showMSG("success", response.msg, title);
                            $("#EditPriorityRulePopup").data("kendoWindow").close();
                            _Clear();
                            _Search();
                        }
                        else {
                            //$("#AddPriorityRulePopup").data("kendoWindow").close();
                            //var title = "System Information";
                            //showMSG("error", response.msg, title);

                            var title = "System Information";
                            $("#ValidatePopup").data("kendoWindow").center().open();
                            //document.getElementById('_dInformationValidate').innerHTML = 'Plase set Rule Priority condition at least one.';
                            document.getElementById('_dInformationValidate').innerHTML = response.msg;
                            $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                            $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');
                        }
                    }

                },
                failure: function (msg) {
                    var title = "System Information";
                    showMSG("error", response.msg, title);
                }
            });
        }
        else {
            //var title = "System Information";
            //showMSG("error", response.msg, title);
        }
    }

    function validateRulenameTextBoxOutFocus() {

        var value = $("#RULE_NAME_A").val()

        if (/^[a-zA-Z0-9]{1,7}$/.test(value)) {
            $("#validate-RULE_NAME_A").html("");

        }
        else {
            $("#validate-RULE_NAME_A").html(ValidationIcon() + "@M_Invalid_Format");

        }

    }

    function validateRulenameTextBoxEditOutFocus() {

        var value = $("#RULE_NAME_E").val()

        if (/^[a-zA-Z0-9]{1,7}$/.test(value)) {
            $("#validate-RULE_NAME_E").html("");

        }
        else {
            $("#validate-RULE_NAME_E").html(ValidationIcon() + "@M_Invalid_Format");

        }

    }

    function ValidationAddDataRulePriority() {

        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            clearValidateforAdd();

            //RULE_NAME_A
            if ($.trim($("#RULE_NAME_A").val()) == '' || $.trim($("#RULE_NAME_A").val()) == null) {
                //$("#_LOOKUP_NAME").removeClass('form-control').addClass('form-control errorinput');
                $("#validate-RULE_NAME_A").html(ValidationIcon() + "@M_Require_Field");

                chk = false;
            }
            else {
                chk = true;
            }

            //ddlPriorityList
            var STR1 = $("#modalddlAddPriorityList").data("kendoDropDownList").value();
            if ($.trim(STR1) == '' || $.trim(STR1) == null) {
                $("#validate-modalddlAddPriorityList").html(ValidationIcon() + "@M_Require_Field");
                chk = false;
            }
            else {
                chk = true;
            }

            //modalddlAddLookupname
            var STR2 = $("#modalddlAddLookupname").data("kendoDropDownList").value();
            if ($.trim(STR2) == '' || $.trim(STR2) == null) {
                $("#validate-modalddlAddLookupname").html(ValidationIcon() + "@M_Require_Field");
                chk = false;
            }
            else {
                chk = true;
            }

            //modalddlAddLookupParam
            var multiselect = $("#modalddlAddLookupParam").data("kendoMultiSelect");

            var items = multiselect.value();

            if (items.length == 0) {
                $("#validate-modalddlAddLookupParam").html(ValidationIcon() + "@M_Require_Field");
                chk = false;
            }
            else {
                chk = true;
            }

        }
        return chk;
    }

    function ValidationEditDataRulePriority() {

        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            clearValidateforAdd();

            //RULE_NAME_A
            if ($.trim($("#RULE_NAME_E").val()) == '' || $.trim($("#RULE_NAME_E").val()) == null) {
                //$("#_LOOKUP_NAME").removeClass('form-control').addClass('form-control errorinput');
                $("#validate-RULE_NAME_E").html(ValidationIcon() + "@M_Require_Field");

                chk = false;
            }
            else {
                chk = true;
            }

            //ddlPriorityList

            var STR1 = $("#modalddlEditPriorityList").data("kendoDropDownList").value();
            if ($.trim(STR1) == '' || $.trim(STR1) == null) {
                $("#validate-modalddlEditPriorityList").html(ValidationIcon() + "@M_Require_Field");
                chk = false;
            }
            else {
                chk = true;
            }

            //modalddlAddLookupname

            var STR2 = $("#modalddlEditLookupname").data("kendoDropDownList").value();
            if ($.trim(STR2) == '' || $.trim(STR2) == null) {
                $("#validate-modalddlEditLookupname").html(ValidationIcon() + "@M_Require_Field");
                chk = false;
            }
            else {
                chk = true;
            }

            //modalddlAddLookupParam

            var multiselect = $("#modalddlEditLookupParam").data("kendoMultiSelect");
            var items = multiselect.value();

            if (items.length == 0) {
                $("#validate-modalddlEditLookupParam").html(ValidationIcon() + "@M_Require_Field");
                chk = false;
            }
            else {
                chk = true;
            }

        }
        return chk;
    }

    function showMSG(type, msg, title) {

        $("#headerMessageFeedback").removeClass();
        $("#headerMessageFeedback").addClass("modal-header");
        if (type === "primary") { $("#headerMessageFeedback").addClass("btn-primary"); }
        else if (type === "success") { $("#headerMessageFeedback").addClass("btn-success"); }
        else if (type === "info") { $("#headerMessageFeedback").addClass("btn-info"); }
        else if (type === "warning") { $("#headerMessageFeedback").addClass("btn-warning"); }
        else if (type === "error") { $("#headerMessageFeedback").addClass("btn-danger"); }
        else { $("#headerMessageFeedback").addClass("btn-default"); }

        if (title !== undefined) $("#MessageFeedbackPopUpLabel").text(title); else $("#MessageFeedbackPopUpLabel").text("System Information");

        $("#lbMessageFeedback").html(msg);

        $("#MessageFeedbackPopUp").modal('show');

    }
    function clearValidateforAdd() {

        $("#validate-ddllTableList").html("");
    }

    function categoryDropDownOperatorEditor(container, options) {

    }

    function categoryDropDownFieldnameEditor(container, options) {

    }

    function categoryValueEditor(container, options) {

    }

    function modalNewShow() {

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/ClearDuplicateValue",
            data: { param: "Clear" },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    $("#AddPriorityRulePopup").data("kendoWindow").center().open();

                    //var todayDate = kendo.toString(kendo.parseDate(new Date()), 'dd/mm/yyyy');
                    var todayDate = new Date(new Date().setDate(new Date().getDate() + 1))
                    $("#modaldtpAddDateFrom").data("kendoDatePicker").value(todayDate);

                    var toDate = new Date(new Date().setDate(new Date().getDate() + 2))
                    var datepickerToelement = $("#modaldtpAddDateTo").data("kendoDatePicker");
                    datepickerToelement.min(new Date(toDate));
                    $("#modaldtpAddDateTo").data("kendoDatePicker").value("");
                }

            },
            failure: function (msg) {
            }
        });
    }
    function removeTempRows(ds) {
        ds.data().toJSON().forEach(function (r) {
            if (r.__temp === true) {
                var it = ds.getByUid(r.uid);
                if (it) ds.remove(it);
            }
        });
    }
    function dedupByName(ds) {
        var seen = Object.create(null);
        ds.data().slice().forEach(function (x) {
            var k = $.trim(String(x.LOOKUP_NAME || "")).toLowerCase();
            if (!k) return;
            if (seen[k]) ds.remove(x); else seen[k] = true;
        });
    }
    function existsByName(ds, name) {
        var n = $.trim(String(name || "")).toLowerCase();
        return ds.data().some(function (x) {
            return $.trim(String(x.LOOKUP_NAME || "")).toLowerCase() === n;
        });
    }
    function ensureDropDownValueNoDup(ddl, displayName) {
        if (!ddl || !displayName) return;
        var ds = ddl.dataSource;
        var apply = function () {
            removeTempRows(ds);
            dedupByName(ds);
            // กันกรณี server ส่ง 'SELECT ALL/ALL' มาเป็น data
            ["SELECT ALL", "ALL"].forEach(function (t) {
                var norm = t.toLowerCase();
                ds.data().slice().forEach(function (x) {
                    var n = $.trim(String(x.LOOKUP_NAME || "")).toLowerCase();
                    if (n === norm) ds.remove(x);
                });
            });
            if (!existsByName(ds, displayName)) {
                ds.add({ LOOKUP_NAME: displayName, __temp: true }); // แทรก “ครั้งเดียว”
            }
            ddl.value(displayName); // เลือกค่า
        };
        if (ds.view().length) apply(); else { ddl.one("dataBound", apply); ds.read(); }
    }

    function modalEditShow(e) {
        pointerSameEditRefresh = 0;
        originalValues = [];

        if (flaghasEditlookupnameInsert == 1) {
            var ddllookupEdit = $("#modalddlEditLookupname").data("kendoDropDownList");
            var oldData = ddllookupEdit.dataSource.data();
            var item = oldData[0];
            ddllookupEdit.dataSource.remove(item);
        }

        //GetEditData
        var DataResult = new addDataModel();
        DataResult.RULEID = $('#_RULE_ID').val();

        var grid = $("#gridConfigRuleTable1").data("kendoGrid");
        var gridData = grid.dataSource.view();

        var element = e.target || e.srcElement;
        var data = $("#gridConfigRuleTable1").data("kendoGrid").dataItem($(element).closest("tr"));
        var RuleId = data.RULE_ID;

        var TextRulenameData = "";
        var TempLookupname = "";
        var LookupParameterarray = [];

        var DateFrom = "";
        var DateTo = "";
        var LMRcheck = "";
        var priorityValueEdit = null;
        var lookupnameTemp = "";

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/GetEditRuleData",
            data: { RULE_ID_DATA: RuleId },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    $("#RULE_NAME_E").val(response._RULE_NAME);
                    $("#modaldtpEditDateFrom").val(response._RULE_DATE_FROM);
                    DateFrom = response._RULE_DATE_FROM;
                    $("#modaldtpEditDateTo").val(response._RULE_DATE_END);
                    DateTo = response._RULE_DATE_END;

                    priorityValueEdit = response._RULE_PRIORITY;

                    lookupnameTemp = response._RULE_lookup_name;
                    $("#modalddlEditLookupParam").data("kendoMultiSelect").value(response._RULE_lookup_parameter.toString().split(','));
                    TempLookupname = response._RULE_lookup_name;
                    LookupParameterarray = response._RULE_lookup_parameter.split(',');

                    $("#EditPriorityRulePopup").data("kendoWindow").center().open();

                    LMRcheck = response._RULE_LMR;
                }
            },
            failure: function (msg) { }
        });

        $("#modalddlEditPriorityList").data('kendoDropDownList').value(priorityValueEdit);

        //$("#modalddlEditLookupname").getKendoDropDownList().dataSource.insert({
        //    LOOKUP_NAME: "" + lookupnameTemp + "", isDeleted: true
        //});
        //$("#modalddlEditLookupname").data('kendoDropDownList').value(lookupnameTemp);


        var ddlLookup = $("#modalddlEditLookupname").data("kendoDropDownList");
        ensureDropDownValueNoDup(ddlLookup, lookupnameTemp);

        if (LMRcheck == "Y") {
            var checkbox = document.getElementById("I_LMR_FLAG_EDIT");
            checkbox.checked = true;
        }

        var ddl = $('#modalddlEditLookupParam').data("kendoMultiSelect");

        if (TempLookupname != null) {
            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringValueLookupname",
                data: { lookupData: TempLookupname },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            ddl.enable(true);
                            ddl.setDataSource(response.Data);
                            ddl.refresh();
                        } else {
                            ddl.setDataSource(null);
                            ddl.refresh();
                        }
                    }
                },
                failure: function (msg) { }
            });
        }

        // ===== Datasource-Edit-Grid (รองรับ ValueField) =====
        var gridEdit = $("#gridEditPriority").data("kendoGrid");
        gridEdit.dataSource.data([]);
        var jsonObject1 = null;
        var jsonObject2 = null;

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/SelectListEditValue",
            async: false,
            success: function (response) {
                if (response) {
                    jsonObject1 = JSON.parse(response._dataListA1 || "[]");
                    jsonObject2 = JSON.parse(response._dataListA2 || "[]");
                }
            },
            failure: function () { console.log("SelectListEditValue error"); }
        });

        // รวมชุดข้อมูล (คงลำดับเดิมของคุณ: ใส่ newRows2 ก่อน แล้วค่อย newRows1)
        var rows = [].concat(jsonObject2 || [], jsonObject1 || []);

        console.log("modalEditShow", rows);


        // Normalize ให้ทุกรายการมี ValueField/ValueField_Text/ValueFieldCodes
        function normalizeRow(row) {
            var vf = row.ValueField;
            var items = []; // [{ Text, LovValue1 }]
            var codes = []; // ["CODE"]
            var texts = [];

            if (Array.isArray(vf)) {
                vf.forEach(function (x) {
                    if (x && typeof x === "object") {
                        var code = (x.LovValue1 != null ? String(x.LovValue1) :
                            (x.Value != null ? String(x.Value) :
                                (x.Text != null ? String(x.Text) : "")));
                        var text = (x.Text != null ? String(x.Text) : code);
                        if (code) {
                            items.push({ LovValue1: code, Text: text });
                            codes.push(code); texts.push(text);
                        }
                    } else if (x != null) {
                        var s = String(x).trim();
                        if (s) { items.push({ LovValue1: s, Text: s }); codes.push(s); texts.push(s); }
                    }
                });
            } else if (typeof vf === "string") {
                // "CODE1,CODE2"
                codes = vf.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
                items = codes.map(function (c) { return { LovValue1: c, Text: c }; });
                texts = codes.slice();
            } else if (vf && typeof vf === "object") {
                var code1 = (vf.LovValue1 != null ? String(vf.LovValue1) :
                    (vf.Value != null ? String(vf.Value) :
                        (vf.Text != null ? String(vf.Text) : "")));
                var text1 = (vf.Text != null ? String(vf.Text) : code1);
                if (code1) {
                    items = [{ LovValue1: code1, Text: text1 }];
                    codes = [code1]; texts = [text1];
                }
            } else if (vf != null) {
                var s1 = String(vf).trim();
                if (s1) { items = [{ LovValue1: s1, Text: s1 }]; codes = [s1]; texts = [s1]; }
            }

            // เผื่อกรณีมาจาก codes อย่างเดียว
            if (!items.length && Array.isArray(row.ValueFieldCodes) && row.ValueFieldCodes.length) {
                codes = row.ValueFieldCodes.slice();
                items = codes.map(function (c) { return { LovValue1: c, Text: c }; });
                texts = codes.slice();
            }

            row.ValueField = items;
            row.ValueFieldCodes = codes;
            row.ValueField_Text = texts.join(", ");

            // กัน null ในคอลัมน์อื่นที่กริดใช้
            row.Field_Name = row.Field_Name != null ? row.Field_Name : "";
            row.Operator = row.Operator != null ? row.Operator : "";
            return row;
        }

        rows = rows.map(normalizeRow);

        // ใส่ลงกริดครั้งเดียว
        gridEdit.dataSource.data(rows);

        console.log("modalEditShow : rows (normalized)", rows);

        // ===== ส่วนควบคุมสิทธิ์การแก้ไขตามวันที่ (ของเดิม) =====
        var currentDate = new Date();

        var ddlEditPriority = $("#modalddlEditPriorityList").data("kendoDropDownList");
        var datepickerFrom = $("#modaldtpEditDateFrom").data("kendoDatePicker");
        var datepickerTo = $("#modaldtpEditDateTo").data("kendoDatePicker");
        var ddlEditLookupname = $("#modalddlEditLookupname").data("kendoDropDownList");
        var multiselectParam = $("#modalddlEditLookupParam").data("kendoMultiSelect");

        $("#modalddlEditLookupParam").data("kendoMultiSelect").value(LookupParameterarray);

        var from = $("#modaldtpEditDateFrom").val();
        var fromDateCheck = kendo.parseDate(from, "dd/MM/yyyy");

        var fromDateTo = null;
        var To = $("#modaldtpEditDateTo").val().split("/");
        if (To[0] != "null") {
            fromDateTo = new Date(To[2], To[1] - 1, To[0])
        }

        var fromObject = $("#modaldtpEditDateFrom").val();
        var dateObject = kendo.parseDate(fromObject, "dd/MM/yyyy");
        var toDate = new Date(dateObject.setDate(dateObject.getDate() + 1));

        if (toDate <= currentDate) {
            toDate = new Date(currentDate.setDate(currentDate.getDate() + 1));
        }

        var datepickerToelement = $("#modaldtpEditDateTo").data("kendoDatePicker");
        datepickerToelement.min(new Date(toDate));

        if (currentDate < fromDateCheck) {
            $("#RULE_NAME_E").prop("disabled", false);
            multiselectParam.enable(true);
            datepickerFrom.enable(true);
            datepickerTo.enable(true);
            ddlEditPriority.enable(true);
            ddlEditLookupname.enable(true);
            document.getElementById("I_LMR_FLAG_EDIT").disabled = false;

            var gridX = $("#gridEditPriority").data("kendoGrid");
            $('#addnewEdit').removeAttr('disabled');
            gridX.tbody.find("tr").each(function () {
                $(this).removeClass("disabled-row");
            });
        }

        if (currentDate >= fromDateCheck) {
            $("#RULE_NAME_E").prop("disabled", true);
            multiselectParam.enable(false);
            ddlEditPriority.enable(false);
            ddlEditLookupname.enable(false);
            datepickerFrom.enable(false);
            datepickerTo.enable(true);
            document.getElementById("I_LMR_FLAG_EDIT").disabled = true;

            var gridY = $("#gridEditPriority").data("kendoGrid");
            $('#addnewEdit').attr('disabled', 'disabled');
            gridY.tbody.find("tr").each(function () {
                $(this).find(".k-grid-edit, .k-grid-delete ,.k-grid-detail").hide();
                $(this).addClass("disabled-row");
            });
        }

        if (currentDate < fromDateTo) {
            datepickerTo.enable(true);
        }

        if (currentDate.getFullYear() === fromDateCheck.getFullYear() &&
            currentDate.getMonth() === fromDateCheck.getMonth() &&
            currentDate.getDate() === fromDateCheck.getDate()) {
            $("#RULE_NAME_E").prop("disabled", true);
            multiselectParam.enable(false);
            ddlEditPriority.enable(false);
            ddlEditLookupname.enable(false);
            datepickerFrom.enable(false);
            datepickerTo.enable(true);
            document.getElementById("I_LMR_FLAG_EDIT").disabled = true;

            var gridZ = $("#gridEditPriority").data("kendoGrid");
            $('#addnewEdit').attr('disabled', 'disabled');
            gridZ.tbody.find("tr").each(function () {
                $(this).find(".k-grid-edit, .k-grid-delete ,.k-grid-detail").hide();
                $(this).addClass("disabled-row");
            });
        }

        $('#btnpop_save_edit').removeAttr('disabled');

        flaghasEditlookupnameInsert = 1;
    }



    function modalViewShow(e) {

        if (flaghasEditlookupnameInsert == 1) {
            var ddllookupEdit = $("#modalddlEditLookupname").data("kendoDropDownList");
            var oldData = ddllookupEdit.dataSource.data();
            var item = oldData[0];
            ddllookupEdit.dataSource.remove(item);
        }

        var DataResult = new addDataModel();
        DataResult.RULEID = $('#_RULE_ID').val();

        var grid = $("#gridConfigRuleTable1").data("kendoGrid");
        var gridData = grid.dataSource.view();

        var element = e.target || e.srcElement;
        var data = $("#gridConfigRuleTable1").data("kendoGrid").dataItem($(element).closest("tr"));
        var RuleId = data.RULE_ID;

        var TextRulenameData = "";
        var TempLookupname = "";
        var LookupParameterarray = [];

        var DateFrom = "";
        var DateTo = "";
        var LMRcheck = "";
        var lookupnameTemp = "";

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/GetEditRuleData",
            data: { RULE_ID_DATA: RuleId },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    $("#RULE_NAME_E").val(response._RULE_NAME);
                    $("#modaldtpEditDateFrom").val(response._RULE_DATE_FROM);
                    DateFrom = response._RULE_DATE_FROM;
                    $("#modaldtpEditDateTo").val(response._RULE_DATE_END);
                    DateTo = response._RULE_DATE_END;
                    //modalddlEditPriorityList
                    $("#modalddlEditPriorityList").data('kendoDropDownList').value(response._RULE_PRIORITY);
                    //modalddlEditLookupname
                    lookupnameTemp = response._RULE_lookup_name;

                    $("#modalddlEditLookupParam").data("kendoMultiSelect").value(response._RULE_lookup_parameter.toString().split(','));
                    TempLookupname = response._RULE_lookup_name;
                    LookupParameterarray = response._RULE_lookup_parameter.split(',');

                    $("#EditPriorityRulePopup").data("kendoWindow").center().open();

                    LMRcheck = response._RULE_LMR;
                }

            },
            failure: function (msg) {
            }
        });

        $("#modalddlEditLookupname").getKendoDropDownList().dataSource.insert({
            LOOKUP_NAME: "" + lookupnameTemp + "", isDeleted: true
        })

        $("#modalddlEditLookupname").data('kendoDropDownList').value(lookupnameTemp);

        if (LMRcheck == "Y") {
            var checkbox = document.getElementById("I_LMR_FLAG_EDIT");
            checkbox.checked = true;
        }
        //var LookupnameFilter = $("#modalddlAddLookupname").data("kendoDropDownList").value();
        var ddl = $('#modalddlEditLookupParam').data("kendoMultiSelect");

        if (TempLookupname != null) {
            $.ajax({
                type: "POST",
                url: "/ConfigurationRulePriority/StoringValueLookupname",
                data: {
                    lookupData: TempLookupname
                },
                dataType: "json",
                async: false,
                success: function (response) {
                    if (response) {
                        if (response != null) {
                            ddl.enable(true);
                            ddl.setDataSource(response.Data);
                            ddl.refresh();
                        }
                        else {

                            ddl.setDataSource(null);
                            ddl.refresh();
                        }
                    }

                },
                failure: function (msg) {
                }
            });
        }

        //Datasource-Edit-Grid
        var gridEdit = $("#gridEditPriority").data("kendoGrid");
        gridEdit.dataSource.data([]);
        var jsonObject1 = null;
        var jsonObject2 = null;

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/SelectListEditValue",
            async: false,
            success: function (response) {
                if (response) {
                    jsonObject1 = JSON.parse(response._dataListA1 || "[]");
                    jsonObject2 = JSON.parse(response._dataListA2 || "[]");
                }
            },
            failure: function () { console.log("SelectListEditValue error"); }
        });

        // รวมชุดข้อมูล (คงลำดับเดิมของคุณ: ใส่ newRows2 ก่อน แล้วค่อย newRows1)
        var rows = [].concat(jsonObject2 || [], jsonObject1 || []);

        console.log("modalEditShow", rows);


        // Normalize ให้ทุกรายการมี ValueField/ValueField_Text/ValueFieldCodes
        function normalizeRow(row) {
            var vf = row.ValueField;
            var items = []; // [{ Text, LovValue1 }]
            var codes = []; // ["CODE"]
            var texts = [];

            if (Array.isArray(vf)) {
                vf.forEach(function (x) {
                    if (x && typeof x === "object") {
                        var code = (x.LovValue1 != null ? String(x.LovValue1) :
                            (x.Value != null ? String(x.Value) :
                                (x.Text != null ? String(x.Text) : "")));
                        var text = (x.Text != null ? String(x.Text) : code);
                        if (code) {
                            items.push({ LovValue1: code, Text: text });
                            codes.push(code); texts.push(text);
                        }
                    } else if (x != null) {
                        var s = String(x).trim();
                        if (s) { items.push({ LovValue1: s, Text: s }); codes.push(s); texts.push(s); }
                    }
                });
            } else if (typeof vf === "string") {
                // "CODE1,CODE2"
                codes = vf.split(",").map(function (s) { return s.trim(); }).filter(Boolean);
                items = codes.map(function (c) { return { LovValue1: c, Text: c }; });
                texts = codes.slice();
            } else if (vf && typeof vf === "object") {
                var code1 = (vf.LovValue1 != null ? String(vf.LovValue1) :
                    (vf.Value != null ? String(vf.Value) :
                        (vf.Text != null ? String(vf.Text) : "")));
                var text1 = (vf.Text != null ? String(vf.Text) : code1);
                if (code1) {
                    items = [{ LovValue1: code1, Text: text1 }];
                    codes = [code1]; texts = [text1];
                }
            } else if (vf != null) {
                var s1 = String(vf).trim();
                if (s1) { items = [{ LovValue1: s1, Text: s1 }]; codes = [s1]; texts = [s1]; }
            }

            // เผื่อกรณีมาจาก codes อย่างเดียว
            if (!items.length && Array.isArray(row.ValueFieldCodes) && row.ValueFieldCodes.length) {
                codes = row.ValueFieldCodes.slice();
                items = codes.map(function (c) { return { LovValue1: c, Text: c }; });
                texts = codes.slice();
            }

            row.ValueField = items;
            row.ValueFieldCodes = codes;
            row.ValueField_Text = texts.join(", ");

            // กัน null ในคอลัมน์อื่นที่กริดใช้
            row.Field_Name = row.Field_Name != null ? row.Field_Name : "";
            row.Operator = row.Operator != null ? row.Operator : "";
            return row;
        }

        rows = rows.map(normalizeRow);

        // ใส่ลงกริดครั้งเดียว
        gridEdit.dataSource.data(rows);

        console.log("modalEditShow : rows (normalized)", rows);


        var currentDate = new Date();

        var ddlEditPriority = $("#modalddlEditPriorityList").data("kendoDropDownList");
        var datepickerFrom = $("#modaldtpEditDateFrom").data("kendoDatePicker");
        var datepickerTo = $("#modaldtpEditDateTo").data("kendoDatePicker");
        var ddlEditLookupname = $("#modalddlEditLookupname").data("kendoDropDownList");
        var multiselectParam = $("#modalddlEditLookupParam").data("kendoMultiSelect");

        $("#modalddlEditLookupParam").data("kendoMultiSelect").value(LookupParameterarray);

        $("#RULE_NAME_E").prop("disabled", true);

        multiselectParam.enable(false);
        ddlEditPriority.enable(false);
        ddlEditLookupname.enable(false);
        datepickerFrom.enable(false);
        datepickerTo.enable(false);
        document.getElementById("I_LMR_FLAG_EDIT").disabled = true;

        $('#addnewEdit').attr('disabled', 'disabled');
        $('#btnpop_save_edit').attr('disabled', 'disabled');

        var grid = $("#gridEditPriority").data("kendoGrid");

        // Loop through each row
        grid.tbody.find("tr").each(function () {

            $(this).find(".k-grid-edit, .k-grid-delete ,.k-grid-detail").hide();
            $(this).addClass("disabled-row");

        });

        flaghasEditlookupnameInsert = 1;

    }

    function modalEditHide() {

        //$("#modal001").modal("hide");
        $("#EditPriorityRulePopup").data("kendoWindow").center().Close();

    }

    function modalNewHide() {

        //$("#modal001").modal("hide");
        $("#AddPriorityRulePopup").data("kendoWindow").center().Close();

    }

    function _clearPopupData() { }
    var addDataModel = function () {
        //RULE_NAME: "";
    }

    function _Search() {
        //$("#_RULE_ID").show();
        var chk = ValidationSearchData();
        if (chk == true) {

            //$("#_ruleselect").val("");
            var model = defaultData();
            //$('#_tableselect').val(model.TB_NAME);
            //console.log("Table:" + model.TB_NAME);
            //console.log("RULEID:" + model.RULE_ID);
            //console.log("SUBCONTRACTTYPE:" + model.SUBCONTTYPE);
            //console.log("EFFECTIVEDATE:" + model.DATE_FROM);
            //console.log("EXPIREDATE:" + model.DATE_TO);
            temp_model = model;
            //Loading();
            var grid = getGridName();
            grid.dataSource.page(1);
        }

    }

    function ValidationSearchData() {
        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            //var chk = false;
            clearValidatefor();


            if ($.trim($("#dpkDateFrom").val()) != '') {
                if ($.trim($("#dpkDateFrom").val()) == '' || $.trim($("#dpkDateFrom").val()) == null) {
                    $("#validate-" + "dpkDateFrom").html(ValidationIcon() + "This field is required.");
                    chk = false;
                }
                else {
                    chk = true;
                }

            }
        }
        return chk;
    }

    function ConfirmUpdate() {

    }

    function TableListChange() {
        //Loading();
        $("#ddllTableList").data("kendoDropDownList").dataSource.read();

        var valtb = $("#ddllTableList").val();

        var grid = getGridName();

        $(grid.tbody).on("click", "td", function (e) {
            var row = $(this).closest("tr");
            var curRowIdx = $("tr", grid.tbody).index(row);
            var colIdx = $("td", row).index(this);
            var item = grid.dataItem(row);

            $("#_ruleselect").val(item.RULEID);


        });

    }

    function AddRuleModalClose() {

        var grid = $("#gridAddPriority").data('kendoGrid');
        var isEditing = grid.editable;

        if (isEditing) {
            //alert("Please complete the editing operation before Cancel");
             var title = "System Information";
                $("#ValidatePopup").data("kendoWindow").center().open();
                document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;
        }
        else {
            $("#AddPriorityRulePopup").data("kendoWindow").close();
            //modalddlAddLookupParam
            //var multiSelect = $("#modalddlAddLookupParam").data("kendoMultiSelect");
            //multiSelect.dataSource.data([]);
            _Clear();
        }

        //$("#AddPriorityRulePopup").data("kendoWindow").close();
        //_Clear();
    }

    function EditRuleModalClose() {

        var grid = $("#gridEditPriority").data('kendoGrid');
        var isEditing = grid.editable;

        if (isEditing) {
            //alert("Please complete the editing operation before Cancel");
             var title = "System Information";
                $("#ValidatePopup").data("kendoWindow").center().open();
                document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            return;
        }
        else {
            $("#EditPriorityRulePopup").data("kendoWindow").close();
            _Clear();
        }

        //$("#AddPriorityRulePopup").data("kendoWindow").close();
        //_Clear();
    }

    function _Clear() {

        $("#_ruleselect").val("");
        $("#_tableselect").val("");

        $("#ddllTableList").data("kendoDropDownList").value("ALL");
        $("#ddlPriorityList").data("kendoDropDownList").value("ALL");

        $("#dpkDateFrom").data("kendoDatePicker").value(null);
        $("#dpkDateTo").data("kendoDatePicker").value(null);

        $("#dpkDateFrom").data("kendoDatePicker").value(null);
        $("#dpkDateTo").data("kendoDatePicker").value(null);

        //$("#gridConfigRuleTable1").data('kendoGrid').dataSource.data([]);
        var multiSelect = $("#modalddlAddLookupParam").data("kendoMultiSelect");
        multiSelect.dataSource.data([]);

        var multiSelect = $("#modalddlEditLookupParam").data("kendoMultiSelect");
        multiSelect.dataSource.data([]);
        //$("#gridresult").show();

        $('#RULE_NAME_D').val('');
        //LoadRuleID();

        //$("#gridAddPriority").data("kendoGrid").dataSource.data([]);
        $("#RULE_NAME_A").val("");
        $("#modalddlAddLookupname").data('kendoDropDownList').value("");
        $("#modalddlAddPriorityList").data('kendoDropDownList').value("");
        $("#modalddlAddLookupParam").data("kendoMultiSelect").value("");
        $("#modaldtpAddDateFrom").data("kendoDatePicker").value("");
        $("#modaldtpAddDateTo").data("kendoDatePicker").value("");

        var gridSearch = $("#gridConfigRuleTable1").data('kendoGrid');
        gridSearch.dataSource.data([]);

        var gridAdd = $("#gridAddPriority").data('kendoGrid');
        gridAdd.dataSource.data([]);

        $('#gridConfigRuleTable1').show();
        $("#validate-GridEmpty").html("");

        document.getElementById("I_LMR_FLAG_EDIT").checked = false;
        document.getElementById("I_LMR_FLAG_ADD").checked = false;


        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/ClearDuplicateValue",
            data: { param: "Clear" },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {

                }
            },
            failure: function (msg) {
            }
        });

        $("#gridresult").show();

        $("#textb_add_r1").hide();
        $("#textb_add_r2").hide();
    }

    function ClearMistepFilterPopup() {
        $("#PreventMistepFilterPopup").data("kendoWindow").close();
    }

    function ClearMistepFilterPopup02() {
        $("#PreventMistepFilterPopup02").data("kendoWindow").close();
    }

    function EditInstallCost() {

    }

    function showField() {

    }

    function modalConfirmDeleteShow(e) {

        currentDeleteRuleId = "";
        var element = e.target || e.srcElement;
        var data = $("#gridConfigRuleTable1").data("kendoGrid").dataItem($(element).closest("tr"));
        currentDeleteRuleId = data.RULE_ID;

        $("#modal003_perorder").modal("show");

    }

    function ConfirmDelete(e) {

        $("#modal003_perorder").modal("hide");

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/DeleteConfigurationRulePriority",
            data: { dataS: currentDeleteRuleId },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {
                    if (response.code != "2") {
                        var title = "System Information";
                        showMSG("success", response.msg, title);

                        _Clear();
                        _Search();
                    }
                    else {

                        var title = "System Information";
                        showMSG("error", response.msg, title);
                    }
                }

            },
            failure: function (msg) {
            }
        });
    }

    function onGridDataBound(e) {

        //Loading(0);

        $('.k-grid-content').height("auto");
        $('.k-grid-content').css("min-height", "50px");
        $('.k-grid-content').css("max-height", "300px");

        if (!e.sender.dataSource.view().length)
        {
            //var colspan = e.sender.thead.find("th:visible").length, emptyRow = '<center> No Rule Data Found. </center>';
            //e.sender.tbody.parent().width(e.sender.thead.width()).end().html(emptyRow);

            //$("#ConfigCostInsPopup").data("kendoWindow").close();
            //var title = "no Rule data found.";
            //showMSG("error", "no Rule data found.", title);
        }

        if (this.dataSource.view().length == 0) {

            //gridConfigRuleTable1
            $("#gridConfigRuleTable1").hide();
            $("#validate-GridEmpty").html(ValidationIcon() + "No Data found.");

        }
        else {

            $('#gridConfigRuleTable1').show();
            $("#validate-GridEmpty").html("");
            //Check-Edit-hide-by-current-date
            var grid = $("#gridConfigRuleTable1").data("kendoGrid");
            var gridData = grid.dataSource.view();
            for (var i = 0; i < gridData.length; i++) {
                var currentUid = gridData[i].uid;
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");
                var currentDate = new Date();

                if (typeof gridData[i].EFFECTIVE_DATE_START !== "undefined") {
                    var currentRuleFromDate = gridData[i].EFFECTIVE_DATE_START.split("/")
                    var currentDateRule = new Date(currentRuleFromDate[2], currentRuleFromDate[1] - 1, currentRuleFromDate[0]);
                }
                else {
                    var currentDateRule = "";
                }
                //var currentRuleFromDate = gridData[i].EFFECTIVE_DATE_START.split("/")
                //var currentDateRule = new Date(currentRuleFromDate[2], currentRuleFromDate[1] - 1, currentRuleFromDate[0]);
                if (typeof gridData[i].EFFECTIVE_DATE_END !== "undefined" && gridData[i].EFFECTIVE_DATE_END != "") {
                    var currentRuleToDate = gridData[i].EFFECTIVE_DATE_END.split("/")
                    var currentDateEndRule = new Date(currentRuleToDate[2], currentRuleToDate[1] - 1, currentRuleToDate[0]);
                }
                else {
                    var currentDateEndRule = "";
                }

                //Hidelogic
                if (currentDateEndRule > currentDate || currentDateEndRule == "") {

                    var viewButton = $(currenRow).find(".k-grid-View");
                    viewButton.hide();
                }

                if (currentDate > currentDateRule) {
                    var deleteButton = $(currenRow).find(".k-grid-Delete");
                    deleteButton.hide();
                }

                if (currentDate > currentDateEndRule && currentDateEndRule != "") {

                    var editButton = $(currenRow).find(".k-grid-Edit");
                    editButton.hide();
                }

                if (currentDateRule == "") {
                    var editButton = $(currenRow).find(".k-grid-Edit");
                    editButton.hide();
                }

            }

        }

    }

    var SearchModel = function () {
        RULE_NAME: "";
        PRIORITY: "";
        LOOKUP_NAME: "";
        EFTDATE_FROM: "";
        EFTDATE_TO: "";
        PAGE_INDEX: 1;
        PAGE_SIZE: 20;
    }

    function defaultData() {
        var searchResult = new SearchModel();

        searchResult.RULE_NAME = $("#RULE_NAME_D").val(); //RuleName
        searchResult.PRIORITY = $("#ddlPriorityList").val(); //Priority
        searchResult.LOOKUP_NAME = $("#ddllTableList").val(); //Lookupname

        searchResult.EFFECTIVE_DATE_START = $("#dpkDateFrom").val();
        searchResult.EFFECTIVE_DATE_END = $("#dpkDateTo").val();

        var grid = getGridName();

        searchResult.PAGE_INDEX = grid.dataSource.page();
        searchResult.PAGE_SIZE = grid.dataSource.pageSize();

        //searchResult.PAGE_INDEX =  1;
        //searchResult.PAGE_SIZE = 20;

        return searchResult;
    }

    function hasSpecialCharacters(text) {

        const regex = /^[A-Za-z0-9-_]+$/;
        return regex.test(text);
    }

    function ClearDateEndPopup() {

        $("#ValidatePopup").data("kendoWindow").close();
    }

    function ClearDeletecPopup() {

        currentDeleteObject = null;
        currentGridDelete = null;
        $("#ValidatePopupDelete").data("kendoWindow").close();
    }

    function ConfirmDeletecPopup() {

        currentGridDelete.dataSource.remove(currentDeleteObject);
        currentDeleteObject = null;
        currentGridDelete = null;

        $.ajax({
            type: "POST",
            url: "/ConfigurationRulePriority/ClearDuplicateValue",
            data: { param: "Clear" },
            dataType: "json",
            async: false,
            success: function (response) {
                if (response) {

                }
            },
            failure: function (msg) {
            }
        });

        $("#ValidatePopupDelete").data("kendoWindow").close();
    }

    function clearValidatefor() {
        //$("#validate-" + "ddllTableList").html("");
        //$("#validate-" + "dtpDateFrom").html("");
        //$("#validate-" + "dtpDateTo").html("");
        //$("#validate-" + "dtpEXPDateFrom").html("");
        //$("#validate-" + "dtpEXPDateTo").html("");
    }

    function getGridName() {
        var name;
        name = $("#gridConfigRuleTable1").data("kendoGrid");
        return name;
    }

    function onChangedtpDateTo() {

    }

    function onChangedtpEXPDateFrom() {

    }

    function onChangeEFFDATE() {

    }

    function onChangeEXPDate() {

    }

    function onChangedtpEXPDateTo() {

    }

    function showMSG(type, msg, title) {

        $("#headerMessageFeedback").removeClass();
        $("#headerMessageFeedback").addClass("modal-header");
        if (type === "primary") { $("#headerMessageFeedback").addClass("btn-primary"); }
        else if (type === "success") { $("#headerMessageFeedback").addClass("btn-success"); }
        else if (type === "info") { $("#headerMessageFeedback").addClass("btn-info"); }
        else if (type === "warning") { $("#headerMessageFeedback").addClass("btn-warning"); }
        else if (type === "error") { $("#headerMessageFeedback").addClass("btn-danger"); }
        else { $("#headerMessageFeedback").addClass("btn-default"); }

        if (title !== undefined) $("#MessageFeedbackPopUpLabel").text(title); else $("#MessageFeedbackPopUpLabel").text("System Information");

        $("#lbMessageFeedback").html(msg);

        $("#MessageFeedbackPopUp").modal('show');

    }

    function onChangedtpDateFrom() {
        var pickDate = this.value();
        var datepicker = $("#dpkDateTo").data("kendoDatePicker");
        if (pickDate) {
            datepicker.enable(true);
            var minDate = new Date(pickDate);

            $("#dpkDateTo").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }

        datepicker.value(new Date());
        $("#dpkDateTo").val("");
    }

    function onChangedtpAddDateFrom() {

        var pickDate = this.value();
        var datepicker = $("#modaldtpAddDateTo").data("kendoDatePicker");
        if (pickDate) {
            datepicker.enable(true);
            var minDate = new Date(pickDate.setDate(pickDate.getDate() + 1));

            $("#modaldtpAddDateTo").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }

        datepicker.value(new Date());
        $("#modaldtpAddDateTo").val("");
    }

    function onChangedtpEditDateFrom() {

        var pickDate = this.value();
        var datepicker = $("#modaldtpEditDateTo").data("kendoDatePicker");
        if (pickDate) {
            datepicker.enable(true);
            //var minDate = new Date(pickDate);
            var minDate = new Date(pickDate.setDate(pickDate.getDate() + 1));

            $("#modaldtpEditDateTo").kendoDatePicker({
                min: minDate,
                //  max: maxDate,
                format: "dd/MM/yyyy",
                parseFormats: ["dd/MM/yyyy"]
            });

        }

        datepicker.value(new Date());
        $("#modaldtpEditDateTo").val("");
    }

    function onChangedtpEditDateTo() {

    }

    //mouse-down
    $(".k-gridAddPriority").on("mousedown", ".k-button:not('.k-gridAddPriority-cancel-command,.k-gridAddPriority-save-command')", function (e) {

        var grid = $(this).closest(".k-gridAddPriority");
        var editRow = grid.find(".k-gridAddPriority-edit-row");

        if (editRow.length > 0) {
            //alert("Please complete the editing operation before editing another row");
             var title = "System Information";
                $("#ValidatePopup").data("kendoWindow").center().open();
                document.getElementById('_dInformationValidate').innerHTML = '@M_Active_Row';
                $("#ValidatePopup").prev().find(".k-window-title").text(title).css('color', '#FFFFFF');
                $("#ValidatePopup").parent().find(".k-window-titlebar, .k-header").css('backgroundColor', '#d2322d');

            e.preventDefault();
        }
    });

    function getAllRowValues(grid) {

        var dataSource = grid.dataSource;
        var dataItems = dataSource.data();
        var columns = grid.columns;

        var values = [];

        for (var i = 0; i < dataItems.length; i++) {
            var item = dataItems[i];
            var rowData = {};

            // Iterate through columns to get values dynamically
            for (var j = 0; j < columns.length; j++) {
                var field = columns[j].field;
                var value = item[field];

                rowData[field] = value;
            }

            values.push(rowData);
        }

        return values;
    }

    function onChangedtpDateTo() {

    }

</script>
