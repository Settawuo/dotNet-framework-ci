@*@model WBBEntity.PanelModels.FBBWebConfigModels.LastmileAndCPEReportModel*@
@using WBBEntity.PanelModels;
@{
    string L_PAGE_CANCEL = "ล้างข้อมูล";
    string L_PAGE_SEARCH = "ค้นหา";
    string L_PAGE_EXPORT = "Export to Excel";
    string L_PAGE_SEARCH_PANEL = "Search Panel";
    string L_PAGE_NAME = "Report Name : FBB SLA Appointment Detail";


    string L_GRID_CUS_ORDER = "Order No";
    string L_GRID_NON_MOBILE = "Job Type";
    string L_GRID_CUS_NAME = "Job Type";
    
    string L_GRID_ORDER_NO = "Order No";
    string L_GRID_JOB_TYPE = "Job Type";
    string L_GRID_SERVICE = "Service";
    string L_GRID_ORDER_CREATE_DATE = "Order Create Date";
    string L_GRID_CREATE_PROSPECT_DATE= "Create Prospect Date";
    string L_GRID_ALREADY_APPOINTMENT_DATE  = "Already Appointment Date";
    string L_GRID_SLA  = "SLA";

    string L_PAGE_DATE_FROM = "Order Create From";
    string L_PAGE_DATE_TO = "Order Create To";

    if (ViewBag.configscreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.configscreen;

        L_PAGE_NAME = configscreen.Any(f => f.Name == "LABEL_report_name") ? configscreen.First(f => f.Name == "LABEL_report_name").LovValue1 : "";

        L_GRID_CUS_ORDER = configscreen.Any(f => f.Name == "R_HEADER_Cus_order") ? configscreen.First(f => f.Name == "R_HEADER_Cus_order").LovValue1 : "";
        L_GRID_NON_MOBILE = configscreen.Any(f => f.Name == "R_HEADER_Non_Mobile") ? configscreen.First(f => f.Name == "R_HEADER_Non_Mobile").LovValue1 : "";
        L_GRID_CUS_NAME = configscreen.Any(f => f.Name == "R_HEADER_Cus_Name") ? configscreen.First(f => f.Name == "R_HEADER_Cus_Name").LovValue1 : "";
        
        L_GRID_ORDER_NO = configscreen.Any(f => f.Name == "R_HEADER_Work_order") ? configscreen.First(f => f.Name == "R_HEADER_Work_order").LovValue1 : "";
        L_GRID_JOB_TYPE = configscreen.Any(f => f.Name == "R_HEADER_Job_type") ? configscreen.First(f => f.Name == "R_HEADER_Job_type").LovValue1 : "";
        L_GRID_SERVICE = configscreen.Any(f => f.Name == "R_HEADER_Service") ? configscreen.First(f => f.Name == "R_HEADER_Service").LovValue1 : "";
        L_GRID_ORDER_CREATE_DATE = configscreen.Any(f => f.Name == "R_HEADER_Order_Create_dt") ? configscreen.First(f => f.Name == "R_HEADER_Order_Create_dt").LovValue1 : "";
        L_GRID_CREATE_PROSPECT_DATE = configscreen.Any(f => f.Name == "R_HEADER_Create_Prospect_dt") ? configscreen.First(f => f.Name == "R_HEADER_Create_Prospect_dt").LovValue1 : "";
        L_GRID_ALREADY_APPOINTMENT_DATE = configscreen.Any(f => f.Name == "R_HEADER_Appoint_dt") ? configscreen.First(f => f.Name == "R_HEADER_Appoint_dt").LovValue1 : "";
        L_GRID_SLA = configscreen.Any(f => f.Name == "R_HEADER_SLA") ? configscreen.First(f => f.Name == "R_HEADER_SLA").LovValue1 : "";
    }   
    
}

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
<div class="page-header i-header-fit">
    <div class="row">
        <div class="col-sm-12 col-md-12">
            <h3 style="margin-top: 0">@L_PAGE_NAME</h3>
        </div>
    </div>
</div>

<div class="row">    
    
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-success">            
        <div class="panel-heading">
           <h3 class="panel-title">
              <span>@L_PAGE_SEARCH_PANEL</span>
              <a data-toggle="collapse" class="pull-right" href="#SearchPanel2" onclick="onPanelToggle(this);" id="SearchPanelHeader2"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow2"></i></a>
           </h3>
        </div>
        <div id="SearchPanel2" class="panel-collapse collapse in">
            <div class="panel-body" >                 
                <div class="row">                   
                    <div class="col-sm-4 col-md-4">
                            <label>@L_GRID_SERVICE</label>
                            <div class="i-fg-data-entry">
                                 @(Html.Kendo().DropDownList()
                                .Name("ddtService")
                                .DataTextField("LovValue1")
                                .DataValueField("LovValue1")
                                .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("SelecTechnology", "SLAReport", new { type = "FBBPAYG_SCREEN", lovname = "R_DDL_Technology" });
                                    });
                                })
                                )
                            </div>
                    </div> 

                </div>
                   <div id="Row1" class="row i-gap-top-1"> 
                    <div class="col-sm-4 col-md-4">
                            <label>@L_PAGE_DATE_FROM</label>
                            <div class="i-fg-data-entry">
                                 @(Html.Kendo().DatePicker().Name("dtpDateFrom")
                                 .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                 .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                 .Format("dd/MM/yyyy")
                                 .Min(new DateTime(1900, 1, 1))
                                 .Max(new DateTime(2099, 12, 31))
                                 .Events(e => e.Change("ChangdtpDateFrom")))
                            </div>
                            <div class="i-fg-data-entry-validation" id="validatefor-dtpDateFrom"></div>
                            <span class="k-invalid-msg" data-for="PickupDate"></span>
                    </div>
                    
                    <div class="col-sm-4 col-md-4">
                            <label>@L_PAGE_DATE_TO</label>
                            <div class="i-fg-data-entry">
                                 @(Html.Kendo().DatePicker().Name("dtpDateTo")
                                 .HtmlAttributes(new { @class = "form-control i-form-control-extend" })
                                 .Format("dd/MM/yyyy")
                                 .Min(new DateTime(1900, 1, 1))
                                 .Max(new DateTime(2099, 12, 31))
                                 .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                 .Events(e => e.Change("ChangdtpDateTo")))
                            </div>
                            <div class="i-fg-data-entry-validation" id="validatefor-dtpDateTo"></div>
                  </div>
                   </div>              
                @*end row1*@                  
              <div id="row3" class="row i-gap-top-1">                   
                   <div class="col-sm-6 col-md-6">       
                       <div class="i-text-align-right">  
                           </div>                              
                    </div>
                  <div class="col-sm-6 col-md-6 i-text-align-right">                                     
                            
                        <a class="btn btn-default" onclick="_Clear();"><i class="fa fa-ban fa-lg"></i>&nbsp;&nbsp;@L_PAGE_CANCEL</a>            
                        <a class="btn btn-info" onclick="_Search();"><i class="fa fa-search fa-lg"></i>&nbsp;&nbsp;@L_PAGE_SEARCH</a>                                                                                                                                  
                   </div>    
              </div>                        
            
        </div> @*end SearchPanel2*@
    </div>  
    </div> 

</div>
</div>
<div id="gridresult" class="row">
        <div class="col-sm-12 col-md-12 " >
                    
                     @(Html.Kendo().Grid<FBBConfig.Models.AppointmentDetailTableModel>()
                        .Name("gridOverviewStatus")
                        .Columns(columns =>
                        {

                            columns.Bound(p => p.customer_order_no).Title(@L_GRID_CUS_ORDER).HtmlAttributes(new { style = "text-align:left;" }).Width(250);
                            columns.Bound(p => p.access_number).Title(@L_GRID_NON_MOBILE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.cust_name).Title(@L_GRID_CUS_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(250);
                            
                            columns.Bound(p => p.WORK_ORD_NO).Title(@L_GRID_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                            columns.Bound(p => p.JOB_TYPE).Title(@L_GRID_JOB_TYPE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.SERVICE).Title(@L_GRID_SERVICE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.ORDER_CREATE_DATE).Title(@L_GRID_ORDER_CREATE_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.CREATED_PROSPECT_DATE).Title(@L_GRID_CREATE_PROSPECT_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            columns.Bound(p => p.ALREADY_APPOINTMENT_DATE).Title(@L_GRID_ALREADY_APPOINTMENT_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                            //columns.Bound(p => p.ORDER_CREATE_DATE).Format("{0:dd/MM/yyyy HH:mm}").ClientTemplate("#=formatDateTable(ORDER_CREATE_DATE)#").Title(@L_GRID_ORDER_CREATE_DATE).HtmlAttributes(new { style = "text-align:center;" });
                            //columns.Bound(p => p.CREATED_PROSPECT_DATE).Format("{0:dd/MM/yyyy HH:mm}").ClientTemplate("#=formatDateTable(CREATED_PROSPECT_DATE)#").Title(@L_GRID_CREATE_PROSPECT_DATE).HtmlAttributes(new { style = "text-align:center;" });
                            //columns.Bound(p => p.ALREADY_APPOINTMENT_DATE).Format("{0:dd/MM/yyyy HH:mm}").ClientTemplate("#=formatDateTable(ALREADY_APPOINTMENT_DATE)#").Title(@L_GRID_ALREADY_APPOINTMENT_DATE).HtmlAttributes(new { style = "text-align:center;" });
                            columns.Bound(p => p.SLA).Title(@L_GRID_SLA).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                        })
                        .ToolBar(toolbar => toolbar.Template("" +
                            //disabled='disabled'
        "<div class='pull-right'><a onclick='_ExportToExcel()' id='btnExport'  class='btn btn-default'><i class='fa fa-reply fa-lg'></i>&nbsp;"+@L_PAGE_EXPORT+"</a>&nbsp;</div>"

        ))
                            .Scrollable(scrollable => scrollable.Height("auto"))                  
                            .Pageable(pageable => pageable
                            //.PageSizes(true)
                            .Numeric(true)                            
                            .PageSizes(new int[] {20, 50, 100})
                            )
                            .Sortable()
                            .AutoBind(false)
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(20)
                                //.ServerOperation(false)
                                .Read(read => read.Action("AppointmentDetailAsync", "SLAReport").Data("bindingValue"))
                                )
                            .Events(e => e.DataBound("onGridDataBound"))
                                    )
      </div>                
</div>    
</body>
<script>

    $(document).ready(function () {
        $('#btnExport').attr("disabled", true);
    });

    function _ExportToExcel() {
        var model = new defaultData();
        window.open("/SLAReport/ExportAppointmentDetail?dataS=" + JSON.stringify(model));
    }

    function onGridDataBound() {
        Loading(0);
        itemCount = this.dataSource.view().length;
        if (this.dataSource.view().length == 0) {
            //insert empty row
            
            var colspan = this.thead.find("th").length;
            //alert(colspan)
            var emptyRow = "<tr><td colspan='" + colspan + "'></td></tr>";
            this.tbody.html(emptyRow);

            //workarounds for IE lt 9
            //this.table.width(800);
            //$(".k-grid-content").width(2 * kendo.support.scrollbar());
            $(".k-grid-content").height(3 * kendo.support.scrollbar());
        }
        else
        {
            $(".k-grid-content").height("auto");
        }

        $('#btnExport').attr("disabled", !(this.dataSource.view().length != 0));
    }


    var AppointmentDetailModel = function () {
        service: "";
        dateFrom: "";
        dateTo: "";
    }

    function defaultData() {

        var searchModel = new AppointmentDetailModel();
        searchModel.service = ($("#ddtService").val() == 'All') ? 'ALL' : $("#ddtService").val();
        searchModel.dateFrom = formatDate(kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy"));
        searchModel.dateTo = formatDate(kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy"));
        return searchModel;

    }

    function _Clear() {
        $("#ddtService").data("kendoDropDownList").select(0);
        $("#gridOverviewStatus").data("kendoGrid").dataSource.data([]);

        $("#dtpDateFrom").data("kendoDatePicker").value("");
        $("#dtpDateTo").data("kendoDatePicker").value("");
        //reset min, max.
        $("#dtpDateFrom").data("kendoDatePicker").max(new Date(2099, 11, 31, 0, 0, 0, 0));
        $("#dtpDateTo").data("kendoDatePicker").min(new Date(1900, 0, 1, 0, 0, 0, 0));
        $("#validatefor-dtpDateTo").html("");
        $("#validatefor-dtpDateFrom").html("");

    }

    function _Search() {


        //model.DateFrom = formatDate(model.DateFrom);
        //model.DateTo = formatDate(model.DateTo);

        
        var chk = ValidationDateValue();
        if (chk) {

            var model = defaultData();
            var grid = $("#gridOverviewStatus").data("kendoGrid");
            grid.dataSource.page(1);
            //if (model.oltbrand == "" && model.phase == "" && model.region == "") {
            //    showFeedback("warning", "Please choose at least one condition.");
            //}
            //else {
                
            //}
            
            //Loading();
            //var grid = $("#gridOverviewStatus").data("kendoGrid");
            //$.ajax({
            //    type: 'POST',
            //    url: '/SLAReport/AppointmentDetailSync',
            //    data: {
            //        type: 0,
            //        dataS: JSON.stringify(model)
            //    },
            //    dataType: "json",
            //    success: function (response) {
            //        if (response) {
            //        }
            //        else {
            //        }
            //    },
            //    failure: function (msg) {
            //    }
            //});
            
            //grid.dataSource.page(1);
            //ReplaceCariteris(model);
        }

    }

    function bindingValue() {
        Loading();
        var model = defaultData();
        return {
            dataS: JSON.stringify(model)
        };
    }

    function ChangdtpDateFrom() {

        var endPicker = $("#dtpDateTo").data("kendoDatePicker"),
        startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate());
            endPicker.min(startDate);
        }

    }

    function ChangdtpDateTo() {
        var startPicker = $("#dtpDateFrom").data("kendoDatePicker"),
        endDate = this.value();

        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate());
            startPicker.max(endDate);
        }

    }

    function ValidationDateValue() {

        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            if ($.trim($("#dtpDateFrom").val()) == '') {
                $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is required.");
                chk = false;
            }
            else {
                $("#validatefor-" + "dtpDateFrom").html("");
            }

            if ($.trim($("#dtpDateTo").val()) == '') {
                $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is required.");
                chk = false;
            }
            else {
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        if (chk) //check format
        {
            if (!kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy")) {
                if ($("#dtpDateFrom").val() != "") {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is not correct format.");
                    chk = false;
                }
            }
            else {
                $("#validatefor-" + "dtpDateFrom").html("");
            }

            if (!kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy")) {
                if ($("#dtpDateTo").val() != "") {
                    $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is not correct format.");
                    chk = false;
                }
            }
            else {
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        if (chk) //check Date From must be earlier than Date To
        {
            var startPicker = new Date(kendo.parseDate($("#dtpDateFrom").val(), "mm/dd/yyyy"));
            var endPicker = new Date(kendo.parseDate($("#dtpDateTo").val(), "mm/dd/yyyy"));

            if (startPicker > endPicker) {
                if ($("#dtpDateFrom").val() != "") {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "Date From must be earlier than Date To.");
                    chk = false;
                }
                else {
                    $("#validatefor-" + "dtpDateFrom").html("");
                }
            }
        }

        return chk;
    }

    function formatDate(OrderDate) {

        if (OrderDate != null) {
            var d = new Date(OrderDate);
            //d.setUTCHours(17);
            //var b = new Date(OrderDate + '+07:00');
            var formatedOrderDate = kendo.format("{0:dd/MM/yyyy}", d);
            //return String.format("{0}{1}{2}", d.getDay(), d.getMonth(), d.getYear());
            return formatedOrderDate;
        } else return "";

    }

    function formatDateTable(OrderDate) {

        if (OrderDate != null) {
            var d = new Date(OrderDate);
            d.setUTCHours(8);
            return kendo.format("{0:dd/MM/yyyy HH:mm}", d);
        } else return "";

    }

    String.format = function () {
        var s = arguments[0];
        for (var i = 0; i < arguments.length - 1; i++) {
            var reg = new RegExp("\\{" + i + "\\}", "gm");
            s = s.replace(reg, arguments[i + 1]);
        }
        return s;
    }

</script>
</html>