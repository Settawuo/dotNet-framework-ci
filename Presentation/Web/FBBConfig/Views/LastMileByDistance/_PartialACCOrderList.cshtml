@using WBBEntity.PanelModels;

@{
    string L_PERIOD = "";
    string L_ORDER_STATUS = "";
    string L_INTERNET_NO = "";
    string L_ACCOUNT_NAME = "";
    string L_APPOINT_DATE = "";
    string L_PROMOTION = "";
    string L_SUB_NAME = "";
    string L_LENGTH = "";
    string L_OUTDOOR = "";
    string L_INDOOR = "";
    string L_TOTAL_PAID = "";
    string L_ENTRY_FEE = "";
    string L_ORDER_NO = "";
    string L_PRODUCT_NAME = "";

    string L_LENGHT_DISTANCE = "";
    string L_SUBCONTRACT_CODE = "";
    string L_EFFECTIVE_END_DT = "";
    string L_CREAETED_BY = "";
    string L_LAST_UPDATED_BY = "";

    string L_ACC_REMARK = "";
    string L_ACC_ORDER_STATUS = "";
    string L_ACC_INVOICE_NO = "";
    string L_ACC_INVOICE_DATE = "";


    string L_Request_Distance = "";
    string L_Approve_Distance = "";
    string L_Approve_STAFF = "";
    string L_Approve_STATUS = "";
    string L_Reuse_Flag = "";
    string L_Maping_Cost = "";
    string L_Over_Length = "";
    string L_Over_Cost = "";
    string L_Rule_ID = "";
    string L_APPROVE_FLAG = "APPROVE FLAG";
    string L_DIFF_DISTANCE = "DIFF DISTANCE";
    string L_RECAL_DIS = "RECAL DISTANCE";
    string L_RECAL_RATE = "RECAL RATE";
    string L_RECAL_OVER_LENGTH = "RECAL OVER LENGTH";
    string L_RECAL_OVER_COST = "RECAL OVER COST";
    string L_LENGTH_DISTANCE = "L_LENGTH_DISTANCE";
    string L_ORDER_SFF = "L_ORDER_SFF";
    string L_FOA_SUBMIT_DATE = "L_FOA_SUBMIT_DATE";
    string L_CS_APPROVE_DATE_TEXT = "L_CS_APPROVE_DATE_TEXT";
    string L_EVENT_CODE = "L_EVENT_CODE";
    string L_INSTALLATION_ADDRESS = "L_INSTALLATION_ADDRESS";
    string L_SUBCONTRACT_SUB_TYPE = "L_SUBCONTRACT_SUB_TYPE";
    string L_SUBCONTRACT_TYPE = "L_SUBCONTRACT_TYPE";
    string L_RECAL_MAPPING_COST = "L_RECAL_MAPPING_COST";
    string L_INV_AMT_BFVAT = "Invoice Amount(Befoe Vat7%)";
    string L_INV_AMT_VAT = "Invoice Amount Vat7%";
    string L_TOTAL_INV_AMT_VAT = "Total Invoice Amount(Include Vat7%)";
    string L_ORDER_STATUS_DATE = "L_ORDER_STATUS_DATE";
    string L_TOTAL_COST = "L_TOTAL_COST";
    string L_OM_ORDER_STATUS = "L_OM_ORDER_STATUS";
    string L_PAID_DATE = "L_PAID_DATE";
    string L_ADDR_ID = "Address ID";
    string L_PHASE_PO = "Phase Po";
    string L_INV_GRP = "INV_GRP";
    string L_SUBCONTRACT_LOCATION = "L_SUBCONTRACT_LOCATION";
    string L_PRODUCT_OWNER = "";

    if (ViewBag.ACCOrderListScreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.ACCOrderListScreen;
        L_PERIOD = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PERIOD").LovValue1 : "";
        L_ORDER_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS").LovValue1 : "";
        L_INTERNET_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INTERNET_NO").LovValue1 : "";
        L_ACCOUNT_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ACCOUNT_NAME").LovValue1 : "";
        L_APPOINT_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_APPOINT_DATE").LovValue1 : "";
        L_PROMOTION = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PROMOTION").LovValue1 : "";
        L_SUB_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_SUB_NAME").LovValue1 : "";
        L_LENGTH = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_LENGTH").LovValue1 : "";
        L_OUTDOOR = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_OUTDOOR").LovValue1 : "";
        L_INDOOR = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INDOOR").LovValue1 : "";

        L_TOTAL_PAID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_PAID").LovValue1 : "";
        L_ENTRY_FEE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ENTRY_FEE").LovValue1 : "";
        L_ORDER_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_NO").LovValue1 : "";
        L_PRODUCT_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_NAME").LovValue1 : "";
        L_SUBCONTRACT_CODE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_VENDOR_CODE").LovValue1 : "";
        L_TOTAL_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_COST").LovValue1 : "";

        L_OM_ORDER_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_OM_ORDER_STATUS").LovValue1 : "";

        L_LENGHT_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_LENGTH").LovValue1 : "";

        L_EFFECTIVE_END_DT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_NO").LovValue1 : "";
        L_CREAETED_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_NAME").LovValue1 : "";
        L_LAST_UPDATED_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_VENDOR_CODE").LovValue1 : "";

        L_ACC_ORDER_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS").LovValue1 : "";


        L_ACC_REMARK = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_REMARK").LovValue1 : "";
        L_ACC_INVOICE_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INVOICE_NO").LovValue1 : "";
        L_ACC_INVOICE_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INVOICE_DATE").LovValue1 : "";

        L_Request_Distance = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Request_Distance").LovValue1 : "";
        L_Approve_Distance = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_Distance").LovValue1 : "";
        L_Approve_STAFF = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_STAFF").LovValue1 : "";
        L_Approve_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_STATUS").LovValue1 : "";
        L_Reuse_Flag = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Reuse_Flag").LovValue1 : "";
        L_Maping_Cost = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Maping_Cost").LovValue1 : "";
        L_Over_Length = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Over_Length").LovValue1 : "";
        L_Over_Cost = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Over_Cost").LovValue1 : "";
        L_Rule_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_Rule_ID").LovValue1 : "";
        L_LENGTH_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_LENGTH_DISTANCE").LovValue1 : "";
        L_ORDER_SFF = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_SFF").LovValue1 : "";
        L_FOA_SUBMIT_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_FOA_SUBMIT_DATE").LovValue1 : "";
        L_CS_APPROVE_DATE_TEXT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_CS_APPROVE_DATE_TEXT").LovValue1 : "";
        L_EVENT_CODE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_EVENT_CODE").LovValue1 : "";
        L_INSTALLATION_ADDRESS = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INSTALLATION_ADDRESS").LovValue1 : "";
        L_SUBCONTRACT_SUB_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_SUB_TYPE").LovValue1 : "";
        L_SUBCONTRACT_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_TYPE").LovValue1 : "";
        L_RECAL_MAPPING_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_MAPPING_COST").LovValue1 : "";
        L_INV_AMT_BFVAT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INV_AMT_BFVAT").LovValue1 : "";
        L_INV_AMT_VAT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INV_AMT_VAT").LovValue1 : "";
        L_TOTAL_INV_AMT_VAT = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_INV_AMT_VAT").LovValue1 : "";
        L_ORDER_STATUS_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS_DATE").LovValue1 : "";
        L_PAID_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PAID_DATE").LovValue1 : "";

        L_ADDR_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_ADDR_ID").LovValue1 : "";
        L_PHASE_PO = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PHASE_PO").LovValue1 : "";
        L_INV_GRP = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_INV_GRP").LovValue1 : "";
        L_SUBCONTRACT_LOCATION = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_LOCATION").LovValue1 : "";
        L_PRODUCT_OWNER = configscreen.Any(f => f.Type == "L_ORD_LIST_ACCT") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_OWNER").LovValue1 : "";


    }

}

<div id="AccountGridresult" class="row">
    @{
        int counter = 1;
    }
    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.LastMileByDistanceOrderListModel>()
                          .Name("AccountingView")
                   .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
          .Columns(columns =>
          {
              columns.Bound(p => p.ORDER_STATUS)
                     .ClientTemplate("# if ( ORDER_STATUS === 'Confirm Paid'){ #<input type='checkbox' class='k-cb ACCTViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb ACCTViewRow-checkbox hidden' disabled = 'disabled' />#}#")
             .HeaderTemplate("<input type='checkbox' id='ACCTViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
              .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);

              columns.Command(command =>
              {
                  command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");

              }).Title("ACTION").Width(90);


              // columns.Bound(p => p.ORDER_STATUS).Title(@L_ACC_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(100);
              // columns.Bound(p => p.APPROVE_DISTANCE).Title(L_Approve_Distance).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              // columns.Bound(p => p.APPROVE_STAFF).Title(L_Approve_STAFF).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              //columns.Bound(p => p.APPROVE_STATUS).Title(L_Approve_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              //columns.Bound(p => p.REUSED_FLAG).Title(L_Reuse_Flag).HtmlAttributes(new { style = "text-align:left;" }).Width(200);





              columns.Bound(p => p.RowNumber).Title("No").HtmlAttributes(new { style = "text-align:center;" }).Width(40).Template(t => { }).ClientTemplate("#= renderNumber(data) #");
              columns.Bound(p => p.ORDER_STATUS).Title(L_ORDER_STATUS).HtmlAttributes(new { style = "text-align:center;" }).Width(120);
              columns.Bound(p => p.PAY_PERIOD).Title(@L_PERIOD).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.ORDER_STATUS_DT).Title(@L_ORDER_STATUS_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(160).ClientTemplate("# if ( ORDER_STATUS_DT === '' || ORDER_STATUS_DT === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(ORDER_STATUS_DT,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.ACCESS_NUMBER_MASKING).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.ACCESS_NUMBER).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(120).Hidden();
              columns.Bound(p => p.PRODUCT_OWNER).Title(@L_PRODUCT_OWNER).HtmlAttributes(new { style = "text-align:left;" }).Width(200);

              columns.Bound(p => p.ACCOUNT_NAME).Title(@L_ACCOUNT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.PROMOTION_NAME).Title(@L_PROMOTION).HtmlAttributes(new { style = "text-align:left;" }).Width(180);
              columns.Bound(p => p.SUBCONTRACT_NAME).Title(@L_SUB_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(180);
              columns.Bound(p => p.LENGTH_DISTANCE).Title(@L_LENGTH_DISTANCE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.OUTDOOR_COST).Title(@L_OUTDOOR).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(130);
              columns.Bound(p => p.INDOOR_COST).Title(@L_INDOOR).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(130);
              columns.Bound(p => p.MAPPING_COST).Title(L_Maping_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.OVER_LENGTH).Title(L_Over_Length).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.OVER_COST).Title(L_Over_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.TOTAL_COST).Title(@L_TOTAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(130);
              columns.Bound(p => p.ENTRY_FEE).Title(@L_ENTRY_FEE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(180);
              columns.Bound(p => p.ORDER_NO).Title(@L_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(220);
              columns.Bound(p => p.PRODUCT_NAME).Title(@L_PRODUCT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(130);
              columns.Bound(p => p.SUBCONTRACT_CODE).Title(@L_SUBCONTRACT_CODE).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.INVOICE_DATE_TEXT).Title(@L_ACC_INVOICE_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.INVOICE_NO).Title(@L_ACC_INVOICE_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.REMARK).Title(@L_ACC_REMARK).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.PAID_DATE_TEXT).Title(@L_PAID_DATE).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.OM_ORDER_STATUS).Title(@L_OM_ORDER_STATUS).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.ORDER_SFF).Title(@L_ORDER_SFF).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.FOA_SUBMIT_DATE).Title(@L_FOA_SUBMIT_DATE).HtmlAttributes(new { style = "text-align:right;" }).Width(150).ClientTemplate("# if ( FOA_SUBMIT_DATE === '' || FOA_SUBMIT_DATE === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(FOA_SUBMIT_DATE,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.CS_APPROVE_DATE).Title(@L_CS_APPROVE_DATE_TEXT).HtmlAttributes(new { style = "text-align:right;" }).Width(150).ClientTemplate("# if ( CS_APPROVE_DATE === '' || CS_APPROVE_DATE === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(CS_APPROVE_DATE,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.EVENT_CODE).Title(@L_EVENT_CODE).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.INSTALLATION_ADDRESS).Title(@L_INSTALLATION_ADDRESS).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.SUBCONTRACT_TYPE).Title(@L_SUBCONTRACT_TYPE).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(@L_SUBCONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.RECAL_OVER_LENGTH).Title(L_RECAL_OVER_LENGTH).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_OVER_COST).Title(L_RECAL_OVER_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_MAPPING_COST).Title(L_RECAL_MAPPING_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_RATE).ClientFooterTemplate("<div style = 'text-align:right;' id='totalamount'>Total Amount:</div>")
                  .Title(L_RECAL_RATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150); //TOTAL RECAL
              columns.Bound(p => p.TOTAL_PAID).ClientFooterTemplate("<div style = 'text-align:right;' id='sumtotal'></div>")
                  .Title(L_TOTAL_PAID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              // .HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);


              columns.Bound(p => p.INVOICE_AMOUNT_VAT).Title(L_INV_AMT_VAT).ClientFooterTemplate("<div class=''style = 'text-align:right;' id='sumvat'></div>")
              .HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.TOTAL_INVOICE_AMOUNT_VAT).Title(L_TOTAL_INV_AMT_VAT).ClientFooterTemplate("<div class='' style = 'text-align:right;' id='sumincvat'></div>")
              .HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RULE_ID).Title(L_Rule_ID).HtmlAttributes(new { style = "text-align:center;" }).Width(110);

              columns.Bound(p => p.ADDR_ID).Title(L_ADDR_ID).HtmlAttributes(new { style = "text-align:center;" }).Width(110);
              columns.Bound(p => p.PHASE_PO).Title(L_PHASE_PO).HtmlAttributes(new { style = "text-align:center;" }).Width(110);
              columns.Bound(p => p.INV_GRP).Title(@L_INV_GRP).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
              columns.Bound(p => p.SUBCONTRACT_LOCATION).Title(@L_SUBCONTRACT_LOCATION).HtmlAttributes(new { style = "text-align:center;" }).Width(100);

              //  columns.Bound(p => p.OM_ORDER_STATUS).Title(@L_OM_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(160);


              //columns.Command(command =>
              //{
              //    command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");

              //}).Title("ACTION").Width(80);
          })
                    .Scrollable(scrollable => scrollable.Height("auto"))
                    // .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Resizable(resize => resize.Columns(true))
                    .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 5,20, 50, 100 }))
                    .AutoBind(false)
                    .Sortable()
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Aggregates(aggregates =>
                        {

                            aggregates.Add(p => p.TOTAL_PAID).Sum();

                        })
                    //   .Group(groups => groups.Add(p => p.SUBCONTRACT_NAME))
                        .Model(model =>
                        {
                            model.Id(p => p.ACCESS_NUMBER_MASKING);
                            model.Id(p => p.ACCESS_NUMBER);
                            model.Field(p => p.RowNumber).Editable(false);
                            model.Field(p => p.PHASE_PO).Editable(false);
                            model.Field(p => p.ADDR_ID).Editable(false);
                            model.Field(p => p.INV_GRP).Editable(false);
                            model.Field(p => p.PAY_PERIOD).Editable(false);
                            model.Field(p => p.ORDER_STATUS_DT).Editable(false);
                            model.Field(p => p.ACCESS_NUMBER).Editable(false);
                            model.Field(p => p.PRODUCT_OWNER).Editable(false);
                            model.Field(p => p.ACCOUNT_NAME).Editable(false);
                            model.Field(p => p.PROMOTION_NAME).Editable(false);
                            model.Field(p => p.SUBCONTRACT_NAME).Editable(false);
                            model.Field(p => p.LENGTH_DISTANCE).Editable(false);
                            model.Field(p => p.OUTDOOR_COST).Editable(false);
                            model.Field(p => p.INDOOR_COST).Editable(false);
                            model.Field(p => p.MAPPING_COST).Editable(false);
                            model.Field(p => p.OVER_LENGTH).Editable(false);
                            model.Field(p => p.OVER_COST).Editable(false);
                            model.Field(p => p.TOTAL_PAID).Editable(false);
                            model.Field(p => p.ENTRY_FEE).Editable(false);
                            model.Field(p => p.ORDER_NO).Editable(false);
                            model.Field(p => p.PRODUCT_NAME).Editable(false);
                            model.Field(p => p.SUBCONTRACT_CODE).Editable(false);
                            model.Field(p => p.INVOICE_DATE_TEXT).Editable(false);
                            model.Field(p => p.INVOICE_NO).Editable(false);
                            model.Field(p => p.REMARK).Editable(false);
                            model.Field(p => p.PAID_DATE_TEXT).Editable(false);
                            model.Field(p => p.OM_ORDER_STATUS).Editable(false);
                            model.Field(p => p.ORDER_SFF).Editable(false);
                            model.Field(p => p.FOA_SUBMIT_DATE).Editable(false);
                            model.Field(p => p.CS_APPROVE_DATE).Editable(false);
                            model.Field(p => p.EVENT_CODE).Editable(false);
                            model.Field(p => p.INSTALLATION_ADDRESS).Editable(false);
                            model.Field(p => p.SUBCONTRACT_TYPE).Editable(false);
                            model.Field(p => p.SUBCONTRACT_SUB_TYPE).Editable(false);
                            model.Field(p => p.RECAL_OVER_LENGTH).Editable(false);
                            model.Field(p => p.RECAL_OVER_COST).Editable(false);
                            model.Field(p => p.RECAL_MAPPING_COST).Editable(false);
                            model.Field(p => p.RECAL_RATE).Editable(false);
                            model.Field(p => p.TOTAL_PAID).Editable(false);

                            model.Field(p => p.INVOICE_AMOUNT_BFVAT).Editable(false);
                            model.Field(p => p.INVOICE_AMOUNT_VAT).Editable(false);
                            model.Field(p => p.TOTAL_INVOICE_AMOUNT_VAT).Editable(false);
                            model.Field(p => p.RULE_ID).Editable(false);
                            model.Field(p => p.APPROVE_FLAG).Editable(false);
                            model.Field(p => p.SUBCONTRACT_LOCATION).Editable(false);
                        })
                        .PageSize(20)
                        .Read(read => read.Action("SearchLastMileByDistanceOrderList", "LastMileByDistance").Data("bindingValue"))
                        .Update(update => update.Action("UpdateSCMOrderList", "LastMileByDistance"))
                    )
                   .Events(e => e.DataBound("onACCTViewDataBound"))
    )
</div>

<script>

    var counter = 1;
    
    var AccessList = function () {
        ACCESS_NUMBER = "";
    }
    $(document).ready(function () {
        var grid = $("#AccountingView").data("kendoGrid");
        grid.table.on("click", ".ACCTViewRow-checkbox", selectRow);

        //check all
        $('#ACCTViewheader-chb').change(function (ev) {
            var checked = ev.target.checked;

            $('.ACCTViewRow-checkbox:enabled').each(function (idx, item) {
                if (checked) {
                    if ($(item).prop("checked", false)) {
                        $(item).click();
                    }
                } else {
                    if ($(item).prop("checked", true)) {
                        $(item).click();
                        checkedIds = {};
                    }
                }
            });

            if (checked) {
                $("#chk").val("True");
                $("#chkall").val("True");
                $("#updateall").prop("disabled", false);
                $(".h-cb").prop('checked', true);
            } else {
                $("#chkall").val("False");
                $("#chk").val("False");
                $("#updateall").prop("disabled", true);
                $(".h-cb").prop('checked', false);
            }
        });

        //sample retrive data
        $("#saveChkAcc").bind("click", function () {
            var checked = [];
            var checkeds = [];


            for (var i in checkedIds) {
                var ListModel = new AccessList();
                if (checkedIds[i]) {
                    ListModel.ACCESS_NUMBER = i;
                    checked.push(i);
                    checkeds.push(ListModel);
                    $("#accNo").val("000000000");
                }

            }

           
            if ($("#chkall").val() === "False") {
               CheckBoxACCTConfirmPaid(checkeds);
               // alert("NotCheckAll");
            }
            else {
                // alert("CheckAll");
               CheckBoxALLACCTConfirmPaid();

            }



        });
    });

   
    //var checkedIds = {};

    //on click of the checkbox:
    function selectRow() {
        var checked = this.checked,
            row = $(this).closest("tr"),
            grid = $("#AccountingView").data("kendoGrid"),
            dataItem = grid.dataItem(row);
        $("#hideinvNo").val(dataItem.INVOICE_NO);
        checkedIds[dataItem.ACCESS_NUMBER] = checked;
        if (checked) {
            //-select the row
            row.addClass("k-state-selected");

            //var checkHeader = true;

            //$.each(grid.items(), function (index, item) {
            //    if ( item.ORDER_STATUS === "Confirm Paid" || item.ORDER_STATUS === "Paid" || item.ORDER_STATUS === "Hold") {
            //        if (!($(item).hasClass("k-state-selected"))) {
            //            checkHeader = false;
            //        }
            //    }
            //});
            $("#chk").val("True");
            $("#updateall").prop("disabled", false);
            //$("#ACCTViewheader-chb")[0].checked = checkHeader;
        } else {
            $("#chkall").val("False");
            //-remove selection
            row.removeClass("k-state-selected");
            $("#ACCTViewheader-chb").prop("checked", false);
            //$("#ACCTViewheader-chb")[0].checked = false;
        }

        checkUpdateAllButton();
    }

    function renderNumber(data) {
        return counter++;
    }

    function onACCTViewDataBound() {

        counter = 1;
        Loading(0);
        var grid = this;
        //fix kendo grid width
        if (this.dataSource.view().length === 0)
        {
            $('#export').attr("disabled", true);
            $('#btnAcctUpdate').attr("disabled", true);
            $("#updateall").prop("disabled", true);
            //$('#updatebyfile').attr("disabled", true);
            //insert empty row
            //var colspan = this.thead.find("th").length;
            //var emptyRow = "<tr style='height:auto; text-align:center' ><td colspan='" + colspan + "'>  </td></tr>";

            //this.tbody.html(emptyRow);

            //$("#noData").data("kendoWindow").open();
            //$("#noData").data("kendoWindow").center();
            ////workarounds for IE lt 9
            //this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            var colspan = this.thead.find("th").length;


            $("#sumtotal").html("0.00");
            $("#sumvat").html("0.00");
            $("#sumincvat").html("0.00");
            $("#_sumtotal").val("0");
            $("#_sumvat").val("0");
            $("#_sumincvat").val("0");
            var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

            this.tbody.html(emptyRow);

            //   $("#noData").data("kendoWindow").open();
            //    $("#noData").data("kendoWindow").center();
            //workarounds for IE lt 9
            this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            $(".k-grid-content").height(50);
        }
        else if (this.dataSource.view().length === 1)
        {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);

                var status = model.ORDER_STATUS;
                var approveflag = model.APPROVE_FLAG;
                // console.log(approveflag);
                if ((status === 'Confirm Paid') && (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".ACCTViewRow-checkbox").show();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', false);

                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".ACCTViewRow-checkbox").hide();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', true);
                    //   $('#export').attr("disabled", true);
                }
            });

            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "150px");
            $('#btnAcctUpdate').attr("disabled", true);
            getSumValue();
        }
        else 
        {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);

                var status = model.ORDER_STATUS;
                var approveflag = model.APPROVE_FLAG;
               // console.log(approveflag);
                if (( status === 'Confirm Paid') &&  (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".ACCTViewRow-checkbox").show();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', false);

                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".ACCTViewRow-checkbox").hide();
                    $(this).find(".ACCTViewRow-checkbox").attr('disabled', true);
                  //   $('#export').attr("disabled", true);
                }
            });

            $('#export').attr("disabled", false);
          //  $('#btnAcctUpdate').attr("disabled", false);
            //$('#updatebyfile').attr("disabled", false);
            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "300px");
            getSumValue();
        }

        //show order list detail panel
        if (this.dataSource.view().length === 1) {

            var accNo = $("#AccountingView").data("kendoGrid").dataSource.view()[0].ACCESS_NUMBER;
            var ordNo = $("#AccountingView").data("kendoGrid").dataSource.view()[0].ORDER_NO;
            $("#dbk_ACC_NO").val(accNo);
            $("#dbk_ORD_NO").val(ordNo);
            CallListDetail(accNo, ordNo);
        }


        //reset checklist
        //$('#ACCTViewheader-chb').removeAttr('checked');

        var view = this.dataSource.view();
        for(var i = 0; i < view.length;i++){
            if(checkedIds[view[i].id]){
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".ACCTViewRow-checkbox")
                    .attr("checked","checked");
            }
        }
        //$("#ACCTViewheader-chb").change(function () {
        //    idsToSend = [];
        //    var AccessListModel = new AccessList();
        //    AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
        //    idsToSend.push(AccessListModel);
        //});
        //when header checkbox is checked
        if ($("#ACCTViewheader-chb").prop("checked")) {
            $('.ACCTViewRow-checkbox:enabled').each(function (idx, item) {
                if ($(item).prop("checked", false)) {
                    $(item).click();
                }
            });
        }
        $('.ACCTViewRow-checkbox').change(function () {
            //checkAcctcount();
        });
        $("#ACCTViewheader-chb").change(function () {
            $('#btnAcctUpdate').attr("disabled", false);
            idsToSend = [];
            var AccessListModel = new AccessList();
            AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
            idsToSend.push(AccessListModel);
            console.log(idsToSend);

        });
        setSumValue();
    }
    function checkAcctcount() {
        var count = 0;
        $('.ACCTViewRow-checkbox:enabled').each(function (idx, item) {
            if ($(item).is(':checked')) {
                count++;
            }

        });
       // console.log(count)
        //if (count > 1) {
            //$('#btnAcctUpdate').attr("disabled", false);
            //$('#sendmail').attr('disabled', 'disabled');
        //} else {
            //$('#btnAcctUpdate').attr("disabled", true);
            // $('#sendmail').removeAttr('disabled');
         //   $("#hideinvNo").val("");
        //}
    }
</script>