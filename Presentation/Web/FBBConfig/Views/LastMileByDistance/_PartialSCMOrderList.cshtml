@using WBBEntity.PanelModels;
@{

    string usertype = ViewBag.UserGroup;
    string L_ACC_NBR  = "";
    string L_USER_NAME = "";
    string L_SBC_CPY = "";
    string L_PRODUCT_NAME = "";
    string L_ON_TOP1 = "";
    string L_ON_TOP2 = "";
    string L_VOIP_NUMBER = "";
    string L_SERVICE_PACK_NAME = "";
    string L_ORD_NO = "";
    string L_ORD_TYPE = "";
    string L_ORDER_SFF = "";
    string L_APPOINTMENT_DATE = "";
    string L_SFF_ACTIVE_DATE = "";
    string L_APPROVE_JOB_FBSS_DATE = "";
    string L_COMPLETED_DATE = "";
    string L_ORDER_STATUS = "";
    string L_REJECT_REASON = "";
    string L_MATERIAL_CODE_CPESN = "";
    string L_CPE_SN = "";
    string L_CPE_MODE = "";
    string L_MATERIAL_CODE_STBSN = "";
    string L_STB_SN = "";
    string L_MATERIAL_CODE_ATASN = "";
    string L_ATA_SN = "";
    string L_MATERIAL_CODE_WIFIROUTESN = "";
    string L_WIFI_ROUTER_SN = "";
    string L_STO_LOCATION = "";
    string L_VENDOR_CODE = "";
    string L_FOA_REJECT_REASON = "";
    string L_RE_APPOINTMENT_REASON = "";
    string L_PHASE_PO = "";
    string L_SFF_SUBMITTED_DATE = "";
    string L_EVENT_CODE = "";
    string L_REGION = "";
    string L_TOTAL_FEE = "";
    string L_FEE_CODE = "";
    string L_ADDR_ID = "";
    string L_ADDR_NAME_TH = "";
    string L_Distance_To_Paid = "";
    string L_Out_door = "";
    string L_In_door = "";
    string L_Total_Paid = "";
    string L_Status  = "";
    string L_Remark = "";
    string L_NOTE = "";
    //Phase III  03/01/2019
    string L_Request_Distance = "";
    string L_Approve_Distance = "";
    string L_Approve_STAFF = "";
    string L_Approve_STATUS = "";
    string L_Reuse_Flag = "";
    string L_Maping_Cost = "";
    string L_Over_Length = "";
    string L_Over_Cost = "";
    string L_Rule_ID = "";
    string L_SUB_CONTRACT_TYPE = "";
    string L_SUB_CONTRACT_SUB_TYPE = "";
    string L_REQUEST_SUB_FLAG = "";
    string L_INSTALLATION_ADDRESS = "";
    string L_APPROVE_FLAG = "Order Status";
    string L_DIFF_DISTANCE = "DIFF DISTANCE";
    string L_RECAL_DIS = "RECAL DISTANCE";
    string L_RECAL_RATE = "Total RECAL";
    string L_RECAL_OVER_LENGTH = "RECAL OVER LENGTH";
    string L_RECAL_OVER_COST = "RECAL OVER COST";
    string L_MAX_LENGTH = "MAX LENGTH";
    string L_RECAL_MAPPING_COST = "RECAL MAPPING COST";
    string L_TOTAL_COST = "TOTAL FOA";
    string L_IR_DOC = "L_IR_DOC";
    string L_INVOICE_NO = "L_INVOICE_NO";
    string L_SUBCONTRACT_LOCATION = "L_SUBCONTRACT_LOCATION";
    string L_PRODUCT_OWNER = "";

    if (ViewBag.SCMOrderListScreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.SCMOrderListScreen;
        L_ACC_NBR = configscreen.FirstOrDefault(f => f.Name == "L_ACC_NBR").LovValue1 ?? "";
        L_USER_NAME = configscreen.FirstOrDefault(f => f.Name == "L_USER_NAME").LovValue1 ?? "";
        L_SBC_CPY = configscreen.FirstOrDefault(f => f.Name == "L_SBC_CPY").LovValue1 ?? "";
        L_PRODUCT_NAME = configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_NAME").LovValue1 ?? "";
        L_ON_TOP1 = configscreen.FirstOrDefault(f => f.Name == "L_ON_TOP1").LovValue1 ?? "";
        L_ON_TOP2 = configscreen.FirstOrDefault(f => f.Name == "L_ON_TOP2").LovValue1 ?? "";
        L_VOIP_NUMBER = configscreen.FirstOrDefault(f => f.Name == "L_VOIP_NUMBER").LovValue1 ?? "";
        L_SERVICE_PACK_NAME = configscreen.FirstOrDefault(f => f.Name == "L_SERVICE_PACK_NAME").LovValue1 ?? "";
        L_ORD_NO = configscreen.FirstOrDefault(f => f.Name == "L_ORD_NO").LovValue1 ?? "";
        L_ORD_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_ORD_TYPE").LovValue1 ?? "";
        L_ORDER_SFF = configscreen.FirstOrDefault(f => f.Name == "L_ORDER_SFF").LovValue1 ?? "";
        L_APPOINTMENT_DATE = configscreen.FirstOrDefault(f => f.Name == "L_APPOINTMENT_DATE").LovValue1 ?? "";
        L_SFF_ACTIVE_DATE = configscreen.FirstOrDefault(f => f.Name == "L_SFF_ACTIVE_DATE").LovValue1 ?? "";
        L_APPROVE_JOB_FBSS_DATE = configscreen.FirstOrDefault(f => f.Name == "L_APPROVE_JOB_FBSS_DATE").LovValue1 ?? "";
        L_COMPLETED_DATE = configscreen.FirstOrDefault(f => f.Name == "L_COMPLETED_DATE").LovValue1 ?? "";
        L_ORDER_STATUS = configscreen.FirstOrDefault(f => f.Name == "L_ORDER_STATUS").LovValue1 ?? "";
        L_REJECT_REASON = configscreen.FirstOrDefault(f => f.Name == "L_REJECT_REASON").LovValue1 ?? "";
        L_MATERIAL_CODE_CPESN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_CPESN").LovValue1 ?? "";
        L_CPE_SN = configscreen.FirstOrDefault(f => f.Name == "L_CPE_SN").LovValue1 ?? "";
        L_CPE_MODE = configscreen.FirstOrDefault(f => f.Name == "L_CPE_MODE").LovValue1 ?? "";
        L_MATERIAL_CODE_STBSN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_STBSN").LovValue1 ?? "";
        L_STB_SN = configscreen.FirstOrDefault(f => f.Name == "L_STB_SN").LovValue1 ?? "";
        L_MATERIAL_CODE_ATASN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_ATASN").LovValue1 ?? "";
        L_ATA_SN = configscreen.FirstOrDefault(f => f.Name == "L_ATA_SN").LovValue1 ?? "";
        L_MATERIAL_CODE_WIFIROUTESN = configscreen.FirstOrDefault(f => f.Name == "L_MATERIAL_CODE_WIFIROUTESN").LovValue1 ?? "";
        L_WIFI_ROUTER_SN = configscreen.FirstOrDefault(f => f.Name == "L_WIFI_ROUTER_SN").LovValue1 ?? "";
        L_STO_LOCATION = configscreen.FirstOrDefault(f => f.Name == "L_STO_LOCATION").LovValue1 ?? "";
        L_VENDOR_CODE = configscreen.FirstOrDefault(f => f.Name == "L_VENDOR_CODE").LovValue1 ?? "";
        L_FOA_REJECT_REASON = configscreen.FirstOrDefault(f => f.Name == "L_FOA_REJECT_REASON").LovValue1 ?? "";
        L_RE_APPOINTMENT_REASON = configscreen.FirstOrDefault(f => f.Name == "L_RE_APPOINTMENT_REASON").LovValue1 ?? "";
        L_PHASE_PO = configscreen.FirstOrDefault(f => f.Name == "L_PHASE_PO").LovValue1 ?? "";
        L_SFF_SUBMITTED_DATE = configscreen.FirstOrDefault(f => f.Name == "L_SFF_SUBMITTED_DATE").LovValue1 ?? "";
        L_EVENT_CODE = configscreen.FirstOrDefault(f => f.Name == "L_EVENT_CODE").LovValue1 ?? "";
        L_REGION = configscreen.FirstOrDefault(f => f.Name == "L_REGION").LovValue1 ?? "";
        L_TOTAL_FEE = configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_FEE").LovValue1 ?? "";
        L_FEE_CODE = configscreen.FirstOrDefault(f => f.Name == "L_FEE_CODE").LovValue1 ?? "";
        L_ADDR_ID = configscreen.FirstOrDefault(f => f.Name == "L_ADDR_ID").LovValue1 ?? "";
        L_ADDR_NAME_TH = configscreen.FirstOrDefault(f => f.Name == "L_ADDR_NAME_TH").LovValue1 ?? "";
        L_Distance_To_Paid = configscreen.FirstOrDefault(f => f.Name == "L_Distance_To_Paid").LovValue1 ?? "";
        L_Out_door = configscreen.FirstOrDefault(f => f.Name == "L_Out_door").LovValue1 ?? "";
        L_In_door = configscreen.FirstOrDefault(f => f.Name == "L_In_door").LovValue1 ?? "";
        L_Total_Paid = configscreen.FirstOrDefault(f => f.Name == "L_Total Paid").LovValue1 ?? "";
        L_Status = configscreen.FirstOrDefault(f => f.Name == "L_Status ").LovValue1 ?? "";
        L_Remark = configscreen.FirstOrDefault(f => f.Name == "L_Remark").LovValue1 ?? "";
        L_NOTE = configscreen.FirstOrDefault(f => f.Name == "L_NOTE").LovValue1 ?? "";
        L_Request_Distance = configscreen.FirstOrDefault(f => f.Name == "L_Request_Distance").LovValue1 ?? "";
        L_Approve_Distance = configscreen.FirstOrDefault(f => f.Name == "L_Approve_Distance").LovValue1 ?? "";
        L_Approve_STAFF = configscreen.FirstOrDefault(f => f.Name == "L_Approve_STAFF").LovValue1 ?? "";
        L_Approve_STATUS = configscreen.FirstOrDefault(f => f.Name == "L_Approve_STATUS").LovValue1 ?? "";
        L_Reuse_Flag = configscreen.FirstOrDefault(f => f.Name == "L_Reuse_Flag").LovValue1 ?? "";
        L_Maping_Cost = configscreen.FirstOrDefault(f => f.Name == "L_Maping_Cost").LovValue1 ?? "";
        L_Over_Length = configscreen.FirstOrDefault(f => f.Name == "L_Over_Length").LovValue1 ?? "";
        L_Over_Cost = configscreen.FirstOrDefault(f => f.Name == "L_Over_Cost").LovValue1 ?? "";
        L_Rule_ID = configscreen.FirstOrDefault(f => f.Name == "L_Rule_ID").LovValue1 ?? "";
        L_SUB_CONTRACT_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_SUB_CONTRACT_TYPE").LovValue1 ?? "";
        L_SUB_CONTRACT_SUB_TYPE = configscreen.FirstOrDefault(f => f.Name == "L_SUB_CONTRACT_SUB_TYPE").LovValue1 ?? "";
        L_REQUEST_SUB_FLAG = configscreen.FirstOrDefault(f => f.Name == "L_REQUEST_SUB_FLAG").LovValue1 ?? "";
        L_INSTALLATION_ADDRESS = configscreen.FirstOrDefault(f => f.Name == "L_INSTALLATION_ADDRESS").LovValue1 ?? "";
        L_IR_DOC = configscreen.FirstOrDefault(f => f.Name == "L_IR_DOC").LovValue1 ?? "";
        L_INVOICE_NO = configscreen.FirstOrDefault(f => f.Name == "L_INVOICE_NO").LovValue1 ?? "";

        L_TOTAL_COST = configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_COST").LovValue1 ?? "";
        L_RECAL_DIS = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_DIS").LovValue1 ?? "";
        L_RECAL_OVER_LENGTH = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_OVER_LENGTH").LovValue1 ?? "";
        L_RECAL_OVER_COST  = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_OVER_COST").LovValue1 ?? "";
        L_RECAL_MAPPING_COST  = configscreen.FirstOrDefault(f => f.Name == "L_RECAL_MAPPING_COST").LovValue1 ?? "";
        L_MAX_LENGTH = configscreen.FirstOrDefault(f => f.Name == "L_MAX_LENGTH").LovValue1 ?? "";
        L_DIFF_DISTANCE = configscreen.FirstOrDefault(f => f.Name == "L_DIFF_DISTANCE").LovValue1 ?? "";
        L_SUBCONTRACT_LOCATION = configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_LOCATION").LovValue1 ?? "";
        L_PRODUCT_OWNER = configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_OWNER").LovValue1 ?? "";
    }

}
<div id="SCMGridResult" class="row">
    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.LastMileByDistanceOrderListModel>()
          .Name("SCMView")
          .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
          .Columns(columns =>
          {

              if (usertype == "SCM")
              {
                  columns.Bound(p => p.ORDER_STATUS)// || ORDER_STATUS === 'Confirm Paid'
     .ClientTemplate("# if (ORDER_STATUS=='Completed' ||ORDER_STATUS=='Re Check'|| ORDER_STATUS=='No Data' ||  ORDER_STATUS=='Waiting Sub Verify' || ORDER_STATUS === 'Waiting Paid' || ORDER_STATUS === 'Dispute' || ORDER_STATUS === 'Dispute'){ #<input type='checkbox' class='k-cb SCMViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb SCMViewRow-checkbox hidden' disabled= 'disabled' />#}#")
     .HeaderTemplate("<input type='checkbox' id='SCMViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
     .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50).Sortable(false);
              }
              if (usertype == "ACCT")
              {
                  // columns.Bound(p => p.ORDER_STATUS)
                  // .ClientTemplate("# if ( ORDER_STATUS === 'Confirm Paid' || ORDER_STATUS === 'Paid' || ORDER_STATUS === 'Hold'){ #<input type='checkbox' class='k-cb SCMViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb SCMViewRow-checkbox hidden' disabled= 'disabled' />#}#")
                  // .HeaderTemplate("<input type='checkbox' id='SCMViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
                  //.HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50);
              }
              columns.Command(command =>
              {
                  command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");
              }).Title("ACTION").Width(100);
              columns.Bound(p => p.ACCESS_NUMBER_MASKING).Title(L_ACC_NBR).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.ACCESS_NUMBER).Title(L_ACC_NBR).HtmlAttributes(new { style = "text-align:left;" }).Width(110).Hidden();
              columns.Bound(p => p.PRODUCT_OWNER).Title(L_PRODUCT_OWNER).HtmlAttributes(new {style = "text-align:left;"}).Width(200);
              columns.Bound(p => p.ACCOUNT_NAME).Title(L_USER_NAME).HtmlAttributes(new {style = "text-align:left;"}).Width(200);
              columns.Bound(p => p.SBC_CPY).Title(L_SBC_CPY).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.PRODUCT_NAME).Title(L_PRODUCT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.ON_TOP1).Title(L_ON_TOP1).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.ON_TOP2).Title(L_ON_TOP2).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.VOIP_NUMBER).Title(L_VOIP_NUMBER).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.PROMOTION_NAME).Title(L_SERVICE_PACK_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.ORDER_NO).Title(L_ORD_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.ORD_TYPE).Title(L_ORD_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.ORDER_SFF).Title(L_ORDER_SFF).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.APPOINTMENNT_DT).Title(L_APPOINTMENT_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientTemplate("# if ( APPOINTMENNT_DT === '' || APPOINTMENNT_DT === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(APPOINTMENNT_DT,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.CS_APPROVE_DATE).Title(L_APPROVE_JOB_FBSS_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(200).ClientTemplate("# if ( CS_APPROVE_DATE === '' || CS_APPROVE_DATE === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(CS_APPROVE_DATE,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.ORDER_STATUS_DT).Title(L_COMPLETED_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientTemplate("# if ( ORDER_STATUS_DT === '' || ORDER_STATUS_DT === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(ORDER_STATUS_DT,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.OM_ORDER_STATUS).Title(L_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.REJECT_REASON).Title(L_REJECT_REASON).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.MATERIAL_CODE_CPESN).Title(L_MATERIAL_CODE_CPESN).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.CPE_SN).Title(L_CPE_SN).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.CPE_MODE).Title(L_CPE_MODE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.MATERIAL_CODE_STBSN).Title(L_MATERIAL_CODE_STBSN).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.STB_SN).Title(L_STB_SN).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.MATERIAL_CODE_ATASN).Title(L_MATERIAL_CODE_ATASN).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.ATA_SN).Title(L_ATA_SN).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.MATERIAL_CODE_WIFIROUTESN).Title(L_MATERIAL_CODE_WIFIROUTESN).HtmlAttributes(new { style = "text-align:left;" }).Width(250);
              columns.Bound(p => p.WIFI_ROUTER_SN).Title(L_WIFI_ROUTER_SN).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.STO_LOCATION).Title(L_STO_LOCATION).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.SUBCONTRACT_CODE).Title(L_VENDOR_CODE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.FOA_REJECT_REASON).Title(L_FOA_REJECT_REASON).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.RE_APPOINTMENT_REASON).Title(L_RE_APPOINTMENT_REASON).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.PHASE_PO).Title(L_PHASE_PO).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.SFF_ACTIVE_DATE).Title(L_SFF_ACTIVE_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientTemplate("# if ( SFF_ACTIVE_DATE === '' || SFF_ACTIVE_DATE === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(SFF_ACTIVE_DATE,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.SFF_SUBMITTED_DATE).Title(L_SFF_SUBMITTED_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(180).ClientTemplate("# if ( SFF_ACTIVE_DATE === '' || SFF_ACTIVE_DATE === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(SFF_ACTIVE_DATE,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.EVENT_CODE).Title(L_EVENT_CODE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
              columns.Bound(p => p.REGION).Title(L_REGION).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
              columns.Bound(p => p.ENTRY_FEE).Title(L_TOTAL_FEE).HtmlAttributes(new { style = "text-align:right;" }).Width(110);
              columns.Bound(p => p.FEE_CODE).Title(L_FEE_CODE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.ADDR_ID).Title(L_ADDR_ID).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              // columns.Bound(p => p.ADDR_NAME_TH).Title(L_ADDR_NAME_TH).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              //Add FOR PhaseIII
              columns.Bound(p => p.INSTALLATION_ADDRESS).Title(L_INSTALLATION_ADDRESS).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.SUBCONTRACT_TYPE).Title(L_SUB_CONTRACT_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(L_SUB_CONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.REQUEST_DISTANCE).Title(L_Request_Distance).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.APPROVE_DISTANCE).Title(L_Approve_Distance).HtmlAttributes(new { style = "text-align:left;" }).Width(200);


              columns.Bound(p => p.APPROVE_STAFF).Title(L_Approve_STAFF).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.APPROVE_STATUS).Title(L_Approve_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.REUSED_FLAG).Title(L_Reuse_Flag).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.REQUEST_SUB_FLAG).Title(L_REQUEST_SUB_FLAG).HtmlAttributes(new { style = "text-align:left;" }).Width(200);

              //-----------------                 
              // columns.Bound(p => p.DISTANCE_PAID).Title(L_Distance_To_Paid).HtmlAttributes(new { style = "text-align:right;" }).Width(150);
              columns.Bound(p => p.OUTDOOR_COST).Title(L_Out_door).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.INDOOR_COST).Title(L_In_door).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              //Add FOR PhaseIII    
              columns.Bound(p => p.MAPPING_COST).Title(L_Maping_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.OVER_LENGTH).Title(L_Over_Length).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.OVER_COST).Title(L_Over_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.TOTAL_COST).Title(L_TOTAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.RECAL_DIS).Title(L_RECAL_DIS).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_OVER_LENGTH).Title(L_RECAL_OVER_LENGTH).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_OVER_COST).Title(L_RECAL_OVER_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_MAPPING_COST).Title(L_RECAL_MAPPING_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_RATE).Title(L_RECAL_RATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);




              //---------------- 
              columns.Bound(p => p.MAX_LENGTH).Title(L_MAX_LENGTH).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.TOTAL_PAID).Title(L_Total_Paid).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              //  columns.Bound(p => p.DIFF_DISTANCE).Title(L_DIFF_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Width(150);

              columns.Bound(p => p.ORDER_STATUS).Title(L_Status).HtmlAttributes(new { style = "text-align:center;" }).Width(110);
              //Add FOR PhaseIII  
              columns.Bound(p => p.RULE_ID).Title(L_Rule_ID).HtmlAttributes(new { style = "text-align:center;" }).Width(110);
              //----------------                    
              columns.Bound(p => p.REMARK).Title(L_Remark).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.OM_ORDER_STATUS).Title(L_APPROVE_FLAG).HtmlAttributes(new { style = "text-align:left;" }).Width(160);
              columns.Bound(p => p.IR_DOC).Title(L_IR_DOC).HtmlAttributes(new { style = "text-align:left;" }).Width(160);
              columns.Bound(p => p.INVOICE_NO).Title(L_INVOICE_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(160);
              columns.Bound(p => p.SUBCONTRACT_LOCATION).Title(L_SUBCONTRACT_LOCATION).HtmlAttributes(new { style = "text-align:left;" }).Width(160);

              // columns.Bound(p => p.NOTE).Title(L_NOTE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);

          })
                    //  .ToolBar(toolBar => toolBar.Save()).HtmlAttributes(new { style = "text-align:right;" })
                    .Scrollable(scrollable => scrollable.Height("auto"))
                    // .Editable(editable => editable.Mode(GridEditMode.InCell))
                    .Sortable()
                    .Resizable(resize => resize.Columns(true))
                    .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 20, 50, 100 }))
                    .AutoBind(false)
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Model(model =>
                        {
                            model.Id(p => p.ACCESS_NUMBER_MASKING);
                            model.Id(p => p.ACCESS_NUMBER);
                            model.Field(p => p.ORDER_STATUS).Editable(false);
                            model.Field(p => p.ACCESS_NUMBER).Editable(false);
                            model.Field(p => p.ACCOUNT_NAME).Editable(false);
                            model.Field(p => p.SBC_CPY).Editable(false);
                            model.Field(p => p.PRODUCT_NAME).Editable(false);
                            model.Field(p => p.ON_TOP1).Editable(false);
                            model.Field(p => p.ON_TOP2).Editable(false);
                            model.Field(p => p.VOIP_NUMBER).Editable(false);
                            model.Field(p => p.PROMOTION_NAME).Editable(false);
                            model.Field(p => p.ORDER_NO).Editable(false);
                            model.Field(p => p.ORD_TYPE).Editable(false);
                            model.Field(p => p.ORDER_SFF).Editable(false);
                            model.Field(p => p.APPOINTMENNT_DT).Editable(false);
                            model.Field(p => p.SFF_ACTIVE_DATE).Editable(false);
                            model.Field(p => p.CS_APPROVE_DATE).Editable(false);
                            model.Field(p => p.ORDER_STATUS_DT).Editable(false);
                            model.Field(p => p.ORDER_STATUS).Editable(false);
                            model.Field(p => p.REJECT_REASON).Editable(false);
                            model.Field(p => p.MATERIAL_CODE_CPESN).Editable(false);
                            model.Field(p => p.CPE_SN).Editable(false);
                            model.Field(p => p.CPE_MODE).Editable(false);
                            model.Field(p => p.MATERIAL_CODE_STBSN).Editable(false);
                            model.Field(p => p.STB_SN).Editable(false);
                            model.Field(p => p.MATERIAL_CODE_ATASN).Editable(false);
                            model.Field(p => p.ATA_SN).Editable(false);
                            model.Field(p => p.MATERIAL_CODE_WIFIROUTESN).Editable(false);
                            model.Field(p => p.WIFI_ROUTER_SN).Editable(false);
                            model.Field(p => p.STO_LOCATION).Editable(false);
                            model.Field(p => p.SUBCONTRACT_CODE).Editable(false);
                            model.Field(p => p.FOA_REJECT_REASON).Editable(false);
                            model.Field(p => p.RE_APPOINTMENT_REASON).Editable(false);
                            model.Field(p => p.PHASE_PO).Editable(false);
                            model.Field(p => p.SFF_SUBMITTED_DATE).Editable(false);
                            model.Field(p => p.EVENT_CODE).Editable(false);
                            model.Field(p => p.REGION).Editable(false);
                            model.Field(p => p.ENTRY_FEE).Editable(false);
                            model.Field(p => p.FEE_CODE).Editable(false);
                            model.Field(p => p.ADDR_ID).Editable(false);
                            model.Field(p => p.INSTALLATION_ADDRESS).Editable(false);
                            model.Field(p => p.SUBCONTRACT_SUB_TYPE).Editable(false);
                            model.Field(p => p.SUBCONTRACT_TYPE).Editable(false);

                            model.Field(p => p.REQUEST_DISTANCE).Editable(false);
                            model.Field(p => p.APPROVE_DISTANCE).Editable(false);
                            model.Field(p => p.APPROVE_STAFF).Editable(false);
                            model.Field(p => p.APPROVE_STATUS).Editable(false);
                            model.Field(p => p.REUSED_FLAG).Editable(false);
                            model.Field(p => p.REQUEST_SUB_FLAG).Editable(false);
                            //   model.Field(p => p.DISTANCE_PAID).Editable(false);
                            model.Field(p => p.OUTDOOR_COST).Editable(false);
                            model.Field(p => p.INDOOR_COST).Editable(false);
                            model.Field(p => p.REQUEST_SUB_FLAG).Editable(false);
                            model.Field(p => p.MAPPING_COST).Editable(false);
                            model.Field(p => p.OVER_COST).Editable(false);
                            model.Field(p => p.OVER_LENGTH).Editable(false);
                            model.Field(p => p.TOTAL_COST).Editable(false);
                            model.Field(p => p.RECAL_DIS).Editable(false);
                            model.Field(p => p.RECAL_RATE).Editable(false);
                            model.Field(p => p.RECAL_OVER_LENGTH).Editable(false);
                            model.Field(p => p.RECAL_OVER_COST).Editable(false);
                            model.Field(p => p.RECAL_MAPPING_COST).Editable(false);
                            //  model.Field(p => p.DIFF_DISTANCE).Editable(false);
                            model.Field(p => p.MAX_LENGTH).Editable(false);
                            model.Field(p => p.TOTAL_PAID).Editable(false);
                            model.Field(p => p.RULE_ID).Editable(false);
                            model.Field(p => p.OM_ORDER_STATUS).Editable(false);
                            model.Field(p => p.REMARK).Editable(false);
                            model.Field(p => p.SUBCONTRACT_LOCATION).Editable(false);
                        })
                        .PageSize(20)
                        .Read(read => read.Action("SearchLastMileByDistanceOrderList", "LastMileByDistance").Data("bindingValue"))
                        .Update(update => update.Action("UpdateSCMOrderList", "LastMileByDistance"))
                    )
                            .Events(e => e.DataBound("onSCMViewDataBound"))
    //  .Events(e => e.Edit("editGrid"))
    )

</div>
<div id="selectRow">
    @(Html.Kendo().Window()
                .Name("norow")
            .HtmlAttributes(new { @class = "i-gap-popup" })

                .Title("System Information")
            .Width(400)
            .Draggable()
            .Visible(false)
            .Modal(true)
            .Content(@<text>
        <div id="Nodata">
            <div style="text-align:center" class="row">
                <label style="font-size:15px;color:red">  Please Select Row</label>
            </div>
        </div>
            </text>)
    )
            </div>
            <div>

                <input id="_invNo" type="hidden" value="" />
                <input id="_invDate" type="hidden" value="" />
                <input id="_IRDOC" type="hidden" value="" />
                <input id="_remark" type="hidden" value="" />
                <input id="_ordstatus" type="hidden" value="" />
                <input id="_remarksub" type="hidden" value="" />
                <input id="_usertype" type="hidden" value="@ViewBag.UserGroup"/>
            </div>

            <script>
                function editGrid(arg) {
                    arg.container.find("input[name='NOTE']").each(function () { $(this).attr("maxlength", "500") });
                    arg.container.find("input[name='NOTE']").each(function () { $(this).attr('style', 'background-color:#7EA700') });

                    arg.container.find("input[name=NOTE]").change(function () {


                        if (arg.container.find("input[name=NOTE]").val() == "") {
                            $("#tempNote").val("0");
                        }
                        else {
                            $("#tempNote").val(arg.container.find("input[name=NOTE]").val());
                        }
                    });


                }
                function checkNote() {
                    var tempnote = $("#tempNote").val();
                    var tempnoteLength = $("#tempNote").val().length;
                    if (tempnoteLength > 500) {

                        alert("Cannot Input Note Please Check Note Length");
                        return false;
                    }
                    else {
                        if (tempnote != "0") {
                            alert("Please Save Change OR Please Cancel Change !!! ");
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                }

                var AccessList = function () {
                    ACCESS_NUMBER = "";
                }
                $(document).ready(function () {
                    $("#tempNote").val("0");
                    var grid = $("#SCMView").data("kendoGrid");
                    grid.table.on("click", ".SCMViewRow-checkbox", selectRow);
                    var count = 0;
                    //check all
                    $('#SCMViewheader-chb').change(function (ev) {
                        var checked = ev.target.checked;
                      
                        $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                            count++;
                            if (checked) {
                                if ($(item).prop("checked", false)) {
                                    $(item).click();
                                }
                            } else {
                                if ($(item).prop("checked", true)) {
                                    $(item).click();
                                    checkedIds = {};
                                }
                            }
                        });

                        if (checked) {
                            $("#chk").val("True");
                            $("#chkall").val("True");
                            if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                                if ($('#ddlWorkflowStatus').val().length == 1 && count > 2) {
                                    $("#updateall").prop("disabled", false);
                                }
                            }
                          
                            $(".h-cb").prop('checked', true);
                        } else {
                            $("#chkall").val("False");
                            $("#chk").val("False");
                            $("#updateall").prop("disabled", true);
                            $(".h-cb").prop('checked', false);
                        }
                    });
                  
                    //sample retrive data
                    $("#savechkbox").bind("click", function () {

                        var checked = [];
                        var checkeds = [];


                        for (var i in checkedIds) {
                            var ListModel = new AccessList();
                            if (checkedIds[i]) {
                                ListModel.ACCESS_NUMBER = i;
                                checked.push(i);
                                checkeds.push(ListModel);
                                $("#accNo").val("000000000");
                            }

                        }
                        if ($("#chkall").val() === "False") {
                            CheckBoxSCMConfirmPaid(checkeds);
                           // alert("NotCheckAll");
                        }
                        else {
                           //  alert("CheckAll");
                           CheckBoxAllSCMConfirmPaid();

                        }


                       




                    });
                });

                //var checkedIds = {};

                //on click of the checkbox:
                function selectRow() {
                    var checked = this.checked,
                        row = $(this).closest("tr"),
                        grid = $("#SCMView").data("kendoGrid"),
                        dataItem = grid.dataItem(row);

                    checkedIds[dataItem.ACCESS_NUMBER] = checked;

                    if (checked) {
                        //-select the row
                        row.addClass("k-state-selected");

                        //var checkHeader = true;

                        //$.each(grid.items(), function (index, item) {
                        //    if (item.ORDER_STATUS === "Waiting Sub Verify" || item.ORDER_STATUS === "Waiting Paid" || item.ORDER_STATUS === "Dispute" || item.ORDER_STATUS === "Confirm Paid") {
                        //        if (!($(item).hasClass("k-state-selected"))) {
                        //            checkHeader = false;
                        //        }
                        //    }
                        //});

                        //$("#SCMViewheader-chb")[0].checked = checkHeader;
                        $("#chk").val("True");
                        if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                            if ($('#ddlWorkflowStatus').val().length == 1) {
                                $("#updateall").prop("disabled", false);
                            }
                        }
                        
                    } else {
                        $("#chkall").val("False");
                        //-remove selection
                        row.removeClass("k-state-selected");
                        $("#SCMViewheader-chb").prop("checked", false);
                        //$("#SCMViewheader-chb")[0].checked = false;
                    }

                    checkUpdateAllButton();
                }

                function onSCMViewDataBound() {
                    $("#tempNote").val("0");
                    Loading(0);
                    var grid = this;
                    //fix kendo grid width
                    if (this.dataSource.view().length === 0) {
                        $('#export').attr("disabled", true);
                        //$('#sendmail').attr("disabled", true);

                        $("#updateall").prop("disabled", true);
                      //  $('#updatebyfile').attr("disabled", true);


                        var colspan = this.thead.find("th").length;
                    
                    

                        var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

                        this.tbody.html(emptyRow);

                     //   $("#noData").data("kendoWindow").open();
                    //    $("#noData").data("kendoWindow").center();
                        //workarounds for IE lt 9
                        this.table.width(800);
                        //$(".k-grid-content").height(2 * kendo.support.scrollbar());
                        $(".k-grid-content").height(50);
                    }
                    else {

                        grid.tbody.find("tr[role='row']").each(function () {
                            var model = grid.dataItem(this);
                            var status = model.ORDER_STATUS;
                            var approveflag = model.APPROVE_FLAG
                          //  console.log(status);
                            if ( $("#_usertype").val() == "SCM")
                            {
                                 $(this).find(".SCMViewRow-checkbox").attr('value', status);
                                if ((status === "Waiting Paid" || status === "Dispute" || status === "Hold") || (status === "Waiting Sub Verify") && (approveflag === "Approved")) {
                              //  if (status === "Waiting Sub Verify" || status === "Waiting Paid" || status === "Dispute" || status === "Confirm Paid") {
                                    $(this).find(".k-grid-Edit").show();
                                    $(this).find(".SCMViewRow-checkbox").hide();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', true);
                                }
                                //else if (((status === "Waiting Sub Verify") || status === "Hold") && (approveflag === "Approved")) {
                                //    $(this).find(".k-grid-Edit").show();
                                //    $(this).find(".SCMViewRow-checkbox").show();
                                //    $(this).find(".SCMViewRow-checkbox").attr('disabled', false);
                                //}
                                else if ((status === "Completed" || status === "Re Check" || status === "No Data") && (approveflag === "Approved") )//&& (approveflag === "Approved"))
                                {
                                    $(this).find(".k-grid-Edit").hide();
                                    $(this).find(".SCMViewRow-checkbox").show();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', false);
                                }
                                else
                                {
                                    $(this).find(".k-grid-Edit").hide();
                                    $(this).find(".SCMViewRow-checkbox").hide();
                                    $(this).find(".SCMViewRow-checkbox").attr('disabled', true);

                                }
                            }
                            //if ($("#_usertype").val() == "ACCT")
                            //{
                            //   //  $("#SCMViewheader-chb").prop("disabled", true);
                            //    if ((status === 'Confirm Paid' || status === 'Hold') && (approveflag === "Approved")) {
                            //        $(this).find(".k-grid-Edit").show();
                            //        $(this).find(".SCMViewRow-checkbox").hide();
                            //    } else {
                            //        $(this).find(".k-grid-Edit").hide();
                            //        $(this).find(".SCMViewRow-checkbox").hide();
                            //    }
                            //}
                            
                        });
                        $('#export').attr("disabled", false);
                      //  $('#sendmail').attr("disabled", false);

                   //     $('#updatebyfile').attr("disabled", false);
                        $('.k-grid-content').height("auto");
                        $('.k-grid-content').css("max-height", "300px");
                    }

                    //show order list detail panel
                    if (this.dataSource.view().length === 1) {
                        $('.k-grid-content').height("auto");
                        $('.k-grid-content').css("max-height", "150px");
                        var accNo = $("#SCMView").data("kendoGrid").dataSource.view()[0].ACCESS_NUMBER;
                        var ordNo = $("#SCMView").data("kendoGrid").dataSource.view()[0].ORDER_NO;
                        $("#dbk_ACC_NO").val(accNo);
                        $("#dbk_ORD_NO").val(ordNo);


                        CallListDetail(accNo, ordNo);
                    }

                    //reset checklist
                    //$('#SCMViewheader-chb').removeAttr('checked');

                    var view = this.dataSource.view();
                    for (var i = 0; i < view.length; i++) {
                        if (checkedIds[view[i].id]) {
                            this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                                .addClass("k-state-selected")
                                .find(".SCMViewRow-checkbox")
                                .attr("checked", "checked");
                        }
                    }

                    //when header checkbox is checked
                    if ($("#SCMViewheader-chb").prop("checked")) {
                        $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                            if ($(item).prop("checked", false)) {
                                $(item).click();
                            }
                        });
                    }
                  
                        $('.SCMViewRow-checkbox').change(function () {
                     
                            checkboxcount();
                        });

                    $("#SCMViewheader-chb").change(function () {
                        idsToSend = [];
                        var AccessListModel = new AccessList();
                        AccessListModel.ACCESS_NUMBER = "MAX-ACCNO";
                        idsToSend.push(AccessListModel);
                    });
                }
                function checkboxcount() {
                    var count = 0; var countb = 0;
                   // console.log(item);
                    $('.SCMViewRow-checkbox:enabled').each(function (idx, item) {
                       
                        if ($(item).is(':checked')) {

                            var status = item.value;
                            if (status === 'Waiting Sub Verify') {
                               // console.log('a');
                                countb++;
                               //  countb++;
                                 
                            }
                            else {
                              //  console.log('b');
                                //count++;
                                count++;
                            }
                          
                            //count++;

                        }
                      
                        console.log('count' + count);
                        
                    });
                   // console.log(count)
                    //if (count > 0 && countb === 0) {
                    //    $('#sendmail').attr("disabled", false);
                    //    $('#btscmupdateall').attr('disabled', true);
                    //} else if (count === 0 && countb > 0) {
                    //    $('#sendmail').attr("disabled", true);
                    //    $('#btscmupdateall').attr('disabled', false);
                    //}
                    //else {
                    //    $('#sendmail').attr("disabled", true);
                    //    $('#btscmupdateall').attr('disabled', true);
                    //}
                   if (count > 0) {
                        $('#sendmail').attr("disabled", false);
                       // $('#btscmupdateall').attr('disabled', true);
                    } else  {
                        $('#sendmail').attr("disabled", true);
                      //  $('#btscmupdateall').attr('disabled', false);
                    }
                }
            </script>