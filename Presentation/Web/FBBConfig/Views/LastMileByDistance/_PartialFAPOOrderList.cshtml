@using WBBEntity.PanelModels;
@{
    string L_STATUS = "";
    string L_INTERNET_NO = "";
    string L_SUB_NAME = "";
    string L_DISTANCE_APP = "";
    string L_DISTANCE_ESRI = "";
    string L_DISTANCE_MAP = "";
    string L_DISTANCE_REAL = "";
    string L_DISTANCE_VALIDATE = "";
    string L_TOTAL_DISTANCE = "";
    string L_OVER_DISTANCE = "";
    string L_LASTMILE_PRICE = "";
    string L_ORDER_FEE = "";
    string L_TOTAL_PAID = "";
    string L_LAST_UPDATE_DATE = "";
    string L_LAST_UPDATE_BY = "";
    string L_DISTANCE_PAID = "";
    string L_REMARK = "";
    //Phase III  03/01/2019
    string L_Request_Distance = "";
    string L_Approve_Distance = "";
    string L_Approve_STAFF = "";
    string L_Approve_STATUS = "";
    string L_Reuse_Flag = "";
    string L_Maping_Cost = "";
    string L_Over_Length = "";
    string L_Over_Cost = "";
    string L_Rule_ID = "";
    string L_SUB_CONTRACT_TYPE = "";
    string L_SUB_CONTRACT_SUB_TYPE = "";
    string L_REQUEST_SUB_FLAG = "";
    string L_DISPUTE_DISTANCE = "";
    // R19.03 
    string L_ORDER_NO = "ORDER_NO";
    // End R19.03
    string L_APPROVE_FLAG = "APPROVE FLAG";
    string L_DIFF_DISTANCE = "DIFF DISTANCE";
    string L_RECAL_DIS = "RECAL DISTANCE";
    string L_RECAL_RATE = "RECAL RATE";
    string L_RECAL_OVER_LENGTH = "RECAL OVER LENGTH";
    string L_RECAL_OVER_COST = "RECAL OVER COST";
    string L_TOTAL_COST = "TOTAL FOA";
    string L_INDOOR_COST =  "INDOOR COST";
    string L_OUTDOOR_COST = "OUTDOOR COST";
    string L_OM_ORDER_STATUS = "ORDER STATUS";
    string L_RECAL_MAPPING_COST = "L_RECAL_MAPPING_COST";
    string L_ENTRY_FEE = "L_ENTRY_FEE";
    string L_USER_ID = "USER_ID";
    string L_SUBCONTRACT_LOCATION = "L_SUBCONTRACT_LOCATION";
    string L_PRODUCT_OWNER = "";

    if (ViewBag.FAPOOrderListScreen != null)
    {
        var configscreen = (List<LovValueModel>)ViewBag.FAPOOrderListScreen;
        L_STATUS = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_STATUS").LovValue1 : "";
        L_INTERNET_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_INTERNET_NO").LovValue1 : "";
        L_SUB_NAME = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_SUB_NAME").LovValue1 : "";
        L_DISTANCE_APP = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_APP").LovValue1 : "";
        L_DISTANCE_ESRI = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_ESRI").LovValue1 : "";
        L_DISTANCE_MAP = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_MAP").LovValue1 : "";
        L_DISTANCE_REAL = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_REAL").LovValue1 : "";
        L_DISTANCE_VALIDATE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_VALIDATE").LovValue1 : "";
        L_TOTAL_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_TOTAL").LovValue1 : "";
        L_OVER_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_MORE_325").LovValue1 : "";
        L_DISTANCE_PAID = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISTANCE_PAID").LovValue1 : "";

        L_LASTMILE_PRICE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_LASTMILE_PRICE").LovValue1 : "";
        L_ORDER_FEE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_FEE").LovValue1 : "";
        L_TOTAL_PAID = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_TOTAL_PAID").LovValue1 : "";
        L_LAST_UPDATE_DATE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_DATE").LovValue1 : "";
        L_LAST_UPDATE_BY = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_LAST_UPDATE_BY").LovValue1 : "";
        L_REMARK =           configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_REMARK").LovValue1 : "";
        L_Request_Distance = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Request_Distance").LovValue1 : "";
        L_Approve_Distance = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_Distance").LovValue1 : "";
        L_Approve_STAFF =    configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_STAFF").LovValue1 :"";
        L_Approve_STATUS =   configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Approve_STATUS").LovValue1 : "";
        L_Reuse_Flag =       configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Reuse_Flag").LovValue1 :"";
        L_Maping_Cost =      configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Maping_Cost").LovValue1 : "";
        L_Over_Length =      configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Over_Length").LovValue1 : "";
        L_Over_Cost =        configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Over_Cost").LovValue1 : "";
        L_Rule_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_Rule_ID").LovValue1 : "";
        L_SUB_CONTRACT_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_SUB_CONTRACT_TYPE").LovValue1 : "";
        L_SUB_CONTRACT_SUB_TYPE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_SUB_CONTRACT_SUB_TYPE").LovValue1 : "";
        L_REQUEST_SUB_FLAG = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_REQUEST_SUB_FLAG").LovValue1 : "";
        L_DISPUTE_DISTANCE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_DISPUTE_DISTANCE").LovValue1 : "";
        L_RECAL_MAPPING_COST = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_RECAL_MAPPING_COST").LovValue1 : "";
        L_ENTRY_FEE = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_ENTRY_FEE").LovValue1 : "";
        L_USER_ID = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_USER_ID").LovValue1 : "";
        L_ORDER_NO = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_ORDER_NO").LovValue1 : "";
        L_OM_ORDER_STATUS  = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_OM_ORDER_STATUS").LovValue1 : "";
        L_SUBCONTRACT_LOCATION = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_SUBCONTRACT_LOCATION").LovValue1 : "";
        L_PRODUCT_OWNER = configscreen.Any(f => f.Type == "L_ORD_LIST_FAPO") ? configscreen.FirstOrDefault(f => f.Name == "L_PRODUCT_OWNER").LovValue1 : "";

    }

}

<div id="FAPOGridResult" class="row">
    @(Html.Kendo().Grid<WBBEntity.PanelModels.FBBWebConfigModels.LastMileByDistanceOrderListModel>()
                  .Name("FAPOView")
                  .Selectable(selectable => selectable.Enabled(true).Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
          .Columns(columns =>
          {
              //columns.Bound(p => p.ORDER_STATUS)//.ClientTemplate("<input type='checkbox' class='k-cb FAPOViewRow-checkbox' />")
              //    .ClientTemplate("# if (ORDER_STATUS=='Re Check' || ORDER_STATUS === 'Dispute'|| ORDER_STATUS === 'Completed' ){ #<input type='checkbox' class='k-cb FAPOViewRow-checkbox' /># }else{# <input type='checkbox' class='k-cb FAPOViewRow-checkbox hidden' disabled= 'disabled' />#}#")
              //    .HeaderTemplate("<input type='checkbox' id='FAPOViewheader-chb' class='h-cb k-cb' />").HtmlAttributes(new { style = "text-align:center;" })
              //    .HeaderHtmlAttributes(new { style = "text-align:center" }).Width(50);

              columns.Command(command =>
              {
                  command.Custom("Edit").Click("EditConfig").Text("<i class='fa fa-pencil-square-o fa-lg'></i>");

              }).Title("ACTION").Width(80);
              columns.Bound(p => p.ORDER_STATUS).Title(@L_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(170);
              columns.Bound(p => p.ACCESS_NUMBER_MASKING).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(110);
              columns.Bound(p => p.ACCESS_NUMBER).Title(@L_INTERNET_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(110).Hidden();
              columns.Bound(p => p.PRODUCT_OWNER).Title(@L_PRODUCT_OWNER).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.SUBCONTRACT_NAME).Title(@L_SUB_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.DISTANCE_LASTMILE_APP).Title(@L_DISTANCE_APP).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(200);
              columns.Bound(p => p.DISTANCE_ESRI).Title(@L_DISTANCE_ESRI).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.DISTANCE_GMAP).Title(@L_DISTANCE_MAP).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.DISTANCE_STRAIT).Title(@L_DISTANCE_REAL).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.DISPUTE_DISTANCE).Title(@L_DISPUTE_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.DISTANCE_VALIDATE).Title(@L_DISTANCE_VALIDATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.DISTANCE_TOTAL).Title(@L_TOTAL_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              //Add FOR PhaseIII
              columns.Bound(p => p.SUBCONTRACT_TYPE).Title(L_SUB_CONTRACT_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.SUBCONTRACT_SUB_TYPE).Title(L_SUB_CONTRACT_SUB_TYPE).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.REQUEST_DISTANCE).Title(L_Request_Distance).HtmlAttributes(new { style = "text-align:left;" }).Width(200);

              columns.Bound(p => p.APPROVE_DISTANCE).Title(L_Approve_Distance).HtmlAttributes(new { style = "text-align:left;" }).Width(200);

              columns.Bound(p => p.APPROVE_STAFF).Title(L_Approve_STAFF).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.APPROVE_STATUS).Title(L_Approve_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.REUSED_FLAG).Title(L_Reuse_Flag).HtmlAttributes(new { style = "text-align:left;" }).Width(200);
              columns.Bound(p => p.REQUEST_SUB_FLAG).Title(L_REQUEST_SUB_FLAG).HtmlAttributes(new { style = "text-align:left;" }).Width(200);

              //-----------------  

              //   columns.Bound(p => p.DISTANCE_PAID).Title(@L_DISTANCE_PAID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              //  columns.Bound(p => p.Distance_MORE_325).Title(@L_OVER_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              //  columns.Bound(p => p.LASTMILE_PRICE).Title(@L_LASTMILE_PRICE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.ENTRY_FEE).Title(@L_ENTRY_FEE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.INDOOR_COST).Title(@L_INDOOR_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.OUTDOOR_COST).Title(@L_OUTDOOR_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.MAPPING_COST).Title(L_Maping_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.OVER_LENGTH).Title(L_Over_Length).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.OVER_COST).Title(L_Over_Cost).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.TOTAL_COST).Title(@L_TOTAL_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.RECAL_DIS).Title(L_RECAL_DIS).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_RATE).Title(L_RECAL_RATE).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);

              columns.Bound(p => p.RECAL_MAPPING_COST).Title(L_RECAL_MAPPING_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_OVER_LENGTH).Title(L_RECAL_OVER_LENGTH).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RECAL_OVER_COST).Title(L_RECAL_OVER_COST).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              //  columns.Bound(p => p.DIFF_DISTANCE).Title(L_DIFF_DISTANCE).HtmlAttributes(new { style = "text-align:right;" }).Width(150);




              columns.Bound(p => p.TOTAL_PAID).Title(@L_TOTAL_PAID).HtmlAttributes(new { style = "text-align:right;" }).Format("{0:n}").Width(150);
              columns.Bound(p => p.RULE_ID).Title(L_Rule_ID).HtmlAttributes(new { style = "text-align:center;" }).Width(110);

              columns.Bound(p => p.LAST_UPDATE_DATE).Title(@L_LAST_UPDATE_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150).ClientTemplate("# if ( LAST_UPDATE_DATE === '' || LAST_UPDATE_DATE === null ){ # - # }else{# #= kendo.toString(kendo.parseDate(LAST_UPDATE_DATE,'dd/MM/yyyy'), '" + "dd/MM/yyyy" + "') # #}#").Encoded(true).Format("{0: dd/MM/yyyy}");
              columns.Bound(p => p.LAST_UPDATE_BY).Title(@L_LAST_UPDATE_BY).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
              columns.Bound(p => p.OM_ORDER_STATUS).Title(@L_OM_ORDER_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(160);
              columns.Bound(p => p.REMARK).Title(@L_REMARK).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.USER_ID).Title(@L_USER_ID).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              //R19.03
              columns.Bound(p => p.ORDER_NO).Title(@L_ORDER_NO).HtmlAttributes(new { style = "text-align:left;" }).Width(120);
              columns.Bound(p => p.SUBCONTRACT_LOCATION).Title(@L_SUBCONTRACT_LOCATION).HtmlAttributes(new { style = "text-align:left;" }).Width(120);



          })
            //.ToolBar(toolBar => toolBar.Save()).HtmlAttributes(new { style = "text-align:right;" })
            .Scrollable(scrollable => scrollable.Height("auto"))
            //  .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Resizable(resize => resize.Columns(true))
            .Sortable()
            .Pageable(pageable => pageable.Numeric(true).PageSizes(new int[] { 20, 50, 100 }))
            .AutoBind(false)
            .DataSource(dataSource => dataSource
                .Ajax()
                .Model(model =>
                {
                    model.Id(p => p.ACCESS_NUMBER_MASKING);
                    model.Id(p => p.ACCESS_NUMBER);
                    model.Field(p => p.ORDER_STATUS).Editable(false);
                    model.Field(p => p.ORDER_STATUS).Editable(false);
                    model.Field(p => p.ACCESS_NUMBER).Editable(false);
                    model.Field(p => p.PRODUCT_OWNER).Editable(false);
                    model.Field(p => p.SUBCONTRACT_NAME).Editable(false);
                    model.Field(p => p.DISTANCE_LASTMILE_APP).Editable(false);
                    model.Field(p => p.DISTANCE_ESRI).Editable(false);
                    model.Field(p => p.DISTANCE_GMAP).Editable(false);
                    model.Field(p => p.DISTANCE_STRAIT).Editable(false);
                    model.Field(p => p.DISPUTE_DISTANCE).Editable(false);
                    model.Field(p => p.DISTANCE_VALIDATE).Editable(false);
                    model.Field(p => p.DISTANCE_TOTAL).Editable(false);

                    model.Field(p => p.REQUEST_DISTANCE).Editable(false);
                    model.Field(p => p.APPROVE_DISTANCE).Editable(false);
                    model.Field(p => p.APPROVE_STAFF).Editable(false);
                    model.Field(p => p.APPROVE_STATUS).Editable(false);
                    model.Field(p => p.REUSED_FLAG).Editable(false);

                    //  model.Field(p => p.Distance_MORE_325).Editable(false);
                    // model.Field(p => p.DISTANCE_PAID).Editable(false);
                    // model.Field(p => p.LASTMILE_PRICE).Editable(false);

                    model.Field(p => p.RECAL_MAPPING_COST).Editable(false);
                    model.Field(p => p.RECAL_DIS).Editable(false);
                    model.Field(p => p.RECAL_RATE).Editable(false);
                    model.Field(p => p.RECAL_OVER_LENGTH).Editable(false);
                    model.Field(p => p.RECAL_OVER_COST).Editable(false);
                    //   model.Field(p => p.DIFF_DISTANCE).Editable(false);
                    model.Field(p => p.ENTRY_FEE).Editable(false);
                    model.Field(p => p.MAPPING_COST).Editable(false);
                    model.Field(p => p.OVER_COST).Editable(false);
                    model.Field(p => p.OVER_LENGTH).Editable(false);
                    model.Field(p => p.TOTAL_COST).Editable(false);
                    model.Field(p => p.TOTAL_PAID).Editable(false);
                    model.Field(p => p.RULE_ID).Editable(false);
                    model.Field(p => p.LAST_UPDATE_DATE).Editable(false);
                    model.Field(p => p.LAST_UPDATE_BY).Editable(false);
                    model.Field(p => p.REMARK).Editable(false);
                    model.Field(p => p.ORDER_NO).Editable(false);
                    model.Field(p => p.OM_ORDER_STATUS).Editable(false);
                    model.Field(p => p.APPROVE_FLAG).Editable(false);
                })
                .PageSize(20)
                .Read(read => read.Action("SearchLastMileByDistanceOrderList", "LastMileByDistance").Data("bindingValue"))
                .Update(update => update.Action("UpdateSCMOrderList", "LastMileByDistance"))
            )
            .Events(e => e.DataBound("onFAPOViewDataBound"))
    )
</div>


<script>
    var AccessList = function () {
        ACCESS_NUMBER = "";
    }
    $(document).ready(function () {
        var grid = $("#FAPOView").data("kendoGrid");
        grid.table.on("click", ".FAPOViewRow-checkbox", selectRow);

        //check all
        $('#FAPOViewheader-chb').change(function (ev) {
            var checked = ev.target.checked;
            var count = 0;
            $('.FAPOViewRow-checkbox').each(function (idx, item) {
                if (checked) {
                    if (!($(item).closest('tr').is('.k-state-selected'))) {
                        count++;
                        $(item).click();
                    }
                } else {
                    if ($(item).closest('tr').is('.k-state-selected')) {
                        $(item).click();
                        checkedIds = {};
                    }
                }
            });

            if (checked) {
                $("#chk").val("True");
                $("#chkall").val("True");
                //$("#updateall").prop("disabled", false);
                if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                    if ($('#ddlWorkflowStatus').val().length == 1 && count > 2) {
                        $("#updateall").prop("disabled", false);
                    }
                } else {
                    $("#chk").val("False");
                    $("#chkall").val("False");
                }
                $(".h-cb").prop('checked', true);
            } else {
                $("#chkall").val("False");
                $("#chk").val("False");
                $("#updateall").prop("disabled", true);
                $(".h-cb").prop('checked', false);
            }
        });

        //sample retrive data
        $("#saveChkFapo").bind("click", function () {
            var checked = [];
            var checkeds = [];


            for (var i in checkedIds) {
                var ListModel = new AccessList();
                if (checkedIds[i]) {
                    ListModel.ACCESS_NUMBER = i;
                    checked.push(i);
                    checkeds.push(ListModel);
                    $("#accNo").val("000000000");
                }

            }
            if ($("#chkall").val() === "False") {
               CheckBoxFAPOConfirmPaid(checkeds);
                //alert("NotCheckAll");
            }
            else {
                // alert("CheckAll");
                CheckBoxAllFAPOConfirmPaid();

            }
     




        });

        // R19.03 FAPO Re-Cal 
        $("#saveAllChkFapoRecalDistance").bind("click", function () {
            var checked = [];
            var checkeds = [];


            for (var i in checkedIds) {
                var ListModel = new AccessList();
                if (checkedIds[i]) {
                    ListModel.ACCESS_NUMBER = i;
                    checked.push(i);
                    checkeds.push(ListModel);
                    $("#accNo").val("000000000");
                }

            }
            if ($("#chkall").val() === "False") {
                // CheckBoxFAPOConfirmPaid(checkeds);
                FAPOConfirmRecalDistance(checkeds);
                //alert("NotCheckAll");
            }
            else {
                // alert("CheckAll");
               // CheckBoxAllFAPOConfirmPaid();
                CheckBoxAllFAPOConfirmRecalDistance(checkeds);
            } 
        });
    });
    //End R19.03 

    //var checkedIds = {};

    //on click of the checkbox:
    function selectRow() {
        var checked = this.checked,
            row = $(this).closest("tr"),
            grid = $("#FAPOView").data("kendoGrid"),
            dataItem = grid.dataItem(row);

        checkedIds[dataItem.ACCESS_NUMBER] = checked;

        if (checked) {
            //-select the row
            row.addClass("k-state-selected");

            //var checkHeader = true;
            //(ORDER_STATUS=='Waiting Sub Verify' || ORDER_STATUS === 'Waiting Paid' || ORDER_STATUS === 'Dispute' || ORDER_STATUS === 'Confirm Paid' || ORDER_STATUS === 'Paid' || ORDER_STATUS === 'Hold')
            //$.each(grid.items(), function (index, item) {
            //    if (item.ORDER_STATUS == "Re Check"|| item.ORDER_STATUS === "Dispute" ) {
            //        if (!($(item).hasClass("k-state-selected"))) {
            //            checkHeader = false;
            //        }
            //    }
            //});

            //$("#FAPOViewheader-chb")[0].checked = checkHeader;

            $("#chk").val("True");
            if ($('#ddlWorkflowStatus').val() != '' && $('#ddlWorkflowStatus').val() != null) {
                if ($('#ddlWorkflowStatus').val().length == 1) {
                    $("#updateall").prop("disabled", false);
                    $("#chk").val("False");
                    $("#chkall").val("False");
                }
            } else {
                $("#chk").val("False");
                $("#chkall").val("False");
            }
        } else {
            $("#chkall").val("False");
            $("#chk").val("False");
            //-remove selection
            row.removeClass("k-state-selected");
            $("#FAPOViewheader-chb").prop("checked", false);
            //$("#FAPOViewheader-chb")[0].checked = false;
        }

        checkUpdateAllButton();
    }

    function onFAPOViewDataBound() {
        Loading(0);

        var grid = this;
        //fix kendo grid width
        if (this.dataSource.view().length === 0) {
            $('#export').attr("disabled", true);
         //   $("#updateall").prop("disabled", true);
           // $('#updatebyfile').attr("disabled", true);
            //insert empty row
            //var colspan = this.thead.find("th").length;
            //var emptyRow = "<tr style='height:auto; text-align:center' ><td colspan='" + colspan + "'>  </td></tr>";

            //this.tbody.html(emptyRow);

            //$("#noData").data("kendoWindow").open();
            //$("#noData").data("kendoWindow").center();
            ////workarounds for IE lt 9
            //this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());

            //insert empty row
            var colspan = this.thead.find("th").length;



            var emptyRow = "<tr style='height:auto; text-align:Left' ><td colspan='" + colspan + "'>&nbsp;&nbsp;&nbsp;&nbsp;No Data Found  </td></tr>";

            this.tbody.html(emptyRow);

            //   $("#noData").data("kendoWindow").open();
            //    $("#noData").data("kendoWindow").center();
            //workarounds for IE lt 9
            this.table.width(800);
            //$(".k-grid-content").height(2 * kendo.support.scrollbar());
            $(".k-grid-content").height(50);
        }
        else {
            grid.tbody.find("tr[role='row']").each(function () {
                var model = grid.dataItem(this);

                var status = model.ORDER_STATUS;
                var approveflag = model.APPROVE_FLAG;
                console.log(approveflag);
               /// console.log($("#_usertype").val());
                if ((status === 'Re Check' || status === 'Dispute' || status == 'Completed' ) &&  (approveflag === "Approved")) {
                    $(this).find(".k-grid-Edit").show();
                    $(this).find(".FAPOViewRow-checkbox").hide();
                   
                } else {
                    $(this).find(".k-grid-Edit").hide();
                    $(this).find(".FAPOViewRow-checkbox").hide();
                }
            });
            $('#export').attr("disabled", false);
          //  $('#updatebyfile').attr("disabled", false);
           // $('#btnReCalByFileByDistance').attr("disabled", false);
            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "300px");
        }

        //show order list detail panel
        if (this.dataSource.view().length === 1) {

            $('.k-grid-content').height("auto");
            $('.k-grid-content').css("max-height", "150px");
            var accNo = $("#FAPOView").data("kendoGrid").dataSource.view()[0].ACCESS_NUMBER;
            var ordNo = $("#FAPOView").data("kendoGrid").dataSource.view()[0].ORDER_NO;
            $("#dbk_ACC_NO").val(accNo);
            $("#dbk_ORD_NO").val(ordNo);
            CallListDetail(accNo, ordNo);
        }

        //reset checklist
        //$('#FAPOViewheader-chb').removeAttr('checked');

        var view = this.dataSource.view();
        for(var i = 0; i < view.length;i++){
            if(checkedIds[view[i].id]){
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".FAPOViewRow-checkbox")
                    .attr("checked","checked");
            }
        }

        //when header checkbox is checked
        if ($("#FAPOViewheader-chb").prop("checked")) {
            $('.FAPOViewRow-checkbox:enabled').each(function (idx, item) {
                if ($(item).prop("checked", false)) {
                    $(item).click();
                }
            });
        }
    }
</script>