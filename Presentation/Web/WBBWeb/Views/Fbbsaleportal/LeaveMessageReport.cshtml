@using WBBEntity.PanelModels;

@{
    Layout = "~/Views/Fbbsaleportal/_Layout.cshtml";
}

@{
    string L_PAGE_SALE_PORTAL_TITLE = "";
    string H_SALE_PORTAL_RPT_1 = "";
    string L_DATE_FROM = "";
    string L_DATE_TO = "";
    string C_REF_NO = "";

    string C_LANGUAGE = "";
    string C_CUST_NAME = "";
    string C_CUST_SURNAME = "";
    string C_CONTACT_MOBILE_NO = "";
    string C_IS_AIS_MOBILE = "";
    string C_CONTACT_EMAIL = "";
    string C_HOUSE_NO = "";
    string C_BUILDING_NAME = "";
    string C_VILLAGE_NAME = "";
    string C_SOI = "";
    string C_ROAD = "";
    string C_SUB_DISTRICT = "";
    string C_DISTRICT = "";
    string C_PROVINCE = "";
    string C_POSTAL_CODE = "";
    string C_CONTACT_TIME = "";
    string C_SERVICE_SPEED = "";
    string C_IS_CONTACT_CUST = "";
    string C_REMARK_FOR_CONTACT_CUST = "";
    string C_IS_IN_COV = "";
    string C_REMARK_FOR_NO_COV = "";
    string C_CLOSING_SALE = "";
    string C_REMARK_FOR_NO_REG = "";
    string C_INCENTIVE_PAY = "";
    string C_USER_NAME = "";
    string C_CREATE_DATE = "";
    string C_LAST_UPD_DATE = "";
    //17.3
    string C_LOCATION_CODE = "";
    string C_ASC_CODE = "";
    string C_CHANNEL = "";

    string C_REFERRAL_INTERNET_NO = "";
    string C_REFERRAL_NAME = ""; //R22.06
    string C_REFERRAL_STAFF_ID = "";
    //17.7
    string C_LINE_ID = "";
    string C_REGISTER_DATE = "";
    string C_ORDER_NO = "";
    string C_NON_MOBILE_NO = "";
    string C_INSTALL_STATUS = "";

    //17.9
    string C_RENTAL_FLAG = "";

    string LIMIT_DATE_FROM = "";
    string LIMIT_DATE_TO = "";

    string C_FULL_ADDRESS = "";

    //18.10
    string C_URL = "";
    string C_CAMPAIGN_PROJECT_NAME = "";
    string C_LONGITUDE = "";
    string C_LATITUDE = "";
    string C_PLAYBOXFLAG = "";

    //R20.12
    string C_SALES_REP = "";

    //UR_Partner
    string C_EMP_ID = "";

    //NEW_FTTH
    string C_COVERAGEAREA = "";
    string C_NETWORK_PROVIDER = "";
    string C_SUB_STATUS = "";
    string C_AREA_OWNER_NAME = "";
    string C_GROUP_OWNER = "";
    string C_AREA_OWNER_CONTACT_EMAIL = "";
    string C_AREA_OWNER_CONTACT_TEL = "";
    string C_FTTHDISPLAYMESSAGE = "";
    string C_WTTXDISPLAYMESSAGE = "";

    if (ViewBag.configscreen != null)
    {
        var configscreen = (List<LovScreenValueModel>)ViewBag.configscreen;

        L_PAGE_SALE_PORTAL_TITLE = configscreen.Any(f => f.Name == "L_PAGE_SALE_PORTAL_TITLE") ? configscreen.FirstOrDefault(f => f.Name == "L_PAGE_SALE_PORTAL_TITLE").DisplayValue : "";
        H_SALE_PORTAL_RPT_1 = configscreen.Any(f => f.Name == "H_SALE_PORTAL_RPT_1") ? configscreen.FirstOrDefault(f => f.Name == "H_SALE_PORTAL_RPT_1").DisplayValue : "";
        L_DATE_FROM = configscreen.Any(f => f.Name == "L_DATE_FROM") ? configscreen.FirstOrDefault(f => f.Name == "L_DATE_FROM").DisplayValue : "";
        L_DATE_TO = configscreen.Any(f => f.Name == "L_DATE_TO") ? configscreen.FirstOrDefault(f => f.Name == "L_DATE_TO").DisplayValue : "";
        C_REF_NO = configscreen.Any(f => f.Name == "C_REF_NO") ? configscreen.FirstOrDefault(f => f.Name == "C_REF_NO").DisplayValue : "";
        C_LANGUAGE = configscreen.Any(f => f.Name == "C_LANGUAGE") ? configscreen.FirstOrDefault(f => f.Name == "C_LANGUAGE").DisplayValue : "";
        C_CUST_NAME = configscreen.Any(f => f.Name == "C_CUST_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_CUST_NAME").DisplayValue : "";
        C_CUST_SURNAME = configscreen.Any(f => f.Name == "C_CUST_SURNAME") ? configscreen.FirstOrDefault(f => f.Name == "C_CUST_SURNAME").DisplayValue : "";
        C_CONTACT_MOBILE_NO = configscreen.Any(f => f.Name == "C_CONTACT_MOBILE_NO") ? configscreen.FirstOrDefault(f => f.Name == "C_CONTACT_MOBILE_NO").DisplayValue : "";
        C_IS_AIS_MOBILE = configscreen.Any(f => f.Name == "C_IS_AIS_MOBILE") ? configscreen.FirstOrDefault(f => f.Name == "C_IS_AIS_MOBILE").DisplayValue : "";
        C_CONTACT_EMAIL = configscreen.Any(f => f.Name == "C_CONTACT_EMAIL") ? configscreen.FirstOrDefault(f => f.Name == "C_CONTACT_EMAIL").DisplayValue : "";
        C_HOUSE_NO = configscreen.Any(f => f.Name == "C_HOUSE_NO") ? configscreen.FirstOrDefault(f => f.Name == "C_HOUSE_NO").DisplayValue : "";
        C_BUILDING_NAME = configscreen.Any(f => f.Name == "C_BUILDING_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_BUILDING_NAME").DisplayValue : "";
        C_VILLAGE_NAME = configscreen.Any(f => f.Name == "C_VILLAGE_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_VILLAGE_NAME").DisplayValue : "";
        C_SOI = configscreen.Any(f => f.Name == "C_SOI") ? configscreen.FirstOrDefault(f => f.Name == "C_SOI").DisplayValue : "";
        C_ROAD = configscreen.Any(f => f.Name == "C_ROAD") ? configscreen.FirstOrDefault(f => f.Name == "C_ROAD").DisplayValue : "";
        C_SUB_DISTRICT = configscreen.Any(f => f.Name == "C_SUB_DISTRICT") ? configscreen.FirstOrDefault(f => f.Name == "C_SUB_DISTRICT").DisplayValue : "";
        C_DISTRICT = configscreen.Any(f => f.Name == "C_DISTRICT") ? configscreen.FirstOrDefault(f => f.Name == "C_DISTRICT").DisplayValue : "";
        C_PROVINCE = configscreen.Any(f => f.Name == "C_PROVINCE") ? configscreen.FirstOrDefault(f => f.Name == "C_PROVINCE").DisplayValue : "";
        C_POSTAL_CODE = configscreen.Any(f => f.Name == "C_POSTAL_CODE") ? configscreen.FirstOrDefault(f => f.Name == "C_POSTAL_CODE").DisplayValue : "";
        C_CONTACT_TIME = configscreen.Any(f => f.Name == "C_CONTACT_TIME") ? configscreen.FirstOrDefault(f => f.Name == "C_CONTACT_TIME").DisplayValue : "";
        C_SERVICE_SPEED = configscreen.Any(f => f.Name == "C_SERVICE_SPEED") ? configscreen.FirstOrDefault(f => f.Name == "C_SERVICE_SPEED").DisplayValue : "";
        C_IS_CONTACT_CUST = configscreen.Any(f => f.Name == "C_IS_CONTACT_CUST") ? configscreen.FirstOrDefault(f => f.Name == "C_IS_CONTACT_CUST").DisplayValue : "";
        C_REMARK_FOR_CONTACT_CUST = configscreen.Any(f => f.Name == "C_REMARK_FOR_CONTACT_CUST") ? configscreen.FirstOrDefault(f => f.Name == "C_REMARK_FOR_CONTACT_CUST").DisplayValue : "";
        C_IS_IN_COV = configscreen.Any(f => f.Name == "C_IS_IN_COV") ? configscreen.FirstOrDefault(f => f.Name == "C_IS_IN_COV").DisplayValue : "";
        C_REMARK_FOR_NO_COV = configscreen.Any(f => f.Name == "C_REMARK_FOR_NO_COV") ? configscreen.FirstOrDefault(f => f.Name == "C_REMARK_FOR_NO_COV").DisplayValue : "";
        C_CLOSING_SALE = configscreen.Any(f => f.Name == "C_CLOSING_SALE") ? configscreen.FirstOrDefault(f => f.Name == "C_CLOSING_SALE").DisplayValue : "";
        C_REMARK_FOR_NO_REG = configscreen.Any(f => f.Name == "C_REMARK_FOR_NO_REG") ? configscreen.FirstOrDefault(f => f.Name == "C_REMARK_FOR_NO_REG").DisplayValue : "";
        C_INCENTIVE_PAY = configscreen.Any(f => f.Name == "C_INCENTIVE_PAY") ? configscreen.FirstOrDefault(f => f.Name == "C_INCENTIVE_PAY").DisplayValue : "";
        C_USER_NAME = configscreen.Any(f => f.Name == "C_USER_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_USER_NAME").DisplayValue : "";
        C_CREATE_DATE = configscreen.Any(f => f.Name == "C_CREATE_DATE") ? configscreen.FirstOrDefault(f => f.Name == "C_CREATE_DATE").DisplayValue : "";
        C_LAST_UPD_DATE = configscreen.Any(f => f.Name == "C_LAST_UPD_DATE") ? configscreen.FirstOrDefault(f => f.Name == "C_LAST_UPD_DATE").DisplayValue : "";
        //17.3
        C_LOCATION_CODE = configscreen.Any(f => f.Name == "C_LOCATION_CODE") ? configscreen.FirstOrDefault(f => f.Name == "C_LOCATION_CODE").DisplayValue : "";
        C_ASC_CODE = configscreen.Any(f => f.Name == "C_ASC_CODE") ? configscreen.FirstOrDefault(f => f.Name == "C_ASC_CODE").DisplayValue : "";
        C_CHANNEL = configscreen.Any(f => f.Name == "C_CHANNEL") ? configscreen.FirstOrDefault(f => f.Name == "C_CHANNEL").DisplayValue : "";
        //17.5
        C_REFERRAL_INTERNET_NO = configscreen.Any(f => f.Name == "C_REFERRAL_INTERNET_NO") ? configscreen.FirstOrDefault(f => f.Name == "C_REFERRAL_INTERNET_NO").DisplayValue : "";
        C_REFERRAL_NAME = configscreen.Any(f => f.Name == "C_REFERRAL_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_REFERRAL_NAME").DisplayValue : "";
        C_REFERRAL_STAFF_ID = configscreen.Any(f => f.Name == "C_REFERRAL_STAFF_ID") ? configscreen.FirstOrDefault(f => f.Name == "C_REFERRAL_STAFF_ID").DisplayValue : "";
        //17.7
        C_LINE_ID = configscreen.Any(f => f.Name == "C_LINE_ID") ? configscreen.FirstOrDefault(f => f.Name == "C_LINE_ID").DisplayValue : "";
        C_REGISTER_DATE = configscreen.Any(f => f.Name == "C_REGISTER_DATE") ? configscreen.FirstOrDefault(f => f.Name == "C_REGISTER_DATE").DisplayValue : "";
        C_ORDER_NO = configscreen.Any(f => f.Name == "C_ORDER_NO") ? configscreen.FirstOrDefault(f => f.Name == "C_ORDER_NO").DisplayValue : "";
        C_NON_MOBILE_NO = configscreen.Any(f => f.Name == "C_NON_MOBILE_NO") ? configscreen.FirstOrDefault(f => f.Name == "C_NON_MOBILE_NO").DisplayValue : "";
        C_INSTALL_STATUS = configscreen.Any(f => f.Name == "C_INSTALL_STATUS") ? configscreen.FirstOrDefault(f => f.Name == "C_INSTALL_STATUS").DisplayValue : "";
        //17.9
        C_RENTAL_FLAG = configscreen.Any(f => f.Name == "C_RENTAL_FLAG") ? configscreen.FirstOrDefault(f => f.Name == "C_RENTAL_FLAG").DisplayValue : "";
        //   C_FULL_ADDRESS
        C_FULL_ADDRESS = configscreen.Any(f => f.Name == "C_FULL_ADDRESS") ? configscreen.FirstOrDefault(f => f.Name == "C_FULL_ADDRESS").DisplayValue : "";
        //18.10
        C_URL = configscreen.Any(f => f.Name == "C_URL") ? configscreen.FirstOrDefault(f => f.Name == "C_URL").DisplayValue : "";
        C_CAMPAIGN_PROJECT_NAME = configscreen.Any(f => f.Name == "C_CAMPAIGN_PROJECT_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_CAMPAIGN_PROJECT_NAME").DisplayValue : "";
        C_LONGITUDE = configscreen.Any(f => f.Name == "C_LONGITUDE") ? configscreen.FirstOrDefault(f => f.Name == "C_LONGITUDE").DisplayValue : "";
        C_LATITUDE = configscreen.Any(f => f.Name == "C_LATITUDE") ? configscreen.FirstOrDefault(f => f.Name == "C_LATITUDE").DisplayValue : "";
        C_PLAYBOXFLAG = configscreen.Any(f => f.Name == "C_PLAYBOXFLAG") ? configscreen.FirstOrDefault(f => f.Name == "C_PLAYBOXFLAG").DisplayValue : "";
        C_SALES_REP = configscreen.Any(f => f.Name == "C_SALES_REP") ? configscreen.FirstOrDefault(f => f.Name == "C_SALES_REP").DisplayValue : "";
        //UR_Partner
        C_EMP_ID = configscreen.Any(f => f.Name == "C_EMP_ID") ? configscreen.FirstOrDefault(f => f.Name == "C_EMP_ID").DisplayValue : "";
        //NEW_FTTH
        C_COVERAGEAREA = configscreen.Any(f => f.Name == "C_COVERAGEAREA") ? configscreen.FirstOrDefault(f => f.Name == "C_COVERAGEAREA").DisplayValue : "";
        C_NETWORK_PROVIDER = configscreen.Any(f => f.Name == "C_NETWORK_PROVIDER") ? configscreen.FirstOrDefault(f => f.Name == "C_NETWORK_PROVIDER").DisplayValue : "";
        C_SUB_STATUS = configscreen.Any(f => f.Name == "C_SUB_STATUS") ? configscreen.FirstOrDefault(f => f.Name == "C_SUB_STATUS").DisplayValue : "";
        C_AREA_OWNER_NAME = configscreen.Any(f => f.Name == "C_AREA_OWNER_NAME") ? configscreen.FirstOrDefault(f => f.Name == "C_AREA_OWNER_NAME").DisplayValue : "";
        C_GROUP_OWNER = configscreen.Any(f => f.Name == "C_GROUP_OWNER") ? configscreen.FirstOrDefault(f => f.Name == "C_GROUP_OWNER").DisplayValue : "";
        C_AREA_OWNER_CONTACT_EMAIL = configscreen.Any(f => f.Name == "C_AREA_OWNER_CONTACT_EMAIL") ? configscreen.FirstOrDefault(f => f.Name == "C_AREA_OWNER_CONTACT_EMAIL").DisplayValue : "";
        C_AREA_OWNER_CONTACT_TEL = configscreen.Any(f => f.Name == "C_AREA_OWNER_CONTACT_TEL") ? configscreen.FirstOrDefault(f => f.Name == "C_AREA_OWNER_CONTACT_TEL").DisplayValue : "";
        C_FTTHDISPLAYMESSAGE = configscreen.Any(f => f.Name == "C_FTTHDISPLAYMESSAGE") ? configscreen.FirstOrDefault(f => f.Name == "C_FTTHDISPLAYMESSAGE").DisplayValue : "";
        C_WTTXDISPLAYMESSAGE = configscreen.Any(f => f.Name == "C_WTTXDISPLAYMESSAGE") ? configscreen.FirstOrDefault(f => f.Name == "C_WTTXDISPLAYMESSAGE").DisplayValue : "";
    }

    if (ViewBag.FbbConstant != null)
    {
        var configconst = (List<FbbConstantModel>)ViewBag.FbbConstant;
        LIMIT_DATE_FROM = configconst.Any(f => f.Field == "LIMIT_DATE_FROM") ? configconst.FirstOrDefault(f => f.Field == "LIMIT_DATE_FROM").Validation : "";
        LIMIT_DATE_TO = configconst.Any(f => f.Field == "LIMIT_DATE_TO") ? configconst.FirstOrDefault(f => f.Field == "LIMIT_DATE_TO").Validation : "";

    }

}



<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div class="page-header i-header-fit">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <h3 style="margin-top: 0">@L_PAGE_SALE_PORTAL_TITLE</h3>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12 col-md-12">
            <div class="panel panel-success">
                <div class="panel-heading">
                    <h3 class="panel-title">
                        <span>@H_SALE_PORTAL_RPT_1</span>
                        <a data-toggle="collapse" class="pull-right" href="#SearchPanel" onclick="onPanelToggle(this);" id="SearchPanelHeader"><i class="fa fa-chevron-circle-down fa-lg" id="SearchPanelHeaderArrow"></i></a>
                    </h3>
                </div>
                <div id="SearchPanel" class="panel-collapse collapse in">
                    <div class="panel-body" style="min-height: 135px;">
                        <div id="row1" class="row">
                            <div class="col-sm-6 col-md-6">
                                <label>@L_DATE_FROM</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DatePicker().Name("dtpDateFrom")
                                         .HtmlAttributes(new { @class = "form-control i-form-control-extend", onkeydown = "javascript:return false;" })
                                         .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                         .Format("dd/MM/yyyy")
                                         .Min(DateTime.Today.AddDays(-Int32.Parse(LIMIT_DATE_FROM)))
                                         .Max(DateTime.Today)
                                         .Events(e => e.Change("ChangdtpDateFrom")))
                                </div>
                                <div class="i-fg-data-entry-validation" id="validatefor-dtpDateFrom"></div>
                                <span class="k-invalid-msg" data-for="PickupDate"></span>
                            </div>
                            <div class="col-sm-6 col-md-6">
                                <label>@L_DATE_TO</label>
                                <div class="i-fg-data-entry">
                                    @(Html.Kendo().DatePicker().Name("dtpDateTo")
                                         .HtmlAttributes(new { @class = "form-control i-form-control-extend", onkeydown = "javascript:return false;" })
                                         .Format("dd/MM/yyyy")
                                         .Min(DateTime.Today.AddDays(-Int32.Parse(LIMIT_DATE_TO)))
                                         .Max(DateTime.Today)
                                         .ParseFormats(new List<string> { "dd/MM/yyyy" })
                                         .Events(e => e.Change("ChangdtpDateTo")))
                                </div>
                                <div class="i-fg-data-entry-validation" id="validatefor-dtpDateTo"></div>
                            </div>
                        </div>
                        @*end row1*@

                        <div id="row3" class="row i-gap-top-1">
                            <div class="col-sm-6 col-md-6">

                            </div>
                            <div class="col-sm-6 col-md-6 i-text-align-right">
                                <a class="btn btn-default" onclick="_Clear();"><i class="fa fa-ban fa-lg"></i>&nbsp;&nbsp;Cancel</a>
                                <a class="btn btn-info" onclick="_Search();"><i class="fa fa-search fa-lg"></i>&nbsp;&nbsp;Search</a>
                            </div>
                        </div>@*end row3*@

                    </div>

                </div>@*end SearchPanel*@

            </div>
        </div>
    </div>

    <div id="gridresult" class="row">
        <div class="col-sm-12 col-md-12 ">
            @(Html.Kendo().Grid<WBBEntity.PanelModels.WebServiceModels.SalePortalLeaveMessageList>()
                                .Name("GridSalePortalLeaveMessage")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.REF_NO).Title(@C_REF_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(200);
                                    columns.Bound(p => p.LANGUAGE).Title(@C_LANGUAGE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.CUST_NAME).Title(@C_CUST_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.CUST_SURNAME).Title(@C_CUST_SURNAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.CONTACT_MOBILE_NO).Title(@C_CONTACT_MOBILE_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(200);
                                    columns.Bound(p => p.IS_AIS_MOBILE).Title(@C_IS_AIS_MOBILE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.CONTACT_EMAIL).Title(@C_CONTACT_EMAIL).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.HOUSE_NO).Title(@C_HOUSE_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.BUILDING_NAME).Title(@C_BUILDING_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.VILLAGE_NAME).Title(@C_VILLAGE_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.SOI).Title(@C_SOI).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.ROAD).Title(@C_ROAD).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.SUB_DISTRICT).Title(@C_SUB_DISTRICT).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.DISTRICT).Title(@C_DISTRICT).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.PROVINCE).Title(@C_PROVINCE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.POSTAL_CODE).Title(@C_POSTAL_CODE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.CONTACT_TIME).Title(@C_CONTACT_TIME).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.SERVICE_SPEED).Title(@C_SERVICE_SPEED).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.IS_CONTACT_CUST).Title(@C_IS_CONTACT_CUST).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.REMARK_FOR_CONTACT_CUST).Title(@C_REMARK_FOR_CONTACT_CUST).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.IS_IN_COV).Title(@C_IS_IN_COV).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.REMARK_FOR_NO_COV).Title(@C_REMARK_FOR_NO_COV).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.CLOSING_SALE).Title(@C_CLOSING_SALE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.REMARK_FOR_NO_REG).Title(@C_REMARK_FOR_NO_REG).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.INCENTIVE_PAY).Title(@C_INCENTIVE_PAY).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.USER_NAME).Title(@C_USER_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.CREATE_DATE).Title(@C_CREATE_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.LAST_UPD_DATE).Title(@C_LAST_UPD_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);

                                    columns.Bound(p => p.LOCATION_CODE).Title(@C_LOCATION_CODE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.ASC_CODE).Title(@C_ASC_CODE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.CHANNEL).Title(@C_CHANNEL).HtmlAttributes(new { style = "text-align:left;" }).Width(150);

                                    columns.Bound(p => p.REFERRAL_INTERNET_NO).Title(@C_REFERRAL_INTERNET_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(200);
                                    columns.Bound(p => p.REFERRAL_NAME).Title(@C_REFERRAL_NAME).HtmlAttributes(new { style = "text-align:center;" }).Width(200);
                                    columns.Bound(p => p.REFERRAL_STAFF_ID).Title(@C_REFERRAL_STAFF_ID).HtmlAttributes(new { style = "text-align:center;" }).Width(200);

                                    columns.Bound(p => p.LINE_ID).Title(@C_LINE_ID).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                                    columns.Bound(p => p.REGISTER_DATE).Title(@C_REGISTER_DATE).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.ORDER_NO).Title(@C_ORDER_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(200);
                                    columns.Bound(p => p.NON_MOBILE_NO).Title(@C_NON_MOBILE_NO).HtmlAttributes(new { style = "text-align:center;" }).Width(100);
                                    columns.Bound(p => p.INSTALL_STATUS).Title(@C_INSTALL_STATUS).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.RENTAL_FLAG).Title(@C_RENTAL_FLAG).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                    columns.Bound(p => p.FULL_ADDRESS).Title(@C_FULL_ADDRESS).HtmlAttributes(new { style = "text-align:left;" }).Width(450);

                                    columns.Bound(p => p.URL).Title(@C_URL).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.CAMPAIGN_PROJECT_NAME).Title(@C_CAMPAIGN_PROJECT_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(300);
                                    columns.Bound(p => p.LONGITUDE).Title(@C_LONGITUDE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.LATITUDE).Title(@C_LATITUDE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.PLAYBOXFLAG).Title(@C_PLAYBOXFLAG).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.SALES_REP).Title(@C_SALES_REP).HtmlAttributes(new { style = "text-align:left;" }).Width(150);

                                    columns.Bound(p => p.EMP_ID).Title(@C_EMP_ID).HtmlAttributes(new { style = "text-align:left;" }).Width(150);

                                    columns.Bound(p => p.COVERAGE_AREA).Title(@C_COVERAGEAREA).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_NETWORKPROVIDER).Title(@C_NETWORK_PROVIDER).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_SUBSTATUS).Title(@C_SUB_STATUS).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_CONTACTNAME).Title(@C_AREA_OWNER_NAME).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_GROUPOWNER).Title(@C_GROUP_OWNER).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_CONTACTEMAIL).Title(@C_AREA_OWNER_CONTACT_EMAIL).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_CONTACTTEL).Title(@C_AREA_OWNER_CONTACT_TEL).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_FTTHDISPLAYMESSAGE).Title(@C_FTTHDISPLAYMESSAGE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);
                                    columns.Bound(p => p.COVERAGE_WTTXDISPLAYMESSAGE).Title(@C_WTTXDISPLAYMESSAGE).HtmlAttributes(new { style = "text-align:left;" }).Width(150);

                                })
                                .ToolBar(toolbar => toolbar.Template("" +
                "<div class='pull-right'><a onclick='_ExportToExcel()' id='btnExport'  class='btn btn-default'><i class='fa fa-reply fa-lg'></i>&nbsp; EXPORT </a>&nbsp;</div>"
                                ))
                                    .Scrollable(scrollable => scrollable.Height("auto"))
                                    .Pageable(pageable => pageable
                                    //.PageSizes(true)
                                    .Numeric(true)
                                    .PageSizes(new int[] { 20, 50, 100 })
                                    )
                                    .Sortable()
                                    .AutoBind(false)
                                    //.Filterable()
                                    .Resizable(resize => resize.Columns(true))
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        //.Sort(sort => sort.Add(p => p.Item_no).Ascending())
                                        .Read(read => read.Action("ReadSearchSalePortalLeaveMessage", "Fbbsaleportal").Data("bindingValue"))
                                        .PageSize(20)
                                        )
                                    .Events(e => e.DataBound("onGridDataBound"))
            )
        </div>

    </div>
</body>





<script>
    $(document).ready(function () {
        $('#btnExport').attr("disabled", true);

    });

    function post(path, params, method) {

        method = method || "post"; // Set method to post by default if not specified.

        // The rest of this code assumes you are not using a library.
        // It can be made less wordy if you use one.
        var form = document.createElement("form");
        form.setAttribute("method", method);
        form.setAttribute("action", path);

        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", params[key]);

                form.appendChild(hiddenField);
            }
        }

        document.body.appendChild(form);
        form.submit();
    }


    ////// Check Date Validation //////
    function ValidationDateValue(model) {

        var chk = ValidationProcessing("dateselect");

        if (chk) //check blank value
        {
            if ($.trim($("#dtpDateFrom").val()) == '') {
                $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is required.");
                chk = false;
            }
            else {
                $("#validatefor-" + "dtpDateFrom").html("");
            }

            if ($.trim($("#dtpDateTo").val()) == '') {
                $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is required.");
                chk = false;
            }
            else {
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        if (chk) //check format
        {
            if (!kendo.parseDate($("#dtpDateFrom").val(), "dd/MM/yyyy")) {
                if ($("#dtpDateFrom").val() != "") {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "This field is not correct format.");
                    chk = false;
                }
            }
            else {
                $("#validatefor-" + "dtpDateFrom").html("");
            }

            if (!kendo.parseDate($("#dtpDateTo").val(), "dd/MM/yyyy")) {
                if ($("#dtpDateTo").val() != "") {
                    $("#validatefor-" + "dtpDateTo").html(ValidationIcon() + "This field is not correct format.");
                    chk = false;
                }
            }
            else {
                $("#validatefor-" + "dtpDateTo").html("");
            }
        }

        if (chk) //check Date From must be earlier than Date To
        {
            var startPicker = new Date(kendo.parseDate($("#dtpDateFrom").val(), "mm/dd/yyyy"));
            var endPicker = new Date(kendo.parseDate($("#dtpDateTo").val(), "mm/dd/yyyy"));

            if (startPicker > endPicker) {
                if ($("#dtpDateFrom").val() != "") {
                    $("#validatefor-" + "dtpDateFrom").html(ValidationIcon() + "Date From must be earlier than Date To.");
                    chk = false;
                }
                else {
                    $("#validatefor-" + "dtpDateFrom").html("");
                }
            }
        }

        return chk;
    }

    var SalePortalLeaveMessageModel = function () {
        DateFrom: "";
        DateTo: "";
    }

    function bindingValue() {
        var model = defaultData();
        return {
            dataS: JSON.stringify(model)
        };
    }

    ///// Set Default Data //////
    function defaultData() {

        var searchResult = new SalePortalLeaveMessageModel();
        searchResult.DateFrom = kendo.toString($("#dtpDateFrom").val(), "dd/MM/yyyy");
        searchResult.DateTo = kendo.toString($("#dtpDateTo").val(), "dd/MM/yyyy");

        return searchResult;
    }

    function ChangdtpDateFrom() {

        var endPicker = $("#dtpDateTo").data("kendoDatePicker"),
            startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate()); // + - ตรงนี้จ้า
            endPicker.min(startDate);
        }

    }

    function ChangdtpDateTo() {
        var startPicker = $("#dtpDateFrom").data("kendoDatePicker"),
            endDate = this.value();

        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate());
            startPicker.max(endDate);
        }

    }

    function Chang_Request_Date() {
        var requestDatePicker = $("#dtpDateFrom").data("kendoDatePicker")
    }

    function _ExportToExcel() {
        var model = new defaultData();
        window.open("/Fbbsaleportal/ExportSalePortalLeaveMessageData?dataS=" + JSON.stringify(model) + "");
    }

    function onGridDataBound() {
        Loading(0);
        //itemCount = this.dataSource.view().length;
        //insert empty row
        if (this.dataSource.view().length == 0) {

            var colspan = this.thead.find("th").length;
            var emptyRow = "<tr><td colspan='" + colspan + "'></td></tr>";
            this.tbody.html(emptyRow);

            $(".k-grid-content").height(3 * kendo.support.scrollbar());
        }
        else {
            $(".k-grid-content").height("auto");
        }
        $('#btnExport').attr("disabled", !(this.dataSource.view().length != 0));
    }

    function _Search() {

        var model = defaultData();
        var chk = ValidationDateValue();
        if (chk) {
            Loading(0);
            var grid = $("#GridSalePortalLeaveMessage").data("kendoGrid");
            grid.dataSource.page(1);

        }
    }

    ///// Clear Button - Reset Button //////
    function _Clear() {
        var today = new Date();
        $("#dtpDateFrom").data("kendoDatePicker").value("");
        $("#dtpDateTo").data("kendoDatePicker").value("");

        $('#btnExport').attr("disabled", true);
        $("#GridSalePortalLeaveMessage").data("kendoGrid").dataSource.data([]);

        $("#validatefor-dtpDateTo").html("")
        $("#validatefor-dtpDateFrom").html("")
    }

</script>


</html>
