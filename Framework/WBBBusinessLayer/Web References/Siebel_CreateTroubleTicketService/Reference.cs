//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WBBBusinessLayer.Siebel_CreateTroubleTicketService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AIS_spcCreate_spcTrouble_spcTicket", Namespace="http://siebel.com/asi/")]
    public partial class AIS_spcCreate_spcTrouble_spcTicket : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateTTOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AIS_spcCreate_spcTrouble_spcTicket() {
            this.Url = global::WBBBusinessLayer.Properties.Settings.Default.WBBBusinessLayer_Siebel_CreateTroubleTicketService_AIS_spcCreate_spcTrouble_spcTicket;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateTTCompletedEventHandler CreateTTCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("rpc/http://siebel.com/asi/:CreateTT", RequestNamespace="http://siebel.com/asi/", ResponseNamespace="http://siebel.com/asi/")]
        [return: System.Xml.Serialization.SoapElementAttribute("OutErrorMessage")]
        public string CreateTT(
                    string InProblemDate_End, 
                    string InMooban, 
                    string InMobileNumber, 
                    string InIndoor, 
                    string InDestModel, 
                    string InParam1, 
                    string InFloor, 
                    string InAssetId, 
                    string InTumbol, 
                    string InRefArea, 
                    string InCurrentSignalLevel, 
                    string InStreet, 
                    string InParam2, 
                    string InDestMobileNumber, 
                    string InAccountId, 
                    string InUsedCountry, 
                    string InChannel, 
                    string InBuilding, 
                    string InSoi, 
                    string InParam3, 
                    string InModel, 
                    string InSubCategory, 
                    string InProvince, 
                    string InProblemDate, 
                    string InPath, 
                    string InDescription, 
                    string InOption, 
                    string InMaxSignalLevel, 
                    string InHouseNumber, 
                    string InProductName, 
                    string InDestBrand, 
                    string InAmphur, 
                    string InParam5, 
                    string InParam4, 
                    string InContactId, 
                    string InSymptomNote, 
                    string InOtherContactPhone, 
                    string InOperatorName, 
                    string InBrand, 
                    string InContentProvider, 
                    string InCategory, 
                    out string OutParam1, 
                    out string OutParam2, 
                    out string OutParam3, 
                    out string OutParam4, 
                    out string OutParam5, 
                    out string OutResult, 
                    out string OutTTNumber) {
            object[] results = this.Invoke("CreateTT", new object[] {
                        InProblemDate_End,
                        InMooban,
                        InMobileNumber,
                        InIndoor,
                        InDestModel,
                        InParam1,
                        InFloor,
                        InAssetId,
                        InTumbol,
                        InRefArea,
                        InCurrentSignalLevel,
                        InStreet,
                        InParam2,
                        InDestMobileNumber,
                        InAccountId,
                        InUsedCountry,
                        InChannel,
                        InBuilding,
                        InSoi,
                        InParam3,
                        InModel,
                        InSubCategory,
                        InProvince,
                        InProblemDate,
                        InPath,
                        InDescription,
                        InOption,
                        InMaxSignalLevel,
                        InHouseNumber,
                        InProductName,
                        InDestBrand,
                        InAmphur,
                        InParam5,
                        InParam4,
                        InContactId,
                        InSymptomNote,
                        InOtherContactPhone,
                        InOperatorName,
                        InBrand,
                        InContentProvider,
                        InCategory});
            OutParam1 = ((string)(results[1]));
            OutParam2 = ((string)(results[2]));
            OutParam3 = ((string)(results[3]));
            OutParam4 = ((string)(results[4]));
            OutParam5 = ((string)(results[5]));
            OutResult = ((string)(results[6]));
            OutTTNumber = ((string)(results[7]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTTAsync(
                    string InProblemDate_End, 
                    string InMooban, 
                    string InMobileNumber, 
                    string InIndoor, 
                    string InDestModel, 
                    string InParam1, 
                    string InFloor, 
                    string InAssetId, 
                    string InTumbol, 
                    string InRefArea, 
                    string InCurrentSignalLevel, 
                    string InStreet, 
                    string InParam2, 
                    string InDestMobileNumber, 
                    string InAccountId, 
                    string InUsedCountry, 
                    string InChannel, 
                    string InBuilding, 
                    string InSoi, 
                    string InParam3, 
                    string InModel, 
                    string InSubCategory, 
                    string InProvince, 
                    string InProblemDate, 
                    string InPath, 
                    string InDescription, 
                    string InOption, 
                    string InMaxSignalLevel, 
                    string InHouseNumber, 
                    string InProductName, 
                    string InDestBrand, 
                    string InAmphur, 
                    string InParam5, 
                    string InParam4, 
                    string InContactId, 
                    string InSymptomNote, 
                    string InOtherContactPhone, 
                    string InOperatorName, 
                    string InBrand, 
                    string InContentProvider, 
                    string InCategory) {
            this.CreateTTAsync(InProblemDate_End, InMooban, InMobileNumber, InIndoor, InDestModel, InParam1, InFloor, InAssetId, InTumbol, InRefArea, InCurrentSignalLevel, InStreet, InParam2, InDestMobileNumber, InAccountId, InUsedCountry, InChannel, InBuilding, InSoi, InParam3, InModel, InSubCategory, InProvince, InProblemDate, InPath, InDescription, InOption, InMaxSignalLevel, InHouseNumber, InProductName, InDestBrand, InAmphur, InParam5, InParam4, InContactId, InSymptomNote, InOtherContactPhone, InOperatorName, InBrand, InContentProvider, InCategory, null);
        }
        
        /// <remarks/>
        public void CreateTTAsync(
                    string InProblemDate_End, 
                    string InMooban, 
                    string InMobileNumber, 
                    string InIndoor, 
                    string InDestModel, 
                    string InParam1, 
                    string InFloor, 
                    string InAssetId, 
                    string InTumbol, 
                    string InRefArea, 
                    string InCurrentSignalLevel, 
                    string InStreet, 
                    string InParam2, 
                    string InDestMobileNumber, 
                    string InAccountId, 
                    string InUsedCountry, 
                    string InChannel, 
                    string InBuilding, 
                    string InSoi, 
                    string InParam3, 
                    string InModel, 
                    string InSubCategory, 
                    string InProvince, 
                    string InProblemDate, 
                    string InPath, 
                    string InDescription, 
                    string InOption, 
                    string InMaxSignalLevel, 
                    string InHouseNumber, 
                    string InProductName, 
                    string InDestBrand, 
                    string InAmphur, 
                    string InParam5, 
                    string InParam4, 
                    string InContactId, 
                    string InSymptomNote, 
                    string InOtherContactPhone, 
                    string InOperatorName, 
                    string InBrand, 
                    string InContentProvider, 
                    string InCategory, 
                    object userState) {
            if ((this.CreateTTOperationCompleted == null)) {
                this.CreateTTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTTOperationCompleted);
            }
            this.InvokeAsync("CreateTT", new object[] {
                        InProblemDate_End,
                        InMooban,
                        InMobileNumber,
                        InIndoor,
                        InDestModel,
                        InParam1,
                        InFloor,
                        InAssetId,
                        InTumbol,
                        InRefArea,
                        InCurrentSignalLevel,
                        InStreet,
                        InParam2,
                        InDestMobileNumber,
                        InAccountId,
                        InUsedCountry,
                        InChannel,
                        InBuilding,
                        InSoi,
                        InParam3,
                        InModel,
                        InSubCategory,
                        InProvince,
                        InProblemDate,
                        InPath,
                        InDescription,
                        InOption,
                        InMaxSignalLevel,
                        InHouseNumber,
                        InProductName,
                        InDestBrand,
                        InAmphur,
                        InParam5,
                        InParam4,
                        InContactId,
                        InSymptomNote,
                        InOtherContactPhone,
                        InOperatorName,
                        InBrand,
                        InContentProvider,
                        InCategory}, this.CreateTTOperationCompleted, userState);
        }
        
        private void OnCreateTTOperationCompleted(object arg) {
            if ((this.CreateTTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTTCompleted(this, new CreateTTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CreateTTCompletedEventHandler(object sender, CreateTTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string OutParam1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string OutParam2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string OutParam3 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string OutParam4 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string OutParam5 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string OutResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string OutTTNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
}

#pragma warning restore 1591