//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WBBBusinessLayer.SiebelGenActivity {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AIS_spcIM_spcCommon_spcCreate_spcActivity", Namespace="http://siebel.com/asi/")]
    public partial class AIS_spcIM_spcCommon_spcCreate_spcActivity : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CommonCreateActivityOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AIS_spcIM_spcCommon_spcCreate_spcActivity() {
            this.Url = global::WBBBusinessLayer.Properties.Settings.Default.WBBBusinessLayer_SiebelGenActivity_AIS_spcIM_spcCommon_spcCreate_spcActivity;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CommonCreateActivityCompletedEventHandler CommonCreateActivityCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("rpc/http://siebel.com/asi/:CommonCreateActivity", RequestNamespace="http://siebel.com/asi/", ResponseNamespace="http://siebel.com/asi/")]
        [return: System.Xml.Serialization.SoapElementAttribute("ActivityId")]
        public string CommonCreateActivity(
                    string SRNumber, 
                    string OrderId, 
                    string SerialNumber, 
                    string Done, 
                    string Status, 
                    string Planned, 
                    string CampaignId, 
                    string PrimaryOwnerId, 
                    string Comment, 
                    string NoSoonerThanDate, 
                    string ActivityCategory, 
                    string Reason, 
                    string Type, 
                    string Started, 
                    string DocumentNo, 
                    string MoreInfo, 
                    ref string CheckOrderId, 
                    string AssetId, 
                    string AccountId, 
                    string SubStatus, 
                    string ContactId, 
                    string ActivitySubCategory, 
                    string Priority, 
                    string PrimaryProductId, 
                    string OwnerName, 
                    out string Error_spcMessage, 
                    out string ErrorMessage) {
            object[] results = this.Invoke("CommonCreateActivity", new object[] {
                        SRNumber,
                        OrderId,
                        SerialNumber,
                        Done,
                        Status,
                        Planned,
                        CampaignId,
                        PrimaryOwnerId,
                        Comment,
                        NoSoonerThanDate,
                        ActivityCategory,
                        Reason,
                        Type,
                        Started,
                        DocumentNo,
                        MoreInfo,
                        CheckOrderId,
                        AssetId,
                        AccountId,
                        SubStatus,
                        ContactId,
                        ActivitySubCategory,
                        Priority,
                        PrimaryProductId,
                        OwnerName});
            CheckOrderId = ((string)(results[1]));
            Error_spcMessage = ((string)(results[2]));
            ErrorMessage = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CommonCreateActivityAsync(
                    string SRNumber, 
                    string OrderId, 
                    string SerialNumber, 
                    string Done, 
                    string Status, 
                    string Planned, 
                    string CampaignId, 
                    string PrimaryOwnerId, 
                    string Comment, 
                    string NoSoonerThanDate, 
                    string ActivityCategory, 
                    string Reason, 
                    string Type, 
                    string Started, 
                    string DocumentNo, 
                    string MoreInfo, 
                    string CheckOrderId, 
                    string AssetId, 
                    string AccountId, 
                    string SubStatus, 
                    string ContactId, 
                    string ActivitySubCategory, 
                    string Priority, 
                    string PrimaryProductId, 
                    string OwnerName) {
            this.CommonCreateActivityAsync(SRNumber, OrderId, SerialNumber, Done, Status, Planned, CampaignId, PrimaryOwnerId, Comment, NoSoonerThanDate, ActivityCategory, Reason, Type, Started, DocumentNo, MoreInfo, CheckOrderId, AssetId, AccountId, SubStatus, ContactId, ActivitySubCategory, Priority, PrimaryProductId, OwnerName, null);
        }
        
        /// <remarks/>
        public void CommonCreateActivityAsync(
                    string SRNumber, 
                    string OrderId, 
                    string SerialNumber, 
                    string Done, 
                    string Status, 
                    string Planned, 
                    string CampaignId, 
                    string PrimaryOwnerId, 
                    string Comment, 
                    string NoSoonerThanDate, 
                    string ActivityCategory, 
                    string Reason, 
                    string Type, 
                    string Started, 
                    string DocumentNo, 
                    string MoreInfo, 
                    string CheckOrderId, 
                    string AssetId, 
                    string AccountId, 
                    string SubStatus, 
                    string ContactId, 
                    string ActivitySubCategory, 
                    string Priority, 
                    string PrimaryProductId, 
                    string OwnerName, 
                    object userState) {
            if ((this.CommonCreateActivityOperationCompleted == null)) {
                this.CommonCreateActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommonCreateActivityOperationCompleted);
            }
            this.InvokeAsync("CommonCreateActivity", new object[] {
                        SRNumber,
                        OrderId,
                        SerialNumber,
                        Done,
                        Status,
                        Planned,
                        CampaignId,
                        PrimaryOwnerId,
                        Comment,
                        NoSoonerThanDate,
                        ActivityCategory,
                        Reason,
                        Type,
                        Started,
                        DocumentNo,
                        MoreInfo,
                        CheckOrderId,
                        AssetId,
                        AccountId,
                        SubStatus,
                        ContactId,
                        ActivitySubCategory,
                        Priority,
                        PrimaryProductId,
                        OwnerName}, this.CommonCreateActivityOperationCompleted, userState);
        }
        
        private void OnCommonCreateActivityOperationCompleted(object arg) {
            if ((this.CommonCreateActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommonCreateActivityCompleted(this, new CommonCreateActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CommonCreateActivityCompletedEventHandler(object sender, CommonCreateActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommonCreateActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommonCreateActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CheckOrderId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Error_spcMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591